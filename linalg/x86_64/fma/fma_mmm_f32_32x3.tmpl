{% comment %}
// vim: set syntax=asm :
/* mmm 16 x 5:

    ymm0 ymm4 ymm8
    ymm1 ymm5 ymm9
    ymm2 ymm6 ymm10
    ymm3 ymm7 ymm11

System V ABI:
    args: rdi, rsi, rdx, rcx, r8, r9
    preserve: rbx, rsp, rbp, r12, r13, r14, r15
    scratch: rax, rdi, rsi, rdx, rcx, r8, r9, r10, r11
    return: rax (+rdx)

Windows ABI:
    args: RCX, RDX, R8, R9
    preserve: RBX, RBP, RDI, RSI, RSP, R12, R13, R14, R15, and XMM6-15
    scratch: RAX, RCX, RDX, R8, R9, R10, R11, XMM0-5, and the upper portions of YMM0-15 and ZMM0-15
    return: rax (+rdx)
*/
{% endcomment %}

{% include "preamble.tmpliq" type:"f32", size:"32x3", suffix:suffix, G:G %}

{{L}}clear:
    vzeroall
    jmp     {{L}}non_linear_loop

{{L}}add_mat_mul:
    mov     rcx,    [rdi + 24]   // B
    mov     rax,    [rdi + 16]   // A

    mov     rbx,    [rdi + 8]    // k
    test    rbx,    rbx
    jz      {{L}}non_linear_loop

{{L}}main_loop_packed_packed:
    {% include "4x3/packed_packed_loop1/avx.tmpli" %}

    dec             rbx
    jnz             {{L}}main_loop_packed_packed

    jmp             {{L}}non_linear_loop

// NON LINEAR / ADDC

{% include "fma_mmm_f32_scalars.tmpliq" from:0, to:11, type:"f32" %}
{% include "fma_mmm_f32_per_rows.tmpliq" mr:32, from:0, to:11, type:"f32" %}
{% include "fma_mmm_f32_per_cols.tmpliq" mr:32, from:0, to:11, type:"f32" %}
{% include "fma_mmm_load_tile_col_major.tmpliq" from:0, to:11 %}

{{L}}add_unicast:
    mov     r8,    [rdi + 8]           // c ptr
    mov     rsi,    [rdi + 16]          // row stride
    mov     rbx,    [rdi + 24]          // col stride

    cmp     rsi, 4
    jne     {{L}}unicast_generic

    lea             r9,  [ r8 + rbx ]
    lea             r10, [ r9 + rbx]
    lea             r11, [ r10 + rbx ]

{% for col in (0..2) %}
    {% for row in (0..3) %}
        vmovups     ymm12, [ r{{col|plus:8}} ]
        add         r{{col|plus:8}}, 32
        vaddps      ymm{{col|times:4|plus:row}}, ymm{{col|times:4|plus:row}}, ymm12
    {% endfor %}
{% endfor %}

    jmp    {{L}}non_linear_loop

{{L}}unicast_generic:
    mov     eax,    0
{% for i in (0..3) %}
    pinsrd  xmm14, eax, {{i}}
    add     eax,    esi
{% endfor %}
{% for i in (0..3) %}
    pinsrd  xmm15, eax, {{i}}
    add     eax,    esi
{% endfor %}

//  mov r12, [0]
    vperm2f128      ymm14,  ymm14, ymm15,         32 // ymm14 <- xmm14::xmm15

    lea             r9,  [ r8 + rsi * 8 ]
    lea             r10, [ r9 + rsi * 8 ]
    lea             r11, [ r10 + rsi * 8 ]

{% for col in (0..2) %}
   {% for row in (0..3) %}
      vpcmpeqd      ymm15,  ymm15, ymm15
      vgatherdps    ymm12,  [ r{{row|plus:8}} + ymm14 ], ymm15
      add           r{{row|plus:8}}, rbx
      vaddps        ymm{{col|times:4|plus:row}}, ymm{{col|times:4|plus:row}}, ymm12
   {% endfor %}
{% endfor %}

    jmp    {{L}}non_linear_loop


{{L}}add_row_col_products:
    mov             rax, [ rdi + 8 ]
    mov             rbx, [ rdi + 16 ]

    vbroadcastss    ymm13, dword ptr [rbx]
    vbroadcastss    ymm14, dword ptr [rbx + 4]
    vbroadcastss    ymm15, dword ptr [rbx + 8]
{% for i in (0..3) %}
    vmovups         ymm12,  [rax + {{i|times:32}}]
    vfmadd231ps     ymm{{0|plus:i}}, ymm12, ymm13
    vfmadd231ps     ymm{{4|plus:i}}, ymm12, ymm14
    vfmadd231ps     ymm{{8|plus:i}}, ymm12, ymm15
{% endfor %}
    jmp    {{L}}non_linear_loop

{{L}}store:
    mov     r8,     [rdi + 8]           // c ptr
    mov     rsi,    [rdi + 16]          // row stride
    mov     rbx,    [rdi + 24]          // col stride

    lea     r9,     [ r8 + rbx ]
    lea     r10,    [ r8 + 2 * rbx ]

    cmp         rsi, 4
    jne         {{L}}store_strides_generic


    {% for col in (0..2) %}
        {% for row in (0..3) %}
            vmovups ymmword ptr [r{{col|plus:8}}], ymm{{col|times:4|plus:row}}
            add     r{{col|plus:8}}, 32
       {% endfor %}
    {% endfor %}

    jmp     {{L}}non_linear_loop

{{L}}store_strides_generic:

    {% for col in (0..2) %}
       {% for row in (0..3) %}
           {% for i in (0..3) %}
                vextractps  dword ptr [r{{col | plus: 8}}], xmm{{col | times:4 | plus:row}}, {{i}}
                add         r{{col | plus: 8}}, rsi
           {% endfor %}
           vperm2f128  ymm{{col | times:4 | plus:row}}, ymm{{col | times:4 | plus:row}}, ymm{{col | times:4 | plus:row}}, 1
           {% for i in (0..3) %}
                vextractps  dword ptr [r{{col | plus: 8}}], xmm{{col | times:4|plus:row}}, {{i}}
                add         r{{col | plus: 8}}, rsi
           {% endfor %}
       {% endfor %}
    {% endfor %}
    jmp     {{L}}non_linear_loop

{% include "postamble.tmpliq" type:"f32", size:"32x3", suffix:suffix, G:G, L:L %}
