// vim: set syntax=asm :

{{L}}non_linear:

    mov     rcx,    [rdi + 24]          // non linear spec
    test    rcx,    rcx
    jnz     {{L}}non_linear_loop_enter

// NON LINEAR LOOP

{{L}}non_linear_loop_enter:
    sub     rcx,    40
{{L}}non_linear_loop:
    add     rcx,    40
    mov     rax,    [rcx]

    mov     r8, 13
    cmp     rax, 0
    cmovl   rax, r8
    cmp     rax, 12
    cmovg   rax, r8

{% if msvc %}
    lea     r8, [ offset {{L}}jmp_table ]
{% else %}
    lea     r8, [ rip + {{L}}jmp_table ]
{% endid %}
    movsx   r9, dword ptr [ r8 + rax * 4 ]
    lea     r8, [ r8 + r9 ]
    jmp     r8

{{L}}jmp_table:
    .long      {{L}}done - {{L}}jmp_table
    .long      {{L}}min - {{L}}jmp_table
    .long      {{L}}max - {{L}}jmp_table
    .long      {{L}}add_unicast - {{L}}jmp_table
    .long      {{L}}per_row_mul - {{L}}jmp_table
    .long      {{L}}per_row_add - {{L}}jmp_table
    .long      {{L}}per_col_mul - {{L}}jmp_table
    .long      {{L}}per_col_add - {{L}}jmp_table
    .long      {{L}}add_row_col_products - {{L}}jmp_table
    .long      {{L}}scalar_mul - {{L}}jmp_table
    .long      {{L}}scalar_add - {{L}}jmp_table
    .long      {{L}}q_scale - {{L}}jmp_table
    .long      {{L}}store - {{L}}jmp_table


    jmp     {{L}}unsupported


{{L}}unsupported:
    mov     rax,    1
    jmp     {{L}}return


{{L}}done:
    mov     rax, 0
    jmp     {{L}}return

