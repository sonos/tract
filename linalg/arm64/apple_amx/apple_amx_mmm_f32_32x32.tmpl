// vim: ft=arm
.text
.align 4

/* Z: 32x32
 z0[0] ..  z0[15] z1[0] .. z1[15]
 z4[0] ..  z4[15] z1[0] .. z1[15]
  ..
z60[0] .. z60[15] z61[0] .. z61[15]

 z2[0] ..  z2[15] z3[0] .. z3[15]
 z5[0] ..  z5[15] z6[0] .. z6[15]
  ..
z62[0] .. z62[15] z63[0] .. z63[15]
*/
    

.global {{G}}apple_amx_mmm_f32_32x32_{{suffix}}
{{G}}apple_amx_mmm_f32_32x32_{{suffix}}:

{{ AMX_SET }}
{% include "dispatcher.tmpliq" %}

.clear:
    eor x1, x1, x1
    {% amx fma32 x1 %}
    b .non_linear_loop

.per_col_max:
.per_col_min:
.per_col_mul:
.per_col_sub:
.per_col_sub_flipped:
.per_row_max:
.per_row_min:
.per_row_mul:
.per_row_sub:
.per_row_sub_flipped:
.q_scale:
.q_shl:
.q_shr:
.scalar_mul:
.scalar_sub:
.scalar_sub_flipped:
.add_mat_mul:
    b .unsupported

.per_col_add:
    ldr         x2, [x0, #8]
    mov x1, sp
    lsr x1, x1, #7
    lsl x1, x1, #7
    sub x1, x1, 128

    ld1         { v0.4s, v1.4s, v2.4s, v3.4s }, [x2], #64
    st1         { v0.4s, v1.4s, v2.4s, v3.4s }, [x1], #64
    ld1         { v0.4s, v1.4s, v2.4s, v3.4s }, [x2]
    st1         { v0.4s, v1.4s, v2.4s, v3.4s }, [x1]
    sub x1, x1, #64

    orr x1, x1, {{ 0|setting:62 }}  // load a pair
    {% amx ldx x1 %}

    mov x2, {{ 0|setting:28 }}      // z += y

    // top left
    {% amx fma32 x2 %}

    // bottom left
    orr x2, x2, {{ 0|setting:21 }}  // Z row = 2
    {% amx fma32 x2 %}

    // bottom right
    orr x2, x2, {{ 0|setting:16 }}  // X offset
    orr x2, x2, {{ 0|setting:20 }}  // Z row = 3
    {% amx fma32 x2 %}

    // top right
    eor x2, x2, {{ 0|setting:21 }}  // Z row = 1
    {% amx fma32 x2 %}


    b .non_linear_loop

.per_row_add:
    ldr         x2, [x0, #8]

    mov x1, sp
    lsr x1, x1, #7
    lsl x1, x1, #7
    sub x1, x1, 128

    ld1         { v0.4s, v1.4s, v2.4s, v3.4s }, [x2], #64
    st1         { v0.4s, v1.4s, v2.4s, v3.4s }, [x1], #64
    ld1         { v0.4s, v1.4s, v2.4s, v3.4s }, [x2]
    st1         { v0.4s, v1.4s, v2.4s, v3.4s }, [x1]
    sub x1, x1, #64

    orr x1, x1, {{ 0|setting:62 }}  // load a pair
    {% amx ldy x1 %}

    mov x2, {{ 0|setting:29 }}      // z += y

    // top left
    {% amx fma32 x2 %}

    // top right
    orr x2, x2, {{ 0|setting:20 }}  // Z row = 1
    {% amx fma32 x2 %}

    // bottom right
    orr x2, x2, {{ 0|setting:21 }}  // Z row = 3
    orr x2, x2, {{ 0|setting:6 }}   // Y offset
    {% amx fma32 x2 %}

    // bottom left
    eor x2, x2, {{ 0|setting:20 }}  // Z row = 2
    {% amx fma32 x2 %}

    b .non_linear_loop

.scalar_add:
    ldr         w5, [x0, #8]
    mov x1, sp
    lsr x1, x1, #7
    lsl x1, x1, #7
    sub x1, x1, 128
    fmov        s0, w5
    dup         v0.4s, v0.s[0]
    dup         v1.4s, v0.s[0]
    dup         v2.4s, v0.s[0]
    dup         v3.4s, v0.s[0]

    st1         { v0.4s, v1.4s, v2.4s, v3.4s }, [x1]
    {% amx ldx x1 %}    // load 16 values

    mov x2, 0x10000000    // set 28 => Z+=X 
    {% for chunk in (0..3) %}
        {% amx fma32 x2 %}
        add x2, x2, 0x100000 // 1 << 20
    {% endfor %}
    b .non_linear_loop

.scalar_min:
    mov x2, 5
    b .scalar_min_max
.scalar_max:
    mov x2, 7
.scalar_min_max:
    ldr         w5, [x0, #8]
    mov x1, sp
    lsr x1, x1, #7
    lsl x1, x1, #7
    sub x1, x1, 128
    fmov        s0, w5
    dup         v0.4s, v0.s[0]
    dup         v1.4s, v0.s[0]
    dup         v2.4s, v0.s[0]
    dup         v3.4s, v0.s[0]

    st1         { v0.4s, v1.4s, v2.4s, v3.4s }, [x1]
    {% amx ldx x1 %}    // load 16 values

    lsl x2, x2, 47
    orr x2, x2, {{ 0|setting:44 }} // f32

    mov x3, 64
    .loop_scalar_max:
        add x2, x2, 0x100000 // 1 << 20
        {% amx vecfp x2 %}
        subs x3, x3, 1
        bne .loop_scalar_max

    b .non_linear_loop

.add_unicast:
    ldp         x5, x6, [x0, #8]            // c base ptr, rsc
    ldp         x7, x8, [x0, #24]           // csc, item_size

    mov x1, sp
    lsr x1, x1, #7
    lsl x1, x1, #7
    sub x1, x1, 128
    add x8, x1, 64

    mov x3, 0                               // x3 is the row
    .loop_load:
        and x9, x3, 0xf                     // x9 = row % 16
        lsl x9, x9, 2                       // x9 = (row % 16) * 4
        lsr x10, x3, 4                      // x10 = row / 16 
        lsl x10, x10, 1                     // x10 = (row / 16) * 2
        add x9, x9, x10                     // x9 = x9 + x10

        mov x4, x5
        {% for neon in (0..3) %}
            {% for lane in (0..3) %}
                ld1 { v{{neon}}.s }[{{lane}}], [x4], x7
            {% endfor %}
        {% endfor %}
        st1 { v0.4s, v1.4s, v2.4s, v3.4s }, [x1]
        {% for neon in (0..3) %}
            {% for lane in (0..3) %}
                ld1 { v{{neon}}.s }[{{lane}}], [x4], x7
            {% endfor %}
        {% endfor %}
        st1 { v0.4s, v1.4s, v2.4s, v3.4s }, [x8]

        mov x2, x1
        orr x2, x2, {{ 0|setting:62 }} // load 32 values
        {% amx ldy x2 %}

        lsl x2, x9, 20                  // left Z register to update
        orr x2, x2, {{ 0|setting:63 }}  // vector mode
        orr x2, x2, {{ 0|setting:29 }}  // perform Z+=Y
        {% amx fma32 x2 %}

        add x2, x2, {{0|setting:20}}
        orr x2, x2, 64                  // offset Y by 16 values
        {% amx fma32 x2 %}

        add x5, x5, x6
    add x3, x3, 1
    cmp x3, 32
    bne .loop_load

    b .non_linear_loop

.add_row_col_products:
    ldp         x5, x6, [x0, #8]            // a base ptr, b base ptr

    mov x1, sp
    lsr x1, x1, #7
    lsl x1, x1, #7
    sub x1, x1, 128
    add x8, x1, 64

    ld1         { v0.4s, v1.4s, v2.4s, v3.4s }, [x5], #64
    st1         { v0.4s, v1.4s, v2.4s, v3.4s }, [x1], #64
    ld1         { v0.4s, v1.4s, v2.4s, v3.4s }, [x5]
    st1         { v0.4s, v1.4s, v2.4s, v3.4s }, [x1]
    sub x1, x1, #64

    orr x1, x1, {{ 0|setting:62 }}  // load a pair
    {% amx ldy x1 %}

    ld1         { v0.4s, v1.4s, v2.4s, v3.4s }, [x6], #64
    st1         { v0.4s, v1.4s, v2.4s, v3.4s }, [x1], #64
    ld1         { v0.4s, v1.4s, v2.4s, v3.4s }, [x6]
    st1         { v0.4s, v1.4s, v2.4s, v3.4s }, [x1]
    sub x1, x1, #64

    orr x1, x1, {{ 0|setting:62 }}  // load a pair
    {% amx ldx x1 %}

    // top left
    eor x2, x2, x2
    {% amx fma32 x2 %}

    // top right
    orr x2, x2, {{ 0|setting:20 }}  // Z row = 1
    orr x2, x2, {{ 0|setting:16 }}  // X offset
    {% amx fma32 x2 %}

    // bottom right
    orr x2, x2, {{ 0|setting:21 }}  // Z row = 3
    orr x2, x2, {{ 0|setting:6 }}   // Y offset
    {% amx fma32 x2 %}

    // bottom left
    eor x2, x2, {{ 0|setting:20 }}  // Z row = 2
    eor x2, x2, {{ 0|setting:16 }}  // X offset <-
    {% amx fma32 x2 %}

    b .non_linear_loop

.store:
    ldp         x5, x6, [x0, #8]            // c base ptr, rsc
    ldp         x7, x8, [x0, #24]           // csc, item_size
    
    mov x1, sp
    lsr x1, x1, #7
    lsl x1, x1, #7
    sub x1, x1, 128
    add x8, x1, 64

    mov x3, 0                               // row id
    .loop_store:
        and x9, x3, 0xf                     // x9 = row % 16
        lsl x9, x9, 2                       // x9 = (row % 16) * 4
        lsr x10, x3, 4                      // x10 = row / 16 
        lsl x10, x10, 1                     // x10 = (row / 16) * 2
        add x9, x9, x10                     // x9 = x9 + x10

        lsl x2, x9, 56
        orr x2, x2, {{ 0|setting:62 }}
        orr x2, x2, x1
        {% amx stz x2 %}
        ld1 { v0.4s, v1.4s, v2.4s, v3.4s }, [x1]

        mov x4, x5
        {% for neon in (0..3) %}
            {% for lane in (0..3) %}
                st1 { v{{neon}}.s }[{{lane}}], [x4], x7
            {% endfor %}
        {% endfor %}
        ld1 { v0.4s, v1.4s, v2.4s, v3.4s }, [x8]
        {% for neon in (0..3) %}
            {% for lane in (0..3) %}
                st1 { v{{neon}}.s }[{{lane}}], [x4], x7
            {% endfor %}
        {% endfor %}
        add x5, x5, x6

    add x3, x3, 1
    cmp x3, 32
    bne .loop_store

    b .non_linear_loop

.return:
{{ AMX_CLR }}
ret
