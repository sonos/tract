// vim: ft=arm

// C tile regs: v16 to v31, no need to preserve
// 
//      v16[0] v18[0] v20[0] v22[0] v24[0] v26[0] v28[0] v30[0]
//      v16[1] v18[1] 
//      v16[2] v18[2] 
//      v16[3] v18[3]
//                     
//      v17[0] v19[0] v21[0] v23[0] v25[0] v27[0] v29[0] v31[0]
//      v17[1] v19[1] 
//      v17[2] v19[2] 
//      v17[3] v19[3] 

// no preservation either for v0-v7...
// v8..v15 are callee-preserved
// packed A buffering (2x8 values): alternating v0, v1 with v2, v3
// packed B buffering (2x8 values): alternating v4, v5 with v6, v7

.text
.align 4

.cpu generic+fp+simd
.global {{G}}arm64simd_mmm_f32_64x1_{{core}}_{{suffix}}
{{G}}arm64simd_mmm_f32_64x1_{{core}}_{{suffix}}:

    sub	        sp, sp, 64
    stp         d8, d9, [sp, #0]
    stp         d10, d11, [sp, #16]
    stp         d12, d13, [sp, #32]
    stp         d14, d15, [sp, #48]

{% for r in (16..31) %}
    eor         v{{r}}.8b, v{{r}}.8b, v{{r}}.8b
{% endfor %}

{% include "dispatcher.tmpliq" %}

.add_mat_mul:
    ldr         x8, [x0, #24]       // b
    ldp         x3, x1, [x0, #8]    // k, a
    ldp         x4, x2, [x8]        // b disc, first arg

    cmp         x3, #0
    beq         .non_linear_loop

    cmp         x4, #0
    beq         .packed_packed

.packed_tops_and_offsets:
    ldr         x8, [x8, #16]       // cols ptr ptr (x2 = row offsets ptr)
    ldr         x4, [ x2 ], #8      // fist row offset

    ldr         x5, [x8]            // heads of cols ptr

    cmp         x3, #4
    blt         .packed_tops_and_offsets_loop_1

.p2align 4
.packed_tops_and_offsets_loop_1:
    add         x8, x4, x5
    ld1         {v8.s}[0], [ x8 ]

    ld1         { v0.4s, v1.4s, v2.4s, v3.4s }, [ x1 ], #64
    ld1         { v4.4s, v5.4s, v6.4s, v7.4s }, [ x1 ], #64

    fmla        v16.4s, v0.4s, v8.s[0]
    fmla        v17.4s, v1.4s, v8.s[0]
    fmla        v18.4s, v2.4s, v8.s[0]
    fmla        v19.4s, v3.4s, v8.s[0]
    ld1         { v0.4s, v1.4s, v2.4s, v3.4s }, [ x1 ], #64

    fmla        v20.4s, v4.4s, v8.s[0]
    fmla        v21.4s, v5.4s, v8.s[0]
    fmla        v22.4s, v6.4s, v8.s[0]
    fmla        v23.4s, v7.4s, v8.s[0]

    ld1         { v4.4s, v5.4s, v6.4s, v7.4s }, [ x1 ], #64
    fmla        v24.4s, v0.4s, v8.s[0]
    fmla        v25.4s, v1.4s, v8.s[0]
    fmla        v26.4s, v2.4s, v8.s[0]
    fmla        v27.4s, v3.4s, v8.s[0]
    ldr         x4, [ x2 ], #8
    fmla        v28.4s, v4.4s, v8.s[0]
    fmla        v29.4s, v5.4s, v8.s[0]
    fmla        v30.4s, v6.4s, v8.s[0]
    fmla        v31.4s, v7.4s, v8.s[0]

    subs        x3, x3, #1
    bne         .packed_tops_and_offsets_loop_1

    b           .non_linear_loop

.packed_packed:

.p2align 4
.packed_packed_loop_1:
    ld1         { v8.s }[0], [ x2 ], #4
    ld1         { v0.4s, v1.4s, v2.4s, v3.4s }, [ x1 ], #64
    ld1         { v4.4s, v5.4s, v6.4s, v7.4s }, [ x1 ], #64

    fmla        v16.4s, v0.4s, v8.s[0]
    fmla        v17.4s, v1.4s, v8.s[0]
    fmla        v18.4s, v2.4s, v8.s[0]
    fmla        v19.4s, v3.4s, v8.s[0]
    ld1         { v0.4s, v1.4s, v2.4s, v3.4s }, [ x1 ], #64

    fmla        v20.4s, v4.4s, v8.s[0]
    fmla        v21.4s, v5.4s, v8.s[0]
    fmla        v22.4s, v6.4s, v8.s[0]
    fmla        v23.4s, v7.4s, v8.s[0]

    ld1         { v4.4s, v5.4s, v6.4s, v7.4s }, [ x1 ], #64
    fmla        v24.4s, v0.4s, v8.s[0]
    fmla        v25.4s, v1.4s, v8.s[0]
    fmla        v26.4s, v2.4s, v8.s[0]
    fmla        v27.4s, v3.4s, v8.s[0]
    fmla        v28.4s, v4.4s, v8.s[0]
    fmla        v29.4s, v5.4s, v8.s[0]
    fmla        v30.4s, v6.4s, v8.s[0]
    fmla        v31.4s, v7.4s, v8.s[0]

    subs        x3, x3, #1
    bne         .packed_packed_loop_1

    b           .non_linear_loop

{% include "arm64simd_mmm_f32_scalars.tmpliq" from:16, to:31%}
{% include "arm64simd_mmm_f32_per_rows.tmpliq" mr:64, from:16, to:31%}
{% include "arm64simd_mmm_f32_per_cols.tmpliq" mr:64, from:16, to:31%}

.add_unicast:
    ldp         x5, x6, [x0, #8]           // c base ptr, rsc
    cmp         x6, #4
    beq         .do_per_row_add

    {% for reg in (16..31) %}
        {% for lane in (0..3) %}
            ld1 {v0.s}[{{lane}}], [ x5 ], x6
        {% endfor %}
        fadd v{{reg}}.4s, v{{reg}}.4s, v0.4s
    {% endfor %}

    b           .non_linear_loop

.do_per_row_add:
    ld1     {v0.4s-v3.4s}, [x5], #64
    ld1     {v4.4s-v7.4s}, [x5], #64
    ld1     {v8.4s-v11.4s}, [x5], #64
    ld1     {v12.4s-v15.4s}, [x5], #64

    {% for r in (0..15) %}
        fadd v{{r| plus: 16}}.4s, v{{r | plus: 16}}.4s, v{{r}}.4s
    {% endfor %}

    b           .non_linear_loop

.add_row_col_products:
    ldr     x3, [x0, #16]
    ldr     x2, [x0, #8]

    ld1         {v8.s}[0], [ x3 ]

    {% for r in (0..7) %}
        ldr     q{{r}}, [x2], #16
    {% endfor %}

    fmla        v16.4s, v0.4s, v8.s[0]
    ldr         q0, [x2], #16
    fmla        v17.4s, v1.4s, v8.s[0] 
    ldr         q1, [x2], #16
    fmla        v18.4s, v2.4s, v8.s[0] 
    ldr         q2, [x2], #16
    fmla        v19.4s, v3.4s, v8.s[0] 
    ldr         q3, [x2], #16
    fmla        v20.4s, v4.4s, v8.s[0] 
    ldr         q4, [x2], #16
    fmla        v21.4s, v5.4s, v8.s[0] 
    ldr         q5, [x2], #16
    fmla        v22.4s, v6.4s, v8.s[0] 
    ldr         q6, [x2], #16
    fmla        v23.4s, v7.4s, v8.s[0] 
    ldr         q7, [x2], #16

    fmla        v24.4s, v0.4s, v8.s[0]
    fmla        v25.4s, v1.4s, v8.s[0] 
    fmla        v26.4s, v2.4s, v8.s[0] 
    fmla        v27.4s, v3.4s, v8.s[0] 
    fmla        v28.4s, v4.4s, v8.s[0] 
    fmla        v29.4s, v5.4s, v8.s[0] 
    fmla        v30.4s, v6.4s, v8.s[0] 
    fmla        v31.4s, v7.4s, v8.s[0] 

    b           .non_linear_loop

.store:
    ldp         x5, x6, [x0, #8]                // c base ptr, rsc$

    cmp         x6, #4
    beq         .store_strides_contig

    {% for reg in (16..31) %}
        {% for lane in (0..3) %}
            st1 { v{{reg}}.s }[{{lane}}], [ x5 ], x6
        {% endfor %}
    {% endfor %}
    b           .non_linear_loop

.store_strides_contig:

    {% for reg in (16..31) %}
        st1 { v{{reg}}.4s }, [ x5 ], #16
    {% endfor %}
    b           .non_linear_loop

.q_scale:
    b   .unsupported

.return:

    ldp         d8, d9, [sp, #0]
    ldp         d10, d11, [sp, #16]
    ldp         d12, d13, [sp, #32]
    ldp         d14, d15, [sp, #48]
    add         sp, sp, 64

    ret

