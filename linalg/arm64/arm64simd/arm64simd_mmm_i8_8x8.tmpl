// vim: ft=arm

// C tile regs: v16 to v31, no need to preserve
// 
//      v16[0] v18[0] v20[0] v22[0] v24[0] v26[0] v28[0] v30[0]
//      v16[1] v18[1] 
//      v16[2] v18[2] 
//      v16[3] v18[3]
//                     
//      v17[0] v19[0] v21[0] v23[0] v25[0] v27[0] v29[0] v31[0]
//      v17[1] v19[1] 
//      v17[2] v19[2] 
//      v17[3] v19[3] 

// no preservation either for v0-v7...
// packed A buffering (2x8 values): alternating v0, v1 with v2, v3
// packed B buffering (2x8 values): alternating v4, v5 with v6, v7

.text
.align 4

.cpu generic+fp+simd
.global {{G}}arm64simd_mmm_i8_8x8_{{suffix}}
{{G}}arm64simd_mmm_i8_8x8_{{suffix}}:

/*
    prfm        pldl1keep, [x1]
    prfm        pldl1keep, [x2]
*/

    stp         x20, x21, [sp, #-16]!
    stp         x22, x23, [sp, #-16]!
    stp         x24, x25, [sp, #-16]!
    stp         x26, x27, [sp, #-16]!

{% for r in (16..31) %}
    eor         v{{r}}.8b, v{{r}}.8b, v{{r}}.8b
{% endfor %}

    ldp         x7, x8, [x0]        // a, b
    ldr         x10, [x0, #16]      // lin

    ldp         x2, x1, [x7]        // a disc, a first arg

    cmp         x2, #1
    bne         .unsupported

    ldp         x5, x3, [x10]       // lin disc, k
    cmp         x5, #0
    bne         .unsupported
    cmp         x3, #0
    beq         .non_linear

    ldp         x4, x2, [x8]        // b disc, first arg
    cmp         x4, #1
    beq         .packed_packed
    cmp         x4, #2
    beq         .packed_tops_and_offsets
    b           .unsupported

.packed_tops_and_offsets:
    ldr         x4, [x8, #16]

    ldp         x20, x21, [x4], #16 // heads of cols ptrs
    ldp         x22, x23, [x4], #16
    ldp         x24, x25, [x4], #16
    ldp         x26, x27, [x4], #16

.packed_tops_and_offsets_loop_1:
    ld1	        { v0.8b }, [ x1 ], #8
    sshll       v0.8h, v0.8b, 0

    ldr         x4, [ x2 ], #8

    add         x9, x4, x20
    ld1         {v4.b}[0], [ x9 ]
    add         x10, x4, x21
    ld1         {v4.b}[1], [ x10 ]
    add         x11, x4, x22
    ld1         {v4.b}[2], [ x11 ]
    add         x12, x4, x23
    ld1         {v4.b}[3], [ x12 ]
    add         x13, x4, x24
    ld1         {v4.b}[4], [ x13 ]
    add         x14, x4, x25
    ld1         {v4.b}[5], [ x14 ]
    add         x15, x4, x26
    ld1         {v4.b}[6], [ x15 ]
    add         x9, x4, x27
    ld1         {v4.b}[7], [ x9 ]

    sshll        v4.8h, v4.8b, 0

    smlal        v16.4s, v0.4h, v4.h[0]
    smlal2       v17.4s, v0.8h, v4.h[0]
    smlal        v18.4s, v0.4h, v4.h[1]
    smlal2       v19.4s, v0.8h, v4.h[1]
    smlal        v20.4s, v0.4h, v4.h[2]
    smlal2       v21.4s, v0.8h, v4.h[2]
    smlal        v22.4s, v0.4h, v4.h[3]
    smlal2       v23.4s, v0.8h, v4.h[3]

    smlal        v24.4s, v0.4h, v4.h[4]
    smlal2       v25.4s, v0.8h, v4.h[4]
    smlal        v26.4s, v0.4h, v4.h[5]
    smlal2       v27.4s, v0.8h, v4.h[5]
    smlal        v28.4s, v0.4h, v4.h[6]
    smlal2       v29.4s, v0.8h, v4.h[6]
    smlal        v30.4s, v0.4h, v4.h[7]
    smlal2       v31.4s, v0.8h, v4.h[7]

    subs        x3, x3, #1
    bne         .packed_tops_and_offsets_loop_1

    b           .non_linear

.packed_packed:
/* TODO packed_packed_loop_4 (?)
    cmp         x3, #4
    blt         .packed_packed_loop_1

.packed_packed_loop_4:

    sub x3, x3, #4
    cmp x3, #4
    bge .packed_packed_loop_4

    cmp x3, #0
    beq .non_linear
*/

.packed_packed_loop_1:

    ld1	        { v0.8b }, [ x1 ], #8
    sshll       v0.8h, v0.8b, 0
    ld1         { v4.8b }, [ x2 ], #8
    sshll        v4.8h, v4.8b, 0

    smlal        v16.4s, v0.4h, v4.h[0]
    smlal2       v17.4s, v0.8h, v4.h[0]
    smlal        v18.4s, v0.4h, v4.h[1]
    smlal2       v19.4s, v0.8h, v4.h[1]
    smlal        v20.4s, v0.4h, v4.h[2]
    smlal2       v21.4s, v0.8h, v4.h[2]
    smlal        v22.4s, v0.4h, v4.h[3]
    smlal2       v23.4s, v0.8h, v4.h[3]

    smlal        v24.4s, v0.4h, v4.h[4]
    smlal2       v25.4s, v0.8h, v4.h[4]
    smlal        v26.4s, v0.4h, v4.h[5]
    smlal2       v27.4s, v0.8h, v4.h[5]
    smlal        v28.4s, v0.4h, v4.h[6]
    smlal2       v29.4s, v0.8h, v4.h[6]
    smlal        v30.4s, v0.4h, v4.h[7]
    smlal2       v31.4s, v0.8h, v4.h[7]

    subs        x3, x3, #1
    bne .packed_packed_loop_1

    b .non_linear

{% include "dispatcher.tmpliq" %}

.min:
    add         x2, x1, #8
    ld1r        {v0.4s}, [ x2 ]
    {% for reg in (16..31) %}
        smin        v{{reg}}.4s, v{{reg}}.4s, v0.4s
    {% endfor %}

    b           .non_linear_loop

.max:
    add         x2, x1, #8
    ld1r        {v0.4s}, [ x2 ]
    {% for reg in (16..31) %}
        smax        v{{reg}}.4s, v{{reg}}.4s, v0.4s
    {% endfor %}

    b           .non_linear_loop

.add_unicast:
    ldp         x5, x6, [x1, #8]
    ldp         x7, x8, [x1, #24]

    cmp         x8, #4
    beq         non_linear_addc_i32

    {% for col in (8..15) %}
        mov x4, x5
        {% for reg in (0..1) %}
            {% for lane in (0..3) %}
                ld1 {v0.b}[{{lane}}], [ x4 ], x6
            {% endfor %}
            sshll v0.8h, v0.8b, 0
            sshll v0.4s, v0.4h, 0
            add v{{col | times:2 | plus: reg}}.4s, v{{col | times:2 | plus: reg}}.4s, v0.4s
        {% endfor %}
        add x5, x5, x7
    {% endfor %}

    b           .non_linear_loop

non_linear_addc_i32:
    {% for col in (8..15) %}
        mov x4, x5
        {% for reg in (0..1) %}
            {% for lane in (0..3) %}
                ld1 {v0.s}[{{lane}}], [ x4 ], x6
            {% endfor %}
            add v{{col | times:2 | plus: reg}}.4s, v{{col | times:2 | plus: reg}}.4s, v0.4s
        {% endfor %}
        add x5, x5, x7
    {% endfor %}

    b           .non_linear_loop

.per_col_mul:
    ldr         x2, [x1, #8]
    ld1         { v0.4s, v1.4s }, [ x2 ]

    {% for col in (0..7) %}
        {% for reg in (0..1) %}
            mul v{{col | times:2 | plus: reg|plus:16}}.4s, v{{col | times:2 | plus: reg|plus:16}}.4s, v{{col|divided_by:4}}.s[{{col|modulo:4}}]
        {% endfor %}
    {% endfor %}

    b           .non_linear_loop

.per_col_add:
    ldr         x2, [x1, #8]
    ld1         { v0.4s, v1.4s }, [ x2 ]

    {% for col in (0..7) %}
	dup v2.4s, v{{col|divided_by:4}}.s[{{col|modulo:4}}]
        {% for reg in (0..1) %}
            add v{{col | times:2 | plus: reg|plus:16}}.4s, v{{col | times:2 | plus: reg|plus:16}}.4s, v2.4s
	{% endfor %}
    {% endfor %}

    b           .non_linear_loop

.per_row_mul:
    ldr         x2, [x1, #8]
    ld1         { v0.4s, v1.4s }, [ x2 ]

    {% for col in (8..15) %}
        {% for reg in (0..1) %}
            mul v{{col | times:2 | plus: reg}}.4s, v{{col | times:2 | plus: reg}}.4s, v{{reg}}.4s
        {% endfor %}
    {% endfor %}

    b           .non_linear_loop

.per_row_add:
    ldr         x2, [x1, #8]
    ld1         { v0.4s, v1.4s }, [ x2 ]

    {% for col in (8..15) %}
        {% for reg in (0..1) %}
            add v{{col | times:2 | plus: reg}}.4s, v{{col | times:2 | plus: reg}}.4s, v{{reg}}.4s
        {% endfor %}
    {% endfor %}

    b           .non_linear_loop

.add_row_col_product:
    ldr     x2, [x1, #8]
    ldr     x3, [x1, #16]

    ld1         { v0.4s, v1.4s }, [ x2 ]
    ld1         { v4.4s, v5.4s }, [ x3 ]

    xtn         v0.4h, v0.4s
    xtn         v1.4h, v1.4s
    xtn         v4.4h, v4.4s
    xtn         v5.4h, v5.4s

    smlal        v16.4s, v0.4h, v4.h[0]
    smlal        v17.4s, v1.4h, v4.h[0]
    smlal        v18.4s, v0.4h, v4.h[1]
    smlal        v19.4s, v1.4h, v4.h[1]
    smlal        v20.4s, v0.4h, v4.h[2]
    smlal        v21.4s, v1.4h, v4.h[2]
    smlal        v22.4s, v0.4h, v4.h[3]
    smlal        v23.4s, v1.4h, v4.h[3]

    smlal        v24.4s, v0.4h, v5.h[0]
    smlal        v25.4s, v1.4h, v5.h[0]
    smlal        v26.4s, v0.4h, v5.h[1]
    smlal        v27.4s, v1.4h, v5.h[1]
    smlal        v28.4s, v0.4h, v5.h[2]
    smlal        v29.4s, v1.4h, v5.h[2]
    smlal        v30.4s, v0.4h, v5.h[3]
    smlal        v31.4s, v1.4h, v5.h[3]

    b           .non_linear_loop

.scalar_mul:
    add         x2, x1, #8
    ld1r         {v0.4s}, [ x2 ]
    {% for reg in (16..31) %}
        mul       v{{reg}}.4s, v{{reg}}.4s, v0.s[0]
    {% endfor %}

    b           .non_linear_loop

.scalar_add:
    add         x2, x1, #8
    ld1r         {v0.4s}, [ x2 ]
    {% for reg in (16..31) %}
        add        v{{reg}}.4s, v{{reg}}.4s, v0.4s
    {% endfor %}

    b           .non_linear_loop

    {% include "arm64simd_mmm_i8_scale_q16_q31.tmpliq" %}

.store:
    ldp         x5, x6, [x1, #8]            // c base ptr, rsc
    ldp         x7, x8, [x1, #24]           // csc, item_size

    cmp         x8, #4
    beq         .store_strides_i32

    {% for col in (8..15) %}
        mov x4, x5
        {% for reg in (0..1) %}
            {% for lane in (0..3) %}
                st1 { v{{col | times:2 | plus: reg}}.b }[{{lane|times:4}}], [ x4 ], x6
            {% endfor %}
        {% endfor %}
        add x5, x5, x7
    {% endfor %}

    b           .non_linear_loop

.store_strides_i32:
    {% for col in (8..15) %}
        mov x4, x5
        {% for reg in (0..1) %}
            {% for lane in (0..3) %}
                st1 { v{{col | times:2 | plus: reg}}.s }[{{lane}}], [ x4 ], x6
            {% endfor %}
        {% endfor %}
        add x5, x5, x7
    {% endfor %}

    b           .non_linear_loop


.return:
    ldp         x26, x27, [sp], #16
    ldp         x24, x25, [sp], #16
    ldp         x22, x23, [sp], #16
    ldp         x20, x21, [sp], #16

    ret

