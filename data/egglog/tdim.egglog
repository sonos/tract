(datatype TDim
	(Num i64)
	(Add TDim TDim)
	(Mul TDim TDim)
	(Div TDim i64)
	(Neg TDim)
	(Var String)
)

(let zero (Num 0))
(let one (Num 1))
(let mone (Num -1))
(let two (Num 2))

;; (birewrite (Neg a) (Mul a mone))

(rewrite (Add a zero) a)
(rewrite (Add a b) (Add b a))
(rewrite (Add (Add a b) c) (Add a (Add b c)))
(rewrite (Add (Num a) (Num b)) (Num (+ a b)))

(rewrite (Mul a zero) zero)
(rewrite (Mul a one) a)
(rewrite (Mul a b) (Mul b a))
(rewrite (Mul (Mul a b) c) (Mul a (Mul b c)))
(rewrite (Mul (Num a) (Num b)) (Num (* a b)))

(birewrite (Add (Mul a b) (Mul a c)) (Mul a (Add b c)))

(rewrite (Div (Num q) q) one :when ((!= q 0)))
(rewrite (Div (Mul (Num q) b) q) b :when ((!= q 0)))
(rewrite (Div (Num a) q) (Num (/ a q)))
(rewrite (Div (Neg a) q) (Neg (Div a q)))

(rewrite (Neg (Div a q)) (Div (Neg a) q))

;; complicated and a bit adhoc simplification rewrite

(rewrite
	(Div (Mul (Num a) b) q)
	(Mul b (Num (/ a q)))
	:when ((!= q 0) (= (% a q) 0))
)
(rewrite
	(Add (Div (Add a (Num b)) q) (Div (Add (Neg a) (Num c)) q))
	(Num (/ (+ b c) q))
	:when ((= (% (+ b c) q) 0))
)

;; range support

(function hi (TDim) i64 :merge (min old new))
(function lo (TDim) i64 :merge (max old new))
(relation non-zero (TDim))

(rule ((= e (Num x))) ((set (lo e) x) (set (hi e) x)))

(rule ((= e (Add a b))
       (= la (lo a))
       (= lb (lo b)))
      ((set (lo e) (+ la lb))))

(rule ((= e (Add a b))
       (= ha (hi a))
       (= hb (hi b)))
      ((set (hi e) (+ ha hb))))

(rule ((= e (Add a b))
       (= la (lo a))
       (= he (hi e)))
      ((set (hi b) (- he la))))

(rule ((= e (Mul a b))
       (= la (lo a))
       (= ha (hi a))
       (= lb (lo b))
       (= hb (hi b)))
      ((set (lo e) 
          (min (min (* la lb) (* la hb))
               (min (* ha lb) (* ha hb))))
       (set (hi e) 
          (max (max (* la lb) (* la hb))
               (max (* ha lb) (* ha hb))))))

(rule ((= e (Div a b))
       (= la (lo a))
       (= ha (hi a)))
      ((set (lo e) 
          (min (min (/ la b) (/ la b))
               (min (/ ha b) (/ ha b))))
       (set (hi e) 
          (max (max (/ la b) (/ la b))
               (max (/ ha b) (/ ha b))))))

(rule ((= e (Neg a))
       (= la (lo a))
       (= ha (hi a)))
      ((set (lo e) (- 0 ha))
       (set (hi e) (- 0 la))))

