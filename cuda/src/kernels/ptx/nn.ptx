//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-35583870
// Cuda compilation tools, release 12.8, V12.8.93
// Based on NVVM 7.0.1
//

.version 8.7
.target sm_87
.address_size 64

	// .globl	gelu_approx_f32
// _ZZ12rms_norm_f32E5s_sum has been demoted
// _ZZ12rms_norm_f16E5s_sum has been demoted
// _ZZ11softmax_f32E5s_max has been demoted
// _ZZ11softmax_f32E5s_sum has been demoted
// _ZZ11softmax_f16E5s_max has been demoted
// _ZZ11softmax_f16E5s_sum has been demoted
// _ZZ14reduce_max_f32E5s_max has been demoted
// _ZZ14reduce_min_f32E5s_min has been demoted
// _ZZ14reduce_sum_f32E5s_sum has been demoted
// _ZZ15reduce_prod_f32E6s_prod has been demoted
// _ZZ26reduce_mean_of_squares_f32E6s_prod has been demoted
// _ZZ14reduce_max_f16E5s_max has been demoted
// _ZZ14reduce_min_f16E5s_min has been demoted
// _ZZ14reduce_sum_f16E5s_sum has been demoted
// _ZZ15reduce_prod_f16E6s_prod has been demoted
// _ZZ26reduce_mean_of_squares_f16E6s_prod has been demoted
.extern .shared .align 16 .b8 data_soft_max_f32[];

.visible .entry gelu_approx_f32(
	.param .u64 gelu_approx_f32_param_0,
	.param .u64 gelu_approx_f32_param_1,
	.param .u32 gelu_approx_f32_param_2
)
{
	.reg .pred 	%p<16>;
	.reg .f32 	%f<110>;
	.reg .b32 	%r<22>;
	.reg .f64 	%fd<6>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd2, [gelu_approx_f32_param_0];
	ld.param.u64 	%rd3, [gelu_approx_f32_param_1];
	ld.param.u32 	%r2, [gelu_approx_f32_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB0_9;

	cvta.to.global.u64 	%rd4, %rd2;
	cvt.s64.s32 	%rd1, %r1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f32 	%f1, [%rd6];
	mov.f32 	%f10, 0f3FC00000;
	cvt.rzi.f32.f32 	%f11, %f10;
	add.f32 	%f12, %f11, %f11;
	mov.f32 	%f13, 0f40400000;
	sub.f32 	%f14, %f13, %f12;
	abs.f32 	%f2, %f14;
	abs.f32 	%f3, %f1;
	setp.lt.f32 	%p2, %f3, 0f00800000;
	mul.f32 	%f15, %f3, 0f4B800000;
	selp.f32 	%f16, %f15, %f3, %p2;
	selp.f32 	%f17, 0fC1C00000, 0f00000000, %p2;
	mov.b32 	%r6, %f16;
	add.s32 	%r7, %r6, -1060439283;
	and.b32  	%r8, %r7, -8388608;
	sub.s32 	%r9, %r6, %r8;
	mov.b32 	%f18, %r9;
	cvt.rn.f32.s32 	%f19, %r8;
	mov.f32 	%f20, 0f34000000;
	fma.rn.f32 	%f21, %f19, %f20, %f17;
	add.f32 	%f22, %f18, 0fBF800000;
	add.f32 	%f23, %f18, 0f3F800000;
	mov.f32 	%f9, 0f3F800000;
	rcp.approx.ftz.f32 	%f24, %f23;
	add.f32 	%f25, %f22, %f22;
	mul.f32 	%f26, %f25, %f24;
	mul.f32 	%f27, %f26, %f26;
	sub.f32 	%f28, %f22, %f26;
	add.f32 	%f29, %f28, %f28;
	neg.f32 	%f30, %f26;
	fma.rn.f32 	%f31, %f30, %f22, %f29;
	mul.rn.f32 	%f32, %f24, %f31;
	mov.f32 	%f33, 0f3B52E7DB;
	mov.f32 	%f34, 0f3A2C32E4;
	fma.rn.f32 	%f35, %f34, %f27, %f33;
	mov.f32 	%f36, 0f3C93BB73;
	fma.rn.f32 	%f37, %f35, %f27, %f36;
	mov.f32 	%f38, 0f3DF6384F;
	fma.rn.f32 	%f39, %f37, %f27, %f38;
	mul.rn.f32 	%f40, %f39, %f27;
	mov.f32 	%f41, 0f3FB8AA3B;
	fma.rn.f32 	%f42, %f26, %f41, %f21;
	sub.f32 	%f43, %f21, %f42;
	fma.rn.f32 	%f44, %f26, %f41, %f43;
	fma.rn.f32 	%f45, %f32, %f41, %f44;
	mov.f32 	%f46, 0f32A55E34;
	fma.rn.f32 	%f47, %f26, %f46, %f45;
	mul.f32 	%f48, %f40, 0f40400000;
	fma.rn.f32 	%f49, %f48, %f32, %f47;
	fma.rn.f32 	%f50, %f40, %f26, %f49;
	add.rn.f32 	%f51, %f42, %f50;
	neg.f32 	%f52, %f42;
	add.rn.f32 	%f53, %f51, %f52;
	neg.f32 	%f54, %f53;
	add.rn.f32 	%f55, %f50, %f54;
	mul.rn.f32 	%f56, %f51, %f13;
	neg.f32 	%f57, %f56;
	fma.rn.f32 	%f58, %f51, %f13, %f57;
	fma.rn.f32 	%f59, %f55, %f13, %f58;
	cvt.rni.f32.f32 	%f60, %f56;
	sub.f32 	%f61, %f56, %f60;
	add.f32 	%f62, %f59, %f61;
	mov.f32 	%f63, 0f3AAF85ED;
	mov.f32 	%f64, 0f391FCB8E;
	fma.rn.f32 	%f65, %f64, %f62, %f63;
	mov.f32 	%f66, 0f3C1D9856;
	fma.rn.f32 	%f67, %f65, %f62, %f66;
	mov.f32 	%f68, 0f3D6357BB;
	fma.rn.f32 	%f69, %f67, %f62, %f68;
	mov.f32 	%f70, 0f3E75FDEC;
	fma.rn.f32 	%f71, %f69, %f62, %f70;
	mov.f32 	%f72, 0f3F317218;
	fma.rn.f32 	%f73, %f71, %f62, %f72;
	fma.rn.f32 	%f74, %f73, %f62, %f9;
	cvt.rzi.s32.f32 	%r10, %f60;
	setp.gt.f32 	%p3, %f60, 0f00000000;
	selp.b32 	%r11, 0, -2097152000, %p3;
	add.s32 	%r12, %r11, 2130706432;
	mov.b32 	%f75, %r12;
	mul.f32 	%f76, %f74, %f75;
	shl.b32 	%r13, %r10, 23;
	sub.s32 	%r14, %r13, %r11;
	mov.b32 	%f77, %r14;
	mul.f32 	%f78, %f76, %f77;
	abs.f32 	%f79, %f56;
	setp.gt.f32 	%p4, %f79, 0f43180000;
	setp.lt.f32 	%p5, %f56, 0f00000000;
	selp.f32 	%f80, 0f00000000, 0f7F800000, %p5;
	selp.f32 	%f4, %f80, %f78, %p4;
	setp.eq.f32 	%p6, %f1, 0f3F800000;
	mov.f32 	%f109, %f9;
	@%p6 bra 	$L__BB0_8;

	setp.gtu.f32 	%p7, %f3, 0f7F800000;
	@%p7 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_3;

$L__BB0_7:
	mov.f32 	%f83, 0f40400000;
	add.rn.f32 	%f109, %f1, %f83;
	bra.uni 	$L__BB0_8;

$L__BB0_3:
	setp.eq.f32 	%p8, %f1, 0f00000000;
	setp.eq.f32 	%p9, %f3, 0f7F800000;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	$L__BB0_6;
	bra.uni 	$L__BB0_4;

$L__BB0_6:
	setp.eq.f32 	%p13, %f2, 0f3F800000;
	add.f32 	%f82, %f1, %f1;
	mov.b32 	%r15, %f82;
	and.b32  	%r16, %r15, 2147483647;
	selp.b32 	%r17, %r15, %r16, %p13;
	mov.b32 	%f109, %r17;
	bra.uni 	$L__BB0_8;

$L__BB0_4:
	setp.geu.f32 	%p11, %f1, 0f00000000;
	mov.f32 	%f109, %f4;
	@%p11 bra 	$L__BB0_8;

	setp.eq.f32 	%p12, %f2, 0f3F800000;
	neg.f32 	%f81, %f4;
	selp.f32 	%f109, %f81, %f4, %p12;

$L__BB0_8:
	fma.rn.f32 	%f84, %f109, 0f3D372713, %f1;
	mul.f32 	%f85, %f84, 0f3F4C422A;
	abs.f32 	%f86, %f85;
	mul.f32 	%f87, %f86, 0f4038AA3B;
	ex2.approx.ftz.f32 	%f88, %f87;
	add.f32 	%f89, %f88, 0f3F800000;
	rcp.approx.ftz.f32 	%f91, %f89;
	mov.f32 	%f92, 0fC0000000;
	fma.rn.f32 	%f93, %f91, %f92, %f9;
	setp.ge.f32 	%p14, %f86, 0f41102CB4;
	selp.f32 	%f94, 0f3F800000, %f93, %p14;
	mov.b32 	%r18, %f94;
	mov.b32 	%r19, %f85;
	and.b32  	%r20, %r19, -2147483648;
	or.b32  	%r21, %r20, %r18;
	mov.b32 	%f95, %r21;
	mul.f32 	%f96, %f85, %f85;
	mov.f32 	%f97, 0fBD563CAE;
	mov.f32 	%f98, 0f3C80F082;
	fma.rn.f32 	%f99, %f98, %f96, %f97;
	mov.f32 	%f100, 0f3E085941;
	fma.rn.f32 	%f101, %f99, %f96, %f100;
	mov.f32 	%f102, 0fBEAAA9ED;
	fma.rn.f32 	%f103, %f101, %f96, %f102;
	mov.f32 	%f104, 0f00000000;
	fma.rn.f32 	%f105, %f103, %f96, %f104;
	fma.rn.f32 	%f106, %f105, %f85, %f85;
	setp.ge.f32 	%p15, %f86, 0f3F19999A;
	selp.f32 	%f107, %f95, %f106, %p15;
	cvt.f64.f32 	%fd1, %f107;
	add.f64 	%fd2, %fd1, 0d3FF0000000000000;
	cvt.f64.f32 	%fd3, %f1;
	mul.f64 	%fd4, %fd3, 0d3FE0000000000000;
	mul.f64 	%fd5, %fd4, %fd2;
	cvt.rn.f32.f64 	%f108, %fd5;
	cvta.to.global.u64 	%rd7, %rd3;
	shl.b64 	%rd8, %rd1, 2;
	add.s64 	%rd9, %rd7, %rd8;
	st.global.f32 	[%rd9], %f108;

$L__BB0_9:
	ret;

}
	// .globl	gelu_approx_f16
.visible .entry gelu_approx_f16(
	.param .u64 gelu_approx_f16_param_0,
	.param .u64 gelu_approx_f16_param_1,
	.param .u32 gelu_approx_f16_param_2
)
{
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<3>;
	.reg .f32 	%f<111>;
	.reg .b32 	%r<22>;
	.reg .f64 	%fd<6>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd2, [gelu_approx_f16_param_0];
	ld.param.u64 	%rd3, [gelu_approx_f16_param_1];
	ld.param.u32 	%r2, [gelu_approx_f16_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB1_9;

	cvta.to.global.u64 	%rd4, %rd2;
	cvt.s64.s32 	%rd1, %r1;
	mul.wide.s32 	%rd5, %r1, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.u16 	%rs1, [%rd6];
	// begin inline asm
	{  cvt.f32.f16 %f9, %rs1;}

	// end inline asm
	mov.f32 	%f11, 0f3FC00000;
	cvt.rzi.f32.f32 	%f12, %f11;
	add.f32 	%f13, %f12, %f12;
	mov.f32 	%f14, 0f40400000;
	sub.f32 	%f15, %f14, %f13;
	abs.f32 	%f2, %f15;
	abs.f32 	%f3, %f9;
	setp.lt.f32 	%p2, %f3, 0f00800000;
	mul.f32 	%f16, %f3, 0f4B800000;
	selp.f32 	%f17, %f16, %f3, %p2;
	selp.f32 	%f18, 0fC1C00000, 0f00000000, %p2;
	mov.b32 	%r6, %f17;
	add.s32 	%r7, %r6, -1060439283;
	and.b32  	%r8, %r7, -8388608;
	sub.s32 	%r9, %r6, %r8;
	mov.b32 	%f19, %r9;
	cvt.rn.f32.s32 	%f20, %r8;
	mov.f32 	%f21, 0f34000000;
	fma.rn.f32 	%f22, %f20, %f21, %f18;
	add.f32 	%f23, %f19, 0fBF800000;
	add.f32 	%f24, %f19, 0f3F800000;
	mov.f32 	%f10, 0f3F800000;
	rcp.approx.ftz.f32 	%f25, %f24;
	add.f32 	%f26, %f23, %f23;
	mul.f32 	%f27, %f26, %f25;
	mul.f32 	%f28, %f27, %f27;
	sub.f32 	%f29, %f23, %f27;
	add.f32 	%f30, %f29, %f29;
	neg.f32 	%f31, %f27;
	fma.rn.f32 	%f32, %f31, %f23, %f30;
	mul.rn.f32 	%f33, %f25, %f32;
	mov.f32 	%f34, 0f3B52E7DB;
	mov.f32 	%f35, 0f3A2C32E4;
	fma.rn.f32 	%f36, %f35, %f28, %f34;
	mov.f32 	%f37, 0f3C93BB73;
	fma.rn.f32 	%f38, %f36, %f28, %f37;
	mov.f32 	%f39, 0f3DF6384F;
	fma.rn.f32 	%f40, %f38, %f28, %f39;
	mul.rn.f32 	%f41, %f40, %f28;
	mov.f32 	%f42, 0f3FB8AA3B;
	fma.rn.f32 	%f43, %f27, %f42, %f22;
	sub.f32 	%f44, %f22, %f43;
	fma.rn.f32 	%f45, %f27, %f42, %f44;
	fma.rn.f32 	%f46, %f33, %f42, %f45;
	mov.f32 	%f47, 0f32A55E34;
	fma.rn.f32 	%f48, %f27, %f47, %f46;
	mul.f32 	%f49, %f41, 0f40400000;
	fma.rn.f32 	%f50, %f49, %f33, %f48;
	fma.rn.f32 	%f51, %f41, %f27, %f50;
	add.rn.f32 	%f52, %f43, %f51;
	neg.f32 	%f53, %f43;
	add.rn.f32 	%f54, %f52, %f53;
	neg.f32 	%f55, %f54;
	add.rn.f32 	%f56, %f51, %f55;
	mul.rn.f32 	%f57, %f52, %f14;
	neg.f32 	%f58, %f57;
	fma.rn.f32 	%f59, %f52, %f14, %f58;
	fma.rn.f32 	%f60, %f56, %f14, %f59;
	cvt.rni.f32.f32 	%f61, %f57;
	sub.f32 	%f62, %f57, %f61;
	add.f32 	%f63, %f60, %f62;
	mov.f32 	%f64, 0f3AAF85ED;
	mov.f32 	%f65, 0f391FCB8E;
	fma.rn.f32 	%f66, %f65, %f63, %f64;
	mov.f32 	%f67, 0f3C1D9856;
	fma.rn.f32 	%f68, %f66, %f63, %f67;
	mov.f32 	%f69, 0f3D6357BB;
	fma.rn.f32 	%f70, %f68, %f63, %f69;
	mov.f32 	%f71, 0f3E75FDEC;
	fma.rn.f32 	%f72, %f70, %f63, %f71;
	mov.f32 	%f73, 0f3F317218;
	fma.rn.f32 	%f74, %f72, %f63, %f73;
	fma.rn.f32 	%f75, %f74, %f63, %f10;
	cvt.rzi.s32.f32 	%r10, %f61;
	setp.gt.f32 	%p3, %f61, 0f00000000;
	selp.b32 	%r11, 0, -2097152000, %p3;
	add.s32 	%r12, %r11, 2130706432;
	mov.b32 	%f76, %r12;
	mul.f32 	%f77, %f75, %f76;
	shl.b32 	%r13, %r10, 23;
	sub.s32 	%r14, %r13, %r11;
	mov.b32 	%f78, %r14;
	mul.f32 	%f79, %f77, %f78;
	abs.f32 	%f80, %f57;
	setp.gt.f32 	%p4, %f80, 0f43180000;
	setp.lt.f32 	%p5, %f57, 0f00000000;
	selp.f32 	%f81, 0f00000000, 0f7F800000, %p5;
	selp.f32 	%f4, %f81, %f79, %p4;
	setp.eq.f32 	%p6, %f9, 0f3F800000;
	mov.f32 	%f110, %f10;
	@%p6 bra 	$L__BB1_8;

	setp.gtu.f32 	%p7, %f3, 0f7F800000;
	@%p7 bra 	$L__BB1_7;
	bra.uni 	$L__BB1_3;

$L__BB1_7:
	mov.f32 	%f84, 0f40400000;
	add.rn.f32 	%f110, %f9, %f84;
	bra.uni 	$L__BB1_8;

$L__BB1_3:
	setp.eq.f32 	%p8, %f9, 0f00000000;
	setp.eq.f32 	%p9, %f3, 0f7F800000;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	$L__BB1_6;
	bra.uni 	$L__BB1_4;

$L__BB1_6:
	setp.eq.f32 	%p13, %f2, 0f3F800000;
	add.f32 	%f83, %f9, %f9;
	mov.b32 	%r15, %f83;
	and.b32  	%r16, %r15, 2147483647;
	selp.b32 	%r17, %r15, %r16, %p13;
	mov.b32 	%f110, %r17;
	bra.uni 	$L__BB1_8;

$L__BB1_4:
	setp.geu.f32 	%p11, %f9, 0f00000000;
	mov.f32 	%f110, %f4;
	@%p11 bra 	$L__BB1_8;

	setp.eq.f32 	%p12, %f2, 0f3F800000;
	neg.f32 	%f82, %f4;
	selp.f32 	%f110, %f82, %f4, %p12;

$L__BB1_8:
	fma.rn.f32 	%f86, %f110, 0f3D372713, %f9;
	mul.f32 	%f87, %f86, 0f3F4C422A;
	abs.f32 	%f88, %f87;
	mul.f32 	%f89, %f88, 0f4038AA3B;
	ex2.approx.ftz.f32 	%f90, %f89;
	add.f32 	%f91, %f90, 0f3F800000;
	rcp.approx.ftz.f32 	%f93, %f91;
	mov.f32 	%f94, 0fC0000000;
	fma.rn.f32 	%f95, %f93, %f94, %f10;
	setp.ge.f32 	%p14, %f88, 0f41102CB4;
	selp.f32 	%f96, 0f3F800000, %f95, %p14;
	mov.b32 	%r18, %f96;
	mov.b32 	%r19, %f87;
	and.b32  	%r20, %r19, -2147483648;
	or.b32  	%r21, %r20, %r18;
	mov.b32 	%f97, %r21;
	mul.f32 	%f98, %f87, %f87;
	mov.f32 	%f99, 0fBD563CAE;
	mov.f32 	%f100, 0f3C80F082;
	fma.rn.f32 	%f101, %f100, %f98, %f99;
	mov.f32 	%f102, 0f3E085941;
	fma.rn.f32 	%f103, %f101, %f98, %f102;
	mov.f32 	%f104, 0fBEAAA9ED;
	fma.rn.f32 	%f105, %f103, %f98, %f104;
	mov.f32 	%f106, 0f00000000;
	fma.rn.f32 	%f107, %f105, %f98, %f106;
	fma.rn.f32 	%f108, %f107, %f87, %f87;
	setp.ge.f32 	%p15, %f88, 0f3F19999A;
	selp.f32 	%f109, %f97, %f108, %p15;
	cvt.f64.f32 	%fd1, %f109;
	add.f64 	%fd2, %fd1, 0d3FF0000000000000;
	cvt.f64.f32 	%fd3, %f9;
	mul.f64 	%fd4, %fd3, 0d3FE0000000000000;
	mul.f64 	%fd5, %fd4, %fd2;
	cvt.rn.f32.f64 	%f85, %fd5;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs2, %f85;}

	// end inline asm
	cvta.to.global.u64 	%rd7, %rd3;
	shl.b64 	%rd8, %rd1, 1;
	add.s64 	%rd9, %rd7, %rd8;
	st.global.u16 	[%rd9], %rs2;

$L__BB1_9:
	ret;

}
	// .globl	gelu_approx_fast_f32
.visible .entry gelu_approx_fast_f32(
	.param .u64 gelu_approx_fast_f32_param_0,
	.param .u64 gelu_approx_fast_f32_param_1,
	.param .u32 gelu_approx_fast_f32_param_2
)
{
	.reg .pred 	%p<16>;
	.reg .f32 	%f<109>;
	.reg .b32 	%r<22>;
	.reg .f64 	%fd<6>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd2, [gelu_approx_fast_f32_param_0];
	ld.param.u64 	%rd3, [gelu_approx_fast_f32_param_1];
	ld.param.u32 	%r2, [gelu_approx_fast_f32_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB2_9;

	cvta.to.global.u64 	%rd4, %rd2;
	cvt.s64.s32 	%rd1, %r1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f32 	%f1, [%rd6];
	mov.f32 	%f9, 0f3F800000;
	cvt.rzi.f32.f32 	%f10, %f9;
	add.f32 	%f11, %f10, %f10;
	mov.f32 	%f12, 0f40000000;
	sub.f32 	%f13, %f12, %f11;
	abs.f32 	%f2, %f13;
	abs.f32 	%f3, %f1;
	setp.lt.f32 	%p2, %f3, 0f00800000;
	mul.f32 	%f14, %f3, 0f4B800000;
	selp.f32 	%f15, %f14, %f3, %p2;
	selp.f32 	%f16, 0fC1C00000, 0f00000000, %p2;
	mov.b32 	%r6, %f15;
	add.s32 	%r7, %r6, -1060439283;
	and.b32  	%r8, %r7, -8388608;
	sub.s32 	%r9, %r6, %r8;
	mov.b32 	%f17, %r9;
	cvt.rn.f32.s32 	%f18, %r8;
	mov.f32 	%f19, 0f34000000;
	fma.rn.f32 	%f20, %f18, %f19, %f16;
	add.f32 	%f21, %f17, 0fBF800000;
	add.f32 	%f22, %f17, 0f3F800000;
	rcp.approx.ftz.f32 	%f23, %f22;
	add.f32 	%f24, %f21, %f21;
	mul.f32 	%f25, %f24, %f23;
	mul.f32 	%f26, %f25, %f25;
	sub.f32 	%f27, %f21, %f25;
	add.f32 	%f28, %f27, %f27;
	neg.f32 	%f29, %f25;
	fma.rn.f32 	%f30, %f29, %f21, %f28;
	mul.rn.f32 	%f31, %f23, %f30;
	mov.f32 	%f32, 0f3B52E7DB;
	mov.f32 	%f33, 0f3A2C32E4;
	fma.rn.f32 	%f34, %f33, %f26, %f32;
	mov.f32 	%f35, 0f3C93BB73;
	fma.rn.f32 	%f36, %f34, %f26, %f35;
	mov.f32 	%f37, 0f3DF6384F;
	fma.rn.f32 	%f38, %f36, %f26, %f37;
	mul.rn.f32 	%f39, %f38, %f26;
	mov.f32 	%f40, 0f3FB8AA3B;
	fma.rn.f32 	%f41, %f25, %f40, %f20;
	sub.f32 	%f42, %f20, %f41;
	fma.rn.f32 	%f43, %f25, %f40, %f42;
	fma.rn.f32 	%f44, %f31, %f40, %f43;
	mov.f32 	%f45, 0f32A55E34;
	fma.rn.f32 	%f46, %f25, %f45, %f44;
	mul.f32 	%f47, %f39, 0f40400000;
	fma.rn.f32 	%f48, %f47, %f31, %f46;
	fma.rn.f32 	%f49, %f39, %f25, %f48;
	add.rn.f32 	%f50, %f41, %f49;
	neg.f32 	%f51, %f41;
	add.rn.f32 	%f52, %f50, %f51;
	neg.f32 	%f53, %f52;
	add.rn.f32 	%f54, %f49, %f53;
	mul.rn.f32 	%f55, %f50, %f12;
	neg.f32 	%f56, %f55;
	fma.rn.f32 	%f57, %f50, %f12, %f56;
	fma.rn.f32 	%f58, %f54, %f12, %f57;
	cvt.rni.f32.f32 	%f59, %f55;
	sub.f32 	%f60, %f55, %f59;
	add.f32 	%f61, %f58, %f60;
	mov.f32 	%f62, 0f3AAF85ED;
	mov.f32 	%f63, 0f391FCB8E;
	fma.rn.f32 	%f64, %f63, %f61, %f62;
	mov.f32 	%f65, 0f3C1D9856;
	fma.rn.f32 	%f66, %f64, %f61, %f65;
	mov.f32 	%f67, 0f3D6357BB;
	fma.rn.f32 	%f68, %f66, %f61, %f67;
	mov.f32 	%f69, 0f3E75FDEC;
	fma.rn.f32 	%f70, %f68, %f61, %f69;
	mov.f32 	%f71, 0f3F317218;
	fma.rn.f32 	%f72, %f70, %f61, %f71;
	fma.rn.f32 	%f73, %f72, %f61, %f9;
	cvt.rzi.s32.f32 	%r10, %f59;
	setp.gt.f32 	%p3, %f59, 0f00000000;
	selp.b32 	%r11, 0, -2097152000, %p3;
	add.s32 	%r12, %r11, 2130706432;
	mov.b32 	%f74, %r12;
	mul.f32 	%f75, %f73, %f74;
	shl.b32 	%r13, %r10, 23;
	sub.s32 	%r14, %r13, %r11;
	mov.b32 	%f76, %r14;
	mul.f32 	%f77, %f75, %f76;
	abs.f32 	%f78, %f55;
	setp.gt.f32 	%p4, %f78, 0f43180000;
	setp.lt.f32 	%p5, %f55, 0f00000000;
	selp.f32 	%f79, 0f00000000, 0f7F800000, %p5;
	selp.f32 	%f4, %f79, %f77, %p4;
	setp.eq.f32 	%p6, %f1, 0f3F800000;
	mov.f32 	%f108, %f9;
	@%p6 bra 	$L__BB2_8;

	setp.gtu.f32 	%p7, %f3, 0f7F800000;
	@%p7 bra 	$L__BB2_7;
	bra.uni 	$L__BB2_3;

$L__BB2_7:
	mov.f32 	%f82, 0f40000000;
	add.rn.f32 	%f108, %f1, %f82;
	bra.uni 	$L__BB2_8;

$L__BB2_3:
	setp.eq.f32 	%p8, %f1, 0f00000000;
	setp.eq.f32 	%p9, %f3, 0f7F800000;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	$L__BB2_6;
	bra.uni 	$L__BB2_4;

$L__BB2_6:
	setp.eq.f32 	%p13, %f2, 0f3F800000;
	add.f32 	%f81, %f1, %f1;
	mov.b32 	%r15, %f81;
	and.b32  	%r16, %r15, 2147483647;
	selp.b32 	%r17, %r15, %r16, %p13;
	mov.b32 	%f108, %r17;
	bra.uni 	$L__BB2_8;

$L__BB2_4:
	setp.geu.f32 	%p11, %f1, 0f00000000;
	mov.f32 	%f108, %f4;
	@%p11 bra 	$L__BB2_8;

	setp.eq.f32 	%p12, %f2, 0f3F800000;
	neg.f32 	%f80, %f4;
	selp.f32 	%f108, %f80, %f4, %p12;

$L__BB2_8:
	fma.rn.f32 	%f83, %f108, 0f3D372713, %f1;
	mul.f32 	%f84, %f83, 0f3F4C422A;
	abs.f32 	%f85, %f84;
	mul.f32 	%f86, %f85, 0f4038AA3B;
	ex2.approx.ftz.f32 	%f87, %f86;
	add.f32 	%f88, %f87, 0f3F800000;
	rcp.approx.ftz.f32 	%f90, %f88;
	mov.f32 	%f91, 0fC0000000;
	fma.rn.f32 	%f92, %f90, %f91, %f9;
	setp.ge.f32 	%p14, %f85, 0f41102CB4;
	selp.f32 	%f93, 0f3F800000, %f92, %p14;
	mov.b32 	%r18, %f93;
	mov.b32 	%r19, %f84;
	and.b32  	%r20, %r19, -2147483648;
	or.b32  	%r21, %r20, %r18;
	mov.b32 	%f94, %r21;
	mul.f32 	%f95, %f84, %f84;
	mov.f32 	%f96, 0fBD563CAE;
	mov.f32 	%f97, 0f3C80F082;
	fma.rn.f32 	%f98, %f97, %f95, %f96;
	mov.f32 	%f99, 0f3E085941;
	fma.rn.f32 	%f100, %f98, %f95, %f99;
	mov.f32 	%f101, 0fBEAAA9ED;
	fma.rn.f32 	%f102, %f100, %f95, %f101;
	mov.f32 	%f103, 0f00000000;
	fma.rn.f32 	%f104, %f102, %f95, %f103;
	fma.rn.f32 	%f105, %f104, %f84, %f84;
	setp.ge.f32 	%p15, %f85, 0f3F19999A;
	selp.f32 	%f106, %f94, %f105, %p15;
	cvt.f64.f32 	%fd1, %f106;
	add.f64 	%fd2, %fd1, 0d3FF0000000000000;
	cvt.f64.f32 	%fd3, %f1;
	mul.f64 	%fd4, %fd3, 0d3FE0000000000000;
	mul.f64 	%fd5, %fd4, %fd2;
	cvt.rn.f32.f64 	%f107, %fd5;
	cvta.to.global.u64 	%rd7, %rd3;
	shl.b64 	%rd8, %rd1, 2;
	add.s64 	%rd9, %rd7, %rd8;
	st.global.f32 	[%rd9], %f107;

$L__BB2_9:
	ret;

}
	// .globl	gelu_approx_fast_f16
.visible .entry gelu_approx_fast_f16(
	.param .u64 gelu_approx_fast_f16_param_0,
	.param .u64 gelu_approx_fast_f16_param_1,
	.param .u32 gelu_approx_fast_f16_param_2
)
{
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<3>;
	.reg .f32 	%f<110>;
	.reg .b32 	%r<22>;
	.reg .f64 	%fd<6>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd2, [gelu_approx_fast_f16_param_0];
	ld.param.u64 	%rd3, [gelu_approx_fast_f16_param_1];
	ld.param.u32 	%r2, [gelu_approx_fast_f16_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB3_9;

	cvta.to.global.u64 	%rd4, %rd2;
	cvt.s64.s32 	%rd1, %r1;
	mul.wide.s32 	%rd5, %r1, 2;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.u16 	%rs1, [%rd6];
	// begin inline asm
	{  cvt.f32.f16 %f9, %rs1;}

	// end inline asm
	mov.f32 	%f10, 0f3F800000;
	cvt.rzi.f32.f32 	%f11, %f10;
	add.f32 	%f12, %f11, %f11;
	mov.f32 	%f13, 0f40000000;
	sub.f32 	%f14, %f13, %f12;
	abs.f32 	%f2, %f14;
	abs.f32 	%f3, %f9;
	setp.lt.f32 	%p2, %f3, 0f00800000;
	mul.f32 	%f15, %f3, 0f4B800000;
	selp.f32 	%f16, %f15, %f3, %p2;
	selp.f32 	%f17, 0fC1C00000, 0f00000000, %p2;
	mov.b32 	%r6, %f16;
	add.s32 	%r7, %r6, -1060439283;
	and.b32  	%r8, %r7, -8388608;
	sub.s32 	%r9, %r6, %r8;
	mov.b32 	%f18, %r9;
	cvt.rn.f32.s32 	%f19, %r8;
	mov.f32 	%f20, 0f34000000;
	fma.rn.f32 	%f21, %f19, %f20, %f17;
	add.f32 	%f22, %f18, 0fBF800000;
	add.f32 	%f23, %f18, 0f3F800000;
	rcp.approx.ftz.f32 	%f24, %f23;
	add.f32 	%f25, %f22, %f22;
	mul.f32 	%f26, %f25, %f24;
	mul.f32 	%f27, %f26, %f26;
	sub.f32 	%f28, %f22, %f26;
	add.f32 	%f29, %f28, %f28;
	neg.f32 	%f30, %f26;
	fma.rn.f32 	%f31, %f30, %f22, %f29;
	mul.rn.f32 	%f32, %f24, %f31;
	mov.f32 	%f33, 0f3B52E7DB;
	mov.f32 	%f34, 0f3A2C32E4;
	fma.rn.f32 	%f35, %f34, %f27, %f33;
	mov.f32 	%f36, 0f3C93BB73;
	fma.rn.f32 	%f37, %f35, %f27, %f36;
	mov.f32 	%f38, 0f3DF6384F;
	fma.rn.f32 	%f39, %f37, %f27, %f38;
	mul.rn.f32 	%f40, %f39, %f27;
	mov.f32 	%f41, 0f3FB8AA3B;
	fma.rn.f32 	%f42, %f26, %f41, %f21;
	sub.f32 	%f43, %f21, %f42;
	fma.rn.f32 	%f44, %f26, %f41, %f43;
	fma.rn.f32 	%f45, %f32, %f41, %f44;
	mov.f32 	%f46, 0f32A55E34;
	fma.rn.f32 	%f47, %f26, %f46, %f45;
	mul.f32 	%f48, %f40, 0f40400000;
	fma.rn.f32 	%f49, %f48, %f32, %f47;
	fma.rn.f32 	%f50, %f40, %f26, %f49;
	add.rn.f32 	%f51, %f42, %f50;
	neg.f32 	%f52, %f42;
	add.rn.f32 	%f53, %f51, %f52;
	neg.f32 	%f54, %f53;
	add.rn.f32 	%f55, %f50, %f54;
	mul.rn.f32 	%f56, %f51, %f13;
	neg.f32 	%f57, %f56;
	fma.rn.f32 	%f58, %f51, %f13, %f57;
	fma.rn.f32 	%f59, %f55, %f13, %f58;
	cvt.rni.f32.f32 	%f60, %f56;
	sub.f32 	%f61, %f56, %f60;
	add.f32 	%f62, %f59, %f61;
	mov.f32 	%f63, 0f3AAF85ED;
	mov.f32 	%f64, 0f391FCB8E;
	fma.rn.f32 	%f65, %f64, %f62, %f63;
	mov.f32 	%f66, 0f3C1D9856;
	fma.rn.f32 	%f67, %f65, %f62, %f66;
	mov.f32 	%f68, 0f3D6357BB;
	fma.rn.f32 	%f69, %f67, %f62, %f68;
	mov.f32 	%f70, 0f3E75FDEC;
	fma.rn.f32 	%f71, %f69, %f62, %f70;
	mov.f32 	%f72, 0f3F317218;
	fma.rn.f32 	%f73, %f71, %f62, %f72;
	fma.rn.f32 	%f74, %f73, %f62, %f10;
	cvt.rzi.s32.f32 	%r10, %f60;
	setp.gt.f32 	%p3, %f60, 0f00000000;
	selp.b32 	%r11, 0, -2097152000, %p3;
	add.s32 	%r12, %r11, 2130706432;
	mov.b32 	%f75, %r12;
	mul.f32 	%f76, %f74, %f75;
	shl.b32 	%r13, %r10, 23;
	sub.s32 	%r14, %r13, %r11;
	mov.b32 	%f77, %r14;
	mul.f32 	%f78, %f76, %f77;
	abs.f32 	%f79, %f56;
	setp.gt.f32 	%p4, %f79, 0f43180000;
	setp.lt.f32 	%p5, %f56, 0f00000000;
	selp.f32 	%f80, 0f00000000, 0f7F800000, %p5;
	selp.f32 	%f4, %f80, %f78, %p4;
	setp.eq.f32 	%p6, %f9, 0f3F800000;
	mov.f32 	%f109, %f10;
	@%p6 bra 	$L__BB3_8;

	setp.gtu.f32 	%p7, %f3, 0f7F800000;
	@%p7 bra 	$L__BB3_7;
	bra.uni 	$L__BB3_3;

$L__BB3_7:
	mov.f32 	%f83, 0f40000000;
	add.rn.f32 	%f109, %f9, %f83;
	bra.uni 	$L__BB3_8;

$L__BB3_3:
	setp.eq.f32 	%p8, %f9, 0f00000000;
	setp.eq.f32 	%p9, %f3, 0f7F800000;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	$L__BB3_6;
	bra.uni 	$L__BB3_4;

$L__BB3_6:
	setp.eq.f32 	%p13, %f2, 0f3F800000;
	add.f32 	%f82, %f9, %f9;
	mov.b32 	%r15, %f82;
	and.b32  	%r16, %r15, 2147483647;
	selp.b32 	%r17, %r15, %r16, %p13;
	mov.b32 	%f109, %r17;
	bra.uni 	$L__BB3_8;

$L__BB3_4:
	setp.geu.f32 	%p11, %f9, 0f00000000;
	mov.f32 	%f109, %f4;
	@%p11 bra 	$L__BB3_8;

	setp.eq.f32 	%p12, %f2, 0f3F800000;
	neg.f32 	%f81, %f4;
	selp.f32 	%f109, %f81, %f4, %p12;

$L__BB3_8:
	fma.rn.f32 	%f85, %f109, 0f3D372713, %f9;
	mul.f32 	%f86, %f85, 0f3F4C422A;
	abs.f32 	%f87, %f86;
	mul.f32 	%f88, %f87, 0f4038AA3B;
	ex2.approx.ftz.f32 	%f89, %f88;
	add.f32 	%f90, %f89, 0f3F800000;
	rcp.approx.ftz.f32 	%f92, %f90;
	mov.f32 	%f93, 0fC0000000;
	fma.rn.f32 	%f94, %f92, %f93, %f10;
	setp.ge.f32 	%p14, %f87, 0f41102CB4;
	selp.f32 	%f95, 0f3F800000, %f94, %p14;
	mov.b32 	%r18, %f95;
	mov.b32 	%r19, %f86;
	and.b32  	%r20, %r19, -2147483648;
	or.b32  	%r21, %r20, %r18;
	mov.b32 	%f96, %r21;
	mul.f32 	%f97, %f86, %f86;
	mov.f32 	%f98, 0fBD563CAE;
	mov.f32 	%f99, 0f3C80F082;
	fma.rn.f32 	%f100, %f99, %f97, %f98;
	mov.f32 	%f101, 0f3E085941;
	fma.rn.f32 	%f102, %f100, %f97, %f101;
	mov.f32 	%f103, 0fBEAAA9ED;
	fma.rn.f32 	%f104, %f102, %f97, %f103;
	mov.f32 	%f105, 0f00000000;
	fma.rn.f32 	%f106, %f104, %f97, %f105;
	fma.rn.f32 	%f107, %f106, %f86, %f86;
	setp.ge.f32 	%p15, %f87, 0f3F19999A;
	selp.f32 	%f108, %f96, %f107, %p15;
	cvt.f64.f32 	%fd1, %f108;
	add.f64 	%fd2, %fd1, 0d3FF0000000000000;
	cvt.f64.f32 	%fd3, %f9;
	mul.f64 	%fd4, %fd3, 0d3FE0000000000000;
	mul.f64 	%fd5, %fd4, %fd2;
	cvt.rn.f32.f64 	%f84, %fd5;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs2, %f84;}

	// end inline asm
	cvta.to.global.u64 	%rd7, %rd3;
	shl.b64 	%rd8, %rd1, 1;
	add.s64 	%rd9, %rd7, %rd8;
	st.global.u16 	[%rd9], %rs2;

$L__BB3_9:
	ret;

}
	// .globl	apply_rope_nd2_f32
.visible .entry apply_rope_nd2_f32(
	.param .u64 apply_rope_nd2_f32_param_0,
	.param .u64 apply_rope_nd2_f32_param_1,
	.param .u64 apply_rope_nd2_f32_param_2,
	.param .u64 apply_rope_nd2_f32_param_3,
	.param .u32 apply_rope_nd2_f32_param_4,
	.param .u32 apply_rope_nd2_f32_param_5,
	.param .u32 apply_rope_nd2_f32_param_6,
	.param .u32 apply_rope_nd2_f32_param_7,
	.param .u32 apply_rope_nd2_f32_param_8,
	.param .u32 apply_rope_nd2_f32_param_9,
	.param .u32 apply_rope_nd2_f32_param_10,
	.param .u32 apply_rope_nd2_f32_param_11
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<14>;
	.reg .b32 	%r<30>;
	.reg .b64 	%rd<23>;


	ld.param.u64 	%rd1, [apply_rope_nd2_f32_param_0];
	ld.param.u64 	%rd2, [apply_rope_nd2_f32_param_1];
	ld.param.u64 	%rd3, [apply_rope_nd2_f32_param_2];
	ld.param.u64 	%rd4, [apply_rope_nd2_f32_param_3];
	ld.param.u32 	%r10, [apply_rope_nd2_f32_param_4];
	ld.param.u32 	%r4, [apply_rope_nd2_f32_param_6];
	ld.param.u32 	%r5, [apply_rope_nd2_f32_param_7];
	ld.param.u32 	%r6, [apply_rope_nd2_f32_param_8];
	ld.param.u32 	%r7, [apply_rope_nd2_f32_param_9];
	ld.param.u32 	%r8, [apply_rope_nd2_f32_param_10];
	ld.param.u32 	%r9, [apply_rope_nd2_f32_param_11];
	mov.u32 	%r11, %ntid.x;
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r1, %r12, %r11, %r13;
	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r2, %r15, %r14, %r16;
	ld.param.u32 	%r17, [apply_rope_nd2_f32_param_5];
	shr.u32 	%r18, %r17, 31;
	add.s32 	%r19, %r17, %r18;
	shr.s32 	%r3, %r19, 1;
	setp.ge.s32 	%p1, %r1, %r3;
	setp.ge.s32 	%p2, %r2, %r10;
	or.pred  	%p3, %p2, %p1;
	@%p3 bra 	$L__BB4_2;

	cvta.to.global.u64 	%rd5, %rd4;
	cvta.to.global.u64 	%rd6, %rd3;
	cvta.to.global.u64 	%rd7, %rd2;
	cvta.to.global.u64 	%rd8, %rd1;
	add.s32 	%r20, %r3, %r1;
	mul.lo.s32 	%r21, %r2, %r4;
	mad.lo.s32 	%r22, %r1, %r5, %r21;
	mad.lo.s32 	%r23, %r20, %r5, %r21;
	mul.lo.s32 	%r24, %r2, %r8;
	mad.lo.s32 	%r25, %r1, %r9, %r24;
	mad.lo.s32 	%r26, %r20, %r9, %r24;
	mul.lo.s32 	%r27, %r2, %r6;
	mad.lo.s32 	%r28, %r1, %r7, %r27;
	mad.lo.s32 	%r29, %r20, %r7, %r27;
	mul.wide.s32 	%rd9, %r22, 4;
	add.s64 	%rd10, %rd8, %rd9;
	mul.wide.s32 	%rd11, %r28, 4;
	add.s64 	%rd12, %rd7, %rd11;
	ld.global.f32 	%f1, [%rd12];
	ld.global.f32 	%f2, [%rd10];
	mul.f32 	%f3, %f2, %f1;
	mul.wide.s32 	%rd13, %r23, 4;
	add.s64 	%rd14, %rd8, %rd13;
	add.s64 	%rd15, %rd6, %rd11;
	ld.global.f32 	%f4, [%rd15];
	ld.global.f32 	%f5, [%rd14];
	mul.f32 	%f6, %f5, %f4;
	sub.f32 	%f7, %f3, %f6;
	mul.wide.s32 	%rd16, %r25, 4;
	add.s64 	%rd17, %rd5, %rd16;
	st.global.f32 	[%rd17], %f7;
	mul.wide.s32 	%rd18, %r29, 4;
	add.s64 	%rd19, %rd7, %rd18;
	ld.global.f32 	%f8, [%rd19];
	ld.global.f32 	%f9, [%rd14];
	add.s64 	%rd20, %rd6, %rd18;
	ld.global.f32 	%f10, [%rd20];
	ld.global.f32 	%f11, [%rd10];
	mul.f32 	%f12, %f11, %f10;
	fma.rn.f32 	%f13, %f9, %f8, %f12;
	mul.wide.s32 	%rd21, %r26, 4;
	add.s64 	%rd22, %rd5, %rd21;
	st.global.f32 	[%rd22], %f13;

$L__BB4_2:
	ret;

}
	// .globl	apply_rope_nd3_f32
.visible .entry apply_rope_nd3_f32(
	.param .u64 apply_rope_nd3_f32_param_0,
	.param .u64 apply_rope_nd3_f32_param_1,
	.param .u64 apply_rope_nd3_f32_param_2,
	.param .u64 apply_rope_nd3_f32_param_3,
	.param .u32 apply_rope_nd3_f32_param_4,
	.param .u32 apply_rope_nd3_f32_param_5,
	.param .u32 apply_rope_nd3_f32_param_6,
	.param .u32 apply_rope_nd3_f32_param_7,
	.param .u32 apply_rope_nd3_f32_param_8,
	.param .u32 apply_rope_nd3_f32_param_9,
	.param .u32 apply_rope_nd3_f32_param_10,
	.param .u32 apply_rope_nd3_f32_param_11,
	.param .u32 apply_rope_nd3_f32_param_12,
	.param .u32 apply_rope_nd3_f32_param_13,
	.param .u32 apply_rope_nd3_f32_param_14,
	.param .u32 apply_rope_nd3_f32_param_15
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<14>;
	.reg .b32 	%r<41>;
	.reg .b64 	%rd<23>;


	ld.param.u64 	%rd1, [apply_rope_nd3_f32_param_0];
	ld.param.u64 	%rd2, [apply_rope_nd3_f32_param_1];
	ld.param.u64 	%rd3, [apply_rope_nd3_f32_param_2];
	ld.param.u64 	%rd4, [apply_rope_nd3_f32_param_3];
	ld.param.u32 	%r14, [apply_rope_nd3_f32_param_4];
	ld.param.u32 	%r15, [apply_rope_nd3_f32_param_5];
	ld.param.u32 	%r5, [apply_rope_nd3_f32_param_7];
	ld.param.u32 	%r6, [apply_rope_nd3_f32_param_8];
	ld.param.u32 	%r7, [apply_rope_nd3_f32_param_9];
	ld.param.u32 	%r8, [apply_rope_nd3_f32_param_10];
	ld.param.u32 	%r9, [apply_rope_nd3_f32_param_11];
	ld.param.u32 	%r10, [apply_rope_nd3_f32_param_12];
	ld.param.u32 	%r11, [apply_rope_nd3_f32_param_13];
	ld.param.u32 	%r12, [apply_rope_nd3_f32_param_14];
	ld.param.u32 	%r13, [apply_rope_nd3_f32_param_15];
	mov.u32 	%r16, %ntid.x;
	mov.u32 	%r17, %ctaid.x;
	mov.u32 	%r18, %tid.x;
	mad.lo.s32 	%r1, %r17, %r16, %r18;
	mov.u32 	%r19, %ntid.y;
	mov.u32 	%r20, %ctaid.y;
	mov.u32 	%r21, %tid.y;
	mad.lo.s32 	%r2, %r20, %r19, %r21;
	mov.u32 	%r22, %ntid.z;
	mov.u32 	%r23, %ctaid.z;
	mov.u32 	%r24, %tid.z;
	mad.lo.s32 	%r3, %r23, %r22, %r24;
	ld.param.u32 	%r25, [apply_rope_nd3_f32_param_6];
	shr.u32 	%r26, %r25, 31;
	add.s32 	%r27, %r25, %r26;
	shr.s32 	%r4, %r27, 1;
	setp.ge.s32 	%p1, %r1, %r4;
	setp.ge.s32 	%p2, %r2, %r15;
	or.pred  	%p3, %p2, %p1;
	setp.ge.s32 	%p4, %r3, %r14;
	or.pred  	%p5, %p4, %p3;
	@%p5 bra 	$L__BB5_2;

	cvta.to.global.u64 	%rd5, %rd4;
	cvta.to.global.u64 	%rd6, %rd3;
	cvta.to.global.u64 	%rd7, %rd2;
	cvta.to.global.u64 	%rd8, %rd1;
	add.s32 	%r28, %r4, %r1;
	mul.lo.s32 	%r29, %r3, %r5;
	mad.lo.s32 	%r30, %r2, %r6, %r29;
	mad.lo.s32 	%r31, %r1, %r7, %r30;
	mad.lo.s32 	%r32, %r28, %r7, %r30;
	mul.lo.s32 	%r33, %r3, %r11;
	mad.lo.s32 	%r34, %r2, %r12, %r33;
	mad.lo.s32 	%r35, %r1, %r13, %r34;
	mad.lo.s32 	%r36, %r28, %r13, %r34;
	mul.lo.s32 	%r37, %r3, %r8;
	mad.lo.s32 	%r38, %r2, %r9, %r37;
	mad.lo.s32 	%r39, %r1, %r10, %r38;
	mad.lo.s32 	%r40, %r28, %r10, %r38;
	mul.wide.s32 	%rd9, %r31, 4;
	add.s64 	%rd10, %rd8, %rd9;
	mul.wide.s32 	%rd11, %r39, 4;
	add.s64 	%rd12, %rd7, %rd11;
	ld.global.f32 	%f1, [%rd12];
	ld.global.f32 	%f2, [%rd10];
	mul.f32 	%f3, %f2, %f1;
	mul.wide.s32 	%rd13, %r32, 4;
	add.s64 	%rd14, %rd8, %rd13;
	add.s64 	%rd15, %rd6, %rd11;
	ld.global.f32 	%f4, [%rd15];
	ld.global.f32 	%f5, [%rd14];
	mul.f32 	%f6, %f5, %f4;
	sub.f32 	%f7, %f3, %f6;
	mul.wide.s32 	%rd16, %r35, 4;
	add.s64 	%rd17, %rd5, %rd16;
	st.global.f32 	[%rd17], %f7;
	mul.wide.s32 	%rd18, %r40, 4;
	add.s64 	%rd19, %rd7, %rd18;
	ld.global.f32 	%f8, [%rd19];
	ld.global.f32 	%f9, [%rd14];
	add.s64 	%rd20, %rd6, %rd18;
	ld.global.f32 	%f10, [%rd20];
	ld.global.f32 	%f11, [%rd10];
	mul.f32 	%f12, %f11, %f10;
	fma.rn.f32 	%f13, %f9, %f8, %f12;
	mul.wide.s32 	%rd21, %r36, 4;
	add.s64 	%rd22, %rd5, %rd21;
	st.global.f32 	[%rd22], %f13;

$L__BB5_2:
	ret;

}
	// .globl	apply_rope_nd4_f32
.visible .entry apply_rope_nd4_f32(
	.param .u64 apply_rope_nd4_f32_param_0,
	.param .u64 apply_rope_nd4_f32_param_1,
	.param .u64 apply_rope_nd4_f32_param_2,
	.param .u64 apply_rope_nd4_f32_param_3,
	.param .u32 apply_rope_nd4_f32_param_4,
	.param .u32 apply_rope_nd4_f32_param_5,
	.param .u32 apply_rope_nd4_f32_param_6,
	.param .u32 apply_rope_nd4_f32_param_7,
	.param .u32 apply_rope_nd4_f32_param_8,
	.param .u32 apply_rope_nd4_f32_param_9,
	.param .u32 apply_rope_nd4_f32_param_10,
	.param .u32 apply_rope_nd4_f32_param_11,
	.param .u32 apply_rope_nd4_f32_param_12,
	.param .u32 apply_rope_nd4_f32_param_13,
	.param .u32 apply_rope_nd4_f32_param_14,
	.param .u32 apply_rope_nd4_f32_param_15,
	.param .u32 apply_rope_nd4_f32_param_16,
	.param .u32 apply_rope_nd4_f32_param_17,
	.param .u32 apply_rope_nd4_f32_param_18,
	.param .u32 apply_rope_nd4_f32_param_19
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<14>;
	.reg .b32 	%r<64>;
	.reg .b64 	%rd<23>;


	ld.param.u64 	%rd1, [apply_rope_nd4_f32_param_0];
	ld.param.u64 	%rd2, [apply_rope_nd4_f32_param_1];
	ld.param.u64 	%rd3, [apply_rope_nd4_f32_param_2];
	ld.param.u64 	%rd4, [apply_rope_nd4_f32_param_3];
	ld.param.u32 	%r18, [apply_rope_nd4_f32_param_4];
	ld.param.u32 	%r5, [apply_rope_nd4_f32_param_5];
	ld.param.u32 	%r19, [apply_rope_nd4_f32_param_6];
	ld.param.u32 	%r6, [apply_rope_nd4_f32_param_8];
	ld.param.u32 	%r7, [apply_rope_nd4_f32_param_9];
	ld.param.u32 	%r8, [apply_rope_nd4_f32_param_10];
	ld.param.u32 	%r9, [apply_rope_nd4_f32_param_11];
	ld.param.u32 	%r10, [apply_rope_nd4_f32_param_12];
	ld.param.u32 	%r11, [apply_rope_nd4_f32_param_13];
	ld.param.u32 	%r12, [apply_rope_nd4_f32_param_14];
	ld.param.u32 	%r13, [apply_rope_nd4_f32_param_15];
	ld.param.u32 	%r14, [apply_rope_nd4_f32_param_16];
	ld.param.u32 	%r15, [apply_rope_nd4_f32_param_17];
	ld.param.u32 	%r16, [apply_rope_nd4_f32_param_18];
	ld.param.u32 	%r17, [apply_rope_nd4_f32_param_19];
	mov.u32 	%r20, %ntid.x;
	mov.u32 	%r21, %ctaid.x;
	mov.u32 	%r22, %tid.x;
	mad.lo.s32 	%r1, %r21, %r20, %r22;
	mov.u32 	%r23, %ntid.y;
	mov.u32 	%r24, %ctaid.y;
	mov.u32 	%r25, %tid.y;
	mad.lo.s32 	%r2, %r24, %r23, %r25;
	mov.u32 	%r26, %ntid.z;
	mov.u32 	%r27, %ctaid.z;
	mov.u32 	%r28, %tid.z;
	mad.lo.s32 	%r3, %r27, %r26, %r28;
	ld.param.u32 	%r29, [apply_rope_nd4_f32_param_7];
	shr.u32 	%r30, %r29, 31;
	add.s32 	%r31, %r29, %r30;
	shr.s32 	%r4, %r31, 1;
	setp.ge.s32 	%p1, %r1, %r4;
	setp.ge.s32 	%p2, %r2, %r19;
	or.pred  	%p3, %p2, %p1;
	mul.lo.s32 	%r32, %r5, %r18;
	setp.ge.s32 	%p4, %r3, %r32;
	or.pred  	%p5, %p4, %p3;
	@%p5 bra 	$L__BB6_2;

	cvta.to.global.u64 	%rd5, %rd4;
	cvta.to.global.u64 	%rd6, %rd3;
	cvta.to.global.u64 	%rd7, %rd2;
	cvta.to.global.u64 	%rd8, %rd1;
	add.s32 	%r33, %r4, %r1;
	mul.lo.s32 	%r34, %r2, %r8;
	mad.lo.s32 	%r35, %r1, %r9, %r34;
	div.s32 	%r36, %r3, %r5;
	mul.lo.s32 	%r37, %r36, %r5;
	sub.s32 	%r38, %r3, %r37;
	mul.lo.s32 	%r39, %r38, %r7;
	add.s32 	%r40, %r35, %r39;
	mul.lo.s32 	%r41, %r36, %r6;
	add.s32 	%r42, %r40, %r41;
	mad.lo.s32 	%r43, %r33, %r9, %r34;
	add.s32 	%r44, %r43, %r39;
	add.s32 	%r45, %r44, %r41;
	mul.lo.s32 	%r46, %r2, %r16;
	mad.lo.s32 	%r47, %r1, %r17, %r46;
	mul.lo.s32 	%r48, %r38, %r15;
	add.s32 	%r49, %r47, %r48;
	mul.lo.s32 	%r50, %r36, %r14;
	add.s32 	%r51, %r49, %r50;
	mad.lo.s32 	%r52, %r33, %r17, %r46;
	add.s32 	%r53, %r52, %r48;
	add.s32 	%r54, %r53, %r50;
	mul.lo.s32 	%r55, %r2, %r12;
	mad.lo.s32 	%r56, %r1, %r13, %r55;
	mul.lo.s32 	%r57, %r38, %r11;
	add.s32 	%r58, %r56, %r57;
	mul.lo.s32 	%r59, %r36, %r10;
	add.s32 	%r60, %r58, %r59;
	mad.lo.s32 	%r61, %r33, %r13, %r55;
	add.s32 	%r62, %r61, %r57;
	add.s32 	%r63, %r62, %r59;
	mul.wide.s32 	%rd9, %r42, 4;
	add.s64 	%rd10, %rd8, %rd9;
	mul.wide.s32 	%rd11, %r60, 4;
	add.s64 	%rd12, %rd7, %rd11;
	ld.global.f32 	%f1, [%rd12];
	ld.global.f32 	%f2, [%rd10];
	mul.f32 	%f3, %f2, %f1;
	mul.wide.s32 	%rd13, %r45, 4;
	add.s64 	%rd14, %rd8, %rd13;
	add.s64 	%rd15, %rd6, %rd11;
	ld.global.f32 	%f4, [%rd15];
	ld.global.f32 	%f5, [%rd14];
	mul.f32 	%f6, %f5, %f4;
	sub.f32 	%f7, %f3, %f6;
	mul.wide.s32 	%rd16, %r51, 4;
	add.s64 	%rd17, %rd5, %rd16;
	st.global.f32 	[%rd17], %f7;
	mul.wide.s32 	%rd18, %r63, 4;
	add.s64 	%rd19, %rd7, %rd18;
	ld.global.f32 	%f8, [%rd19];
	ld.global.f32 	%f9, [%rd14];
	add.s64 	%rd20, %rd6, %rd18;
	ld.global.f32 	%f10, [%rd20];
	ld.global.f32 	%f11, [%rd10];
	mul.f32 	%f12, %f11, %f10;
	fma.rn.f32 	%f13, %f9, %f8, %f12;
	mul.wide.s32 	%rd21, %r54, 4;
	add.s64 	%rd22, %rd5, %rd21;
	st.global.f32 	[%rd22], %f13;

$L__BB6_2:
	ret;

}
	// .globl	apply_rope_nd2_f16
.visible .entry apply_rope_nd2_f16(
	.param .u64 apply_rope_nd2_f16_param_0,
	.param .u64 apply_rope_nd2_f16_param_1,
	.param .u64 apply_rope_nd2_f16_param_2,
	.param .u64 apply_rope_nd2_f16_param_3,
	.param .u32 apply_rope_nd2_f16_param_4,
	.param .u32 apply_rope_nd2_f16_param_5,
	.param .u32 apply_rope_nd2_f16_param_6,
	.param .u32 apply_rope_nd2_f16_param_7,
	.param .u32 apply_rope_nd2_f16_param_8,
	.param .u32 apply_rope_nd2_f16_param_9,
	.param .u32 apply_rope_nd2_f16_param_10,
	.param .u32 apply_rope_nd2_f16_param_11
)
{
	.reg .pred 	%p<4>;
	.reg .b16 	%rs<19>;
	.reg .b32 	%r<30>;
	.reg .b64 	%rd<23>;


	ld.param.u64 	%rd1, [apply_rope_nd2_f16_param_0];
	ld.param.u64 	%rd2, [apply_rope_nd2_f16_param_1];
	ld.param.u64 	%rd3, [apply_rope_nd2_f16_param_2];
	ld.param.u64 	%rd4, [apply_rope_nd2_f16_param_3];
	ld.param.u32 	%r10, [apply_rope_nd2_f16_param_4];
	ld.param.u32 	%r4, [apply_rope_nd2_f16_param_6];
	ld.param.u32 	%r5, [apply_rope_nd2_f16_param_7];
	ld.param.u32 	%r6, [apply_rope_nd2_f16_param_8];
	ld.param.u32 	%r7, [apply_rope_nd2_f16_param_9];
	ld.param.u32 	%r8, [apply_rope_nd2_f16_param_10];
	ld.param.u32 	%r9, [apply_rope_nd2_f16_param_11];
	mov.u32 	%r11, %ntid.x;
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r1, %r12, %r11, %r13;
	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r2, %r15, %r14, %r16;
	ld.param.u32 	%r17, [apply_rope_nd2_f16_param_5];
	shr.u32 	%r18, %r17, 31;
	add.s32 	%r19, %r17, %r18;
	shr.s32 	%r3, %r19, 1;
	setp.ge.s32 	%p1, %r1, %r3;
	setp.ge.s32 	%p2, %r2, %r10;
	or.pred  	%p3, %p2, %p1;
	@%p3 bra 	$L__BB7_2;

	cvta.to.global.u64 	%rd5, %rd4;
	cvta.to.global.u64 	%rd6, %rd3;
	cvta.to.global.u64 	%rd7, %rd2;
	cvta.to.global.u64 	%rd8, %rd1;
	add.s32 	%r20, %r3, %r1;
	mul.lo.s32 	%r21, %r2, %r4;
	mad.lo.s32 	%r22, %r1, %r5, %r21;
	mad.lo.s32 	%r23, %r20, %r5, %r21;
	mul.lo.s32 	%r24, %r2, %r8;
	mad.lo.s32 	%r25, %r1, %r9, %r24;
	mad.lo.s32 	%r26, %r20, %r9, %r24;
	mul.lo.s32 	%r27, %r2, %r6;
	mad.lo.s32 	%r28, %r1, %r7, %r27;
	mad.lo.s32 	%r29, %r20, %r7, %r27;
	mul.wide.s32 	%rd9, %r22, 2;
	add.s64 	%rd10, %rd8, %rd9;
	ld.global.u16 	%rs2, [%rd10];
	mul.wide.s32 	%rd11, %r28, 2;
	add.s64 	%rd12, %rd7, %rd11;
	ld.global.u16 	%rs3, [%rd12];
	// begin inline asm
	{mul.f16 %rs1,%rs2,%rs3;
}
	// end inline asm
	mul.wide.s32 	%rd13, %r23, 2;
	add.s64 	%rd14, %rd8, %rd13;
	ld.global.u16 	%rs5, [%rd14];
	add.s64 	%rd15, %rd6, %rd11;
	ld.global.u16 	%rs6, [%rd15];
	// begin inline asm
	{mul.f16 %rs4,%rs5,%rs6;
}
	// end inline asm
	// begin inline asm
	{sub.f16 %rs7,%rs1,%rs4;
}
	// end inline asm
	mul.wide.s32 	%rd16, %r25, 2;
	add.s64 	%rd17, %rd5, %rd16;
	st.global.u16 	[%rd17], %rs7;
	ld.global.u16 	%rs11, [%rd14];
	mul.wide.s32 	%rd18, %r29, 2;
	add.s64 	%rd19, %rd7, %rd18;
	ld.global.u16 	%rs12, [%rd19];
	// begin inline asm
	{mul.f16 %rs10,%rs11,%rs12;
}
	// end inline asm
	ld.global.u16 	%rs14, [%rd10];
	add.s64 	%rd20, %rd6, %rd18;
	ld.global.u16 	%rs15, [%rd20];
	// begin inline asm
	{mul.f16 %rs13,%rs14,%rs15;
}
	// end inline asm
	// begin inline asm
	{add.f16 %rs16,%rs10,%rs13;
}
	// end inline asm
	mul.wide.s32 	%rd21, %r26, 2;
	add.s64 	%rd22, %rd5, %rd21;
	st.global.u16 	[%rd22], %rs16;

$L__BB7_2:
	ret;

}
	// .globl	apply_rope_nd3_f16
.visible .entry apply_rope_nd3_f16(
	.param .u64 apply_rope_nd3_f16_param_0,
	.param .u64 apply_rope_nd3_f16_param_1,
	.param .u64 apply_rope_nd3_f16_param_2,
	.param .u64 apply_rope_nd3_f16_param_3,
	.param .u32 apply_rope_nd3_f16_param_4,
	.param .u32 apply_rope_nd3_f16_param_5,
	.param .u32 apply_rope_nd3_f16_param_6,
	.param .u32 apply_rope_nd3_f16_param_7,
	.param .u32 apply_rope_nd3_f16_param_8,
	.param .u32 apply_rope_nd3_f16_param_9,
	.param .u32 apply_rope_nd3_f16_param_10,
	.param .u32 apply_rope_nd3_f16_param_11,
	.param .u32 apply_rope_nd3_f16_param_12,
	.param .u32 apply_rope_nd3_f16_param_13,
	.param .u32 apply_rope_nd3_f16_param_14,
	.param .u32 apply_rope_nd3_f16_param_15
)
{
	.reg .pred 	%p<6>;
	.reg .b16 	%rs<19>;
	.reg .b32 	%r<41>;
	.reg .b64 	%rd<23>;


	ld.param.u64 	%rd1, [apply_rope_nd3_f16_param_0];
	ld.param.u64 	%rd2, [apply_rope_nd3_f16_param_1];
	ld.param.u64 	%rd3, [apply_rope_nd3_f16_param_2];
	ld.param.u64 	%rd4, [apply_rope_nd3_f16_param_3];
	ld.param.u32 	%r14, [apply_rope_nd3_f16_param_4];
	ld.param.u32 	%r15, [apply_rope_nd3_f16_param_5];
	ld.param.u32 	%r5, [apply_rope_nd3_f16_param_7];
	ld.param.u32 	%r6, [apply_rope_nd3_f16_param_8];
	ld.param.u32 	%r7, [apply_rope_nd3_f16_param_9];
	ld.param.u32 	%r8, [apply_rope_nd3_f16_param_10];
	ld.param.u32 	%r9, [apply_rope_nd3_f16_param_11];
	ld.param.u32 	%r10, [apply_rope_nd3_f16_param_12];
	ld.param.u32 	%r11, [apply_rope_nd3_f16_param_13];
	ld.param.u32 	%r12, [apply_rope_nd3_f16_param_14];
	ld.param.u32 	%r13, [apply_rope_nd3_f16_param_15];
	mov.u32 	%r16, %ntid.x;
	mov.u32 	%r17, %ctaid.x;
	mov.u32 	%r18, %tid.x;
	mad.lo.s32 	%r1, %r17, %r16, %r18;
	mov.u32 	%r19, %ntid.y;
	mov.u32 	%r20, %ctaid.y;
	mov.u32 	%r21, %tid.y;
	mad.lo.s32 	%r2, %r20, %r19, %r21;
	mov.u32 	%r22, %ntid.z;
	mov.u32 	%r23, %ctaid.z;
	mov.u32 	%r24, %tid.z;
	mad.lo.s32 	%r3, %r23, %r22, %r24;
	ld.param.u32 	%r25, [apply_rope_nd3_f16_param_6];
	shr.u32 	%r26, %r25, 31;
	add.s32 	%r27, %r25, %r26;
	shr.s32 	%r4, %r27, 1;
	setp.ge.s32 	%p1, %r1, %r4;
	setp.ge.s32 	%p2, %r2, %r15;
	or.pred  	%p3, %p2, %p1;
	setp.ge.s32 	%p4, %r3, %r14;
	or.pred  	%p5, %p4, %p3;
	@%p5 bra 	$L__BB8_2;

	cvta.to.global.u64 	%rd5, %rd4;
	cvta.to.global.u64 	%rd6, %rd3;
	cvta.to.global.u64 	%rd7, %rd2;
	cvta.to.global.u64 	%rd8, %rd1;
	add.s32 	%r28, %r4, %r1;
	mul.lo.s32 	%r29, %r3, %r5;
	mad.lo.s32 	%r30, %r2, %r6, %r29;
	mad.lo.s32 	%r31, %r1, %r7, %r30;
	mad.lo.s32 	%r32, %r28, %r7, %r30;
	mul.lo.s32 	%r33, %r3, %r11;
	mad.lo.s32 	%r34, %r2, %r12, %r33;
	mad.lo.s32 	%r35, %r1, %r13, %r34;
	mad.lo.s32 	%r36, %r28, %r13, %r34;
	mul.lo.s32 	%r37, %r3, %r8;
	mad.lo.s32 	%r38, %r2, %r9, %r37;
	mad.lo.s32 	%r39, %r1, %r10, %r38;
	mad.lo.s32 	%r40, %r28, %r10, %r38;
	mul.wide.s32 	%rd9, %r31, 2;
	add.s64 	%rd10, %rd8, %rd9;
	ld.global.u16 	%rs2, [%rd10];
	mul.wide.s32 	%rd11, %r39, 2;
	add.s64 	%rd12, %rd7, %rd11;
	ld.global.u16 	%rs3, [%rd12];
	// begin inline asm
	{mul.f16 %rs1,%rs2,%rs3;
}
	// end inline asm
	mul.wide.s32 	%rd13, %r32, 2;
	add.s64 	%rd14, %rd8, %rd13;
	ld.global.u16 	%rs5, [%rd14];
	add.s64 	%rd15, %rd6, %rd11;
	ld.global.u16 	%rs6, [%rd15];
	// begin inline asm
	{mul.f16 %rs4,%rs5,%rs6;
}
	// end inline asm
	// begin inline asm
	{sub.f16 %rs7,%rs1,%rs4;
}
	// end inline asm
	mul.wide.s32 	%rd16, %r35, 2;
	add.s64 	%rd17, %rd5, %rd16;
	st.global.u16 	[%rd17], %rs7;
	ld.global.u16 	%rs11, [%rd14];
	mul.wide.s32 	%rd18, %r40, 2;
	add.s64 	%rd19, %rd7, %rd18;
	ld.global.u16 	%rs12, [%rd19];
	// begin inline asm
	{mul.f16 %rs10,%rs11,%rs12;
}
	// end inline asm
	ld.global.u16 	%rs14, [%rd10];
	add.s64 	%rd20, %rd6, %rd18;
	ld.global.u16 	%rs15, [%rd20];
	// begin inline asm
	{mul.f16 %rs13,%rs14,%rs15;
}
	// end inline asm
	// begin inline asm
	{add.f16 %rs16,%rs10,%rs13;
}
	// end inline asm
	mul.wide.s32 	%rd21, %r36, 2;
	add.s64 	%rd22, %rd5, %rd21;
	st.global.u16 	[%rd22], %rs16;

$L__BB8_2:
	ret;

}
	// .globl	apply_rope_nd4_f16
.visible .entry apply_rope_nd4_f16(
	.param .u64 apply_rope_nd4_f16_param_0,
	.param .u64 apply_rope_nd4_f16_param_1,
	.param .u64 apply_rope_nd4_f16_param_2,
	.param .u64 apply_rope_nd4_f16_param_3,
	.param .u32 apply_rope_nd4_f16_param_4,
	.param .u32 apply_rope_nd4_f16_param_5,
	.param .u32 apply_rope_nd4_f16_param_6,
	.param .u32 apply_rope_nd4_f16_param_7,
	.param .u32 apply_rope_nd4_f16_param_8,
	.param .u32 apply_rope_nd4_f16_param_9,
	.param .u32 apply_rope_nd4_f16_param_10,
	.param .u32 apply_rope_nd4_f16_param_11,
	.param .u32 apply_rope_nd4_f16_param_12,
	.param .u32 apply_rope_nd4_f16_param_13,
	.param .u32 apply_rope_nd4_f16_param_14,
	.param .u32 apply_rope_nd4_f16_param_15,
	.param .u32 apply_rope_nd4_f16_param_16,
	.param .u32 apply_rope_nd4_f16_param_17,
	.param .u32 apply_rope_nd4_f16_param_18,
	.param .u32 apply_rope_nd4_f16_param_19
)
{
	.reg .pred 	%p<6>;
	.reg .b16 	%rs<19>;
	.reg .b32 	%r<64>;
	.reg .b64 	%rd<23>;


	ld.param.u64 	%rd1, [apply_rope_nd4_f16_param_0];
	ld.param.u64 	%rd2, [apply_rope_nd4_f16_param_1];
	ld.param.u64 	%rd3, [apply_rope_nd4_f16_param_2];
	ld.param.u64 	%rd4, [apply_rope_nd4_f16_param_3];
	ld.param.u32 	%r18, [apply_rope_nd4_f16_param_4];
	ld.param.u32 	%r5, [apply_rope_nd4_f16_param_5];
	ld.param.u32 	%r19, [apply_rope_nd4_f16_param_6];
	ld.param.u32 	%r6, [apply_rope_nd4_f16_param_8];
	ld.param.u32 	%r7, [apply_rope_nd4_f16_param_9];
	ld.param.u32 	%r8, [apply_rope_nd4_f16_param_10];
	ld.param.u32 	%r9, [apply_rope_nd4_f16_param_11];
	ld.param.u32 	%r10, [apply_rope_nd4_f16_param_12];
	ld.param.u32 	%r11, [apply_rope_nd4_f16_param_13];
	ld.param.u32 	%r12, [apply_rope_nd4_f16_param_14];
	ld.param.u32 	%r13, [apply_rope_nd4_f16_param_15];
	ld.param.u32 	%r14, [apply_rope_nd4_f16_param_16];
	ld.param.u32 	%r15, [apply_rope_nd4_f16_param_17];
	ld.param.u32 	%r16, [apply_rope_nd4_f16_param_18];
	ld.param.u32 	%r17, [apply_rope_nd4_f16_param_19];
	mov.u32 	%r20, %ntid.x;
	mov.u32 	%r21, %ctaid.x;
	mov.u32 	%r22, %tid.x;
	mad.lo.s32 	%r1, %r21, %r20, %r22;
	mov.u32 	%r23, %ntid.y;
	mov.u32 	%r24, %ctaid.y;
	mov.u32 	%r25, %tid.y;
	mad.lo.s32 	%r2, %r24, %r23, %r25;
	mov.u32 	%r26, %ntid.z;
	mov.u32 	%r27, %ctaid.z;
	mov.u32 	%r28, %tid.z;
	mad.lo.s32 	%r3, %r27, %r26, %r28;
	ld.param.u32 	%r29, [apply_rope_nd4_f16_param_7];
	shr.u32 	%r30, %r29, 31;
	add.s32 	%r31, %r29, %r30;
	shr.s32 	%r4, %r31, 1;
	setp.ge.s32 	%p1, %r1, %r4;
	setp.ge.s32 	%p2, %r2, %r19;
	or.pred  	%p3, %p2, %p1;
	mul.lo.s32 	%r32, %r5, %r18;
	setp.ge.s32 	%p4, %r3, %r32;
	or.pred  	%p5, %p4, %p3;
	@%p5 bra 	$L__BB9_2;

	cvta.to.global.u64 	%rd5, %rd4;
	cvta.to.global.u64 	%rd6, %rd3;
	cvta.to.global.u64 	%rd7, %rd2;
	cvta.to.global.u64 	%rd8, %rd1;
	add.s32 	%r33, %r4, %r1;
	mul.lo.s32 	%r34, %r2, %r8;
	mad.lo.s32 	%r35, %r1, %r9, %r34;
	div.s32 	%r36, %r3, %r5;
	mul.lo.s32 	%r37, %r36, %r5;
	sub.s32 	%r38, %r3, %r37;
	mul.lo.s32 	%r39, %r38, %r7;
	add.s32 	%r40, %r35, %r39;
	mul.lo.s32 	%r41, %r36, %r6;
	add.s32 	%r42, %r40, %r41;
	mad.lo.s32 	%r43, %r33, %r9, %r34;
	add.s32 	%r44, %r43, %r39;
	add.s32 	%r45, %r44, %r41;
	mul.lo.s32 	%r46, %r2, %r16;
	mad.lo.s32 	%r47, %r1, %r17, %r46;
	mul.lo.s32 	%r48, %r38, %r15;
	add.s32 	%r49, %r47, %r48;
	mul.lo.s32 	%r50, %r36, %r14;
	add.s32 	%r51, %r49, %r50;
	mad.lo.s32 	%r52, %r33, %r17, %r46;
	add.s32 	%r53, %r52, %r48;
	add.s32 	%r54, %r53, %r50;
	mul.lo.s32 	%r55, %r2, %r12;
	mad.lo.s32 	%r56, %r1, %r13, %r55;
	mul.lo.s32 	%r57, %r38, %r11;
	add.s32 	%r58, %r56, %r57;
	mul.lo.s32 	%r59, %r36, %r10;
	add.s32 	%r60, %r58, %r59;
	mad.lo.s32 	%r61, %r33, %r13, %r55;
	add.s32 	%r62, %r61, %r57;
	add.s32 	%r63, %r62, %r59;
	mul.wide.s32 	%rd9, %r42, 2;
	add.s64 	%rd10, %rd8, %rd9;
	ld.global.u16 	%rs2, [%rd10];
	mul.wide.s32 	%rd11, %r60, 2;
	add.s64 	%rd12, %rd7, %rd11;
	ld.global.u16 	%rs3, [%rd12];
	// begin inline asm
	{mul.f16 %rs1,%rs2,%rs3;
}
	// end inline asm
	mul.wide.s32 	%rd13, %r45, 2;
	add.s64 	%rd14, %rd8, %rd13;
	ld.global.u16 	%rs5, [%rd14];
	add.s64 	%rd15, %rd6, %rd11;
	ld.global.u16 	%rs6, [%rd15];
	// begin inline asm
	{mul.f16 %rs4,%rs5,%rs6;
}
	// end inline asm
	// begin inline asm
	{sub.f16 %rs7,%rs1,%rs4;
}
	// end inline asm
	mul.wide.s32 	%rd16, %r51, 2;
	add.s64 	%rd17, %rd5, %rd16;
	st.global.u16 	[%rd17], %rs7;
	ld.global.u16 	%rs11, [%rd14];
	mul.wide.s32 	%rd18, %r63, 2;
	add.s64 	%rd19, %rd7, %rd18;
	ld.global.u16 	%rs12, [%rd19];
	// begin inline asm
	{mul.f16 %rs10,%rs11,%rs12;
}
	// end inline asm
	ld.global.u16 	%rs14, [%rd10];
	add.s64 	%rd20, %rd6, %rd18;
	ld.global.u16 	%rs15, [%rd20];
	// begin inline asm
	{mul.f16 %rs13,%rs14,%rs15;
}
	// end inline asm
	// begin inline asm
	{add.f16 %rs16,%rs10,%rs13;
}
	// end inline asm
	mul.wide.s32 	%rd21, %r54, 2;
	add.s64 	%rd22, %rd5, %rd21;
	st.global.u16 	[%rd22], %rs16;

$L__BB9_2:
	ret;

}
	// .globl	rms_norm_small_f32
.visible .entry rms_norm_small_f32(
	.param .u64 rms_norm_small_f32_param_0,
	.param .u64 rms_norm_small_f32_param_1,
	.param .u32 rms_norm_small_f32_param_2,
	.param .u32 rms_norm_small_f32_param_3,
	.param .u32 rms_norm_small_f32_param_4,
	.param .u32 rms_norm_small_f32_param_5,
	.param .u32 rms_norm_small_f32_param_6,
	.param .u32 rms_norm_small_f32_param_7,
	.param .f32 rms_norm_small_f32_param_8
)
{
	.reg .pred 	%p<10>;
	.reg .f32 	%f<26>;
	.reg .b32 	%r<40>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd4, [rms_norm_small_f32_param_0];
	ld.param.u64 	%rd3, [rms_norm_small_f32_param_1];
	ld.param.u32 	%r9, [rms_norm_small_f32_param_3];
	ld.param.u32 	%r11, [rms_norm_small_f32_param_4];
	ld.param.u32 	%r12, [rms_norm_small_f32_param_5];
	ld.param.u32 	%r10, [rms_norm_small_f32_param_6];
	ld.param.u32 	%r13, [rms_norm_small_f32_param_7];
	ld.param.f32 	%f6, [rms_norm_small_f32_param_8];
	cvta.to.global.u64 	%rd1, %rd4;
	mov.u32 	%r14, %ctaid.x;
	div.u32 	%r15, %r14, %r11;
	mul.lo.s32 	%r16, %r15, %r11;
	sub.s32 	%r17, %r14, %r16;
	mul.lo.s32 	%r18, %r17, %r13;
	mad.lo.s32 	%r1, %r15, %r12, %r18;
	mov.u32 	%r39, %tid.x;
	setp.ge.s32 	%p1, %r39, %r9;
	mov.f32 	%f25, 0f00000000;
	@%p1 bra 	$L__BB10_3;

	mov.f32 	%f25, 0f00000000;
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r38, %r39;

$L__BB10_2:
	mad.lo.s32 	%r19, %r38, %r10, %r1;
	mul.wide.s32 	%rd5, %r19, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.f32 	%f9, [%rd6];
	fma.rn.f32 	%f25, %f9, %f9, %f25;
	add.s32 	%r38, %r38, %r3;
	setp.lt.s32 	%p2, %r38, %r9;
	@%p2 bra 	$L__BB10_2;

$L__BB10_3:
	mov.b32 	%r20, %f25;
	mov.u32 	%r21, 31;
	mov.u32 	%r22, 16;
	mov.u32 	%r23, -1;
	shfl.sync.bfly.b32 	%r24|%p3, %r20, %r22, %r21, %r23;
	mov.b32 	%f10, %r24;
	add.f32 	%f11, %f25, %f10;
	mov.b32 	%r25, %f11;
	mov.u32 	%r26, 8;
	shfl.sync.bfly.b32 	%r27|%p4, %r25, %r26, %r21, %r23;
	mov.b32 	%f12, %r27;
	add.f32 	%f13, %f11, %f12;
	mov.b32 	%r28, %f13;
	mov.u32 	%r29, 4;
	shfl.sync.bfly.b32 	%r30|%p5, %r28, %r29, %r21, %r23;
	mov.b32 	%f14, %r30;
	add.f32 	%f15, %f13, %f14;
	mov.b32 	%r31, %f15;
	mov.u32 	%r32, 2;
	shfl.sync.bfly.b32 	%r33|%p6, %r31, %r32, %r21, %r23;
	mov.b32 	%f16, %r33;
	add.f32 	%f17, %f15, %f16;
	mov.b32 	%r34, %f17;
	mov.u32 	%r35, 1;
	shfl.sync.bfly.b32 	%r36|%p7, %r34, %r35, %r21, %r23;
	mov.b32 	%f18, %r36;
	add.f32 	%f4, %f17, %f18;
	@%p1 bra 	$L__BB10_6;

	mov.u32 	%r6, %ntid.x;
	cvta.to.global.u64 	%rd2, %rd3;
	cvt.rn.f32.s32 	%f19, %r9;
	div.rn.f32 	%f20, %f4, %f19;
	add.f32 	%f21, %f20, %f6;
	rsqrt.approx.f32 	%f5, %f21;

$L__BB10_5:
	mad.lo.s32 	%r37, %r39, %r10, %r1;
	mul.wide.s32 	%rd7, %r37, 4;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.f32 	%f22, [%rd8];
	mul.f32 	%f23, %f5, %f22;
	add.s64 	%rd9, %rd2, %rd7;
	st.global.f32 	[%rd9], %f23;
	add.s32 	%r39, %r39, %r6;
	setp.lt.s32 	%p9, %r39, %r9;
	@%p9 bra 	$L__BB10_5;

$L__BB10_6:
	ret;

}
	// .globl	rms_norm_f32
.visible .entry rms_norm_f32(
	.param .u64 rms_norm_f32_param_0,
	.param .u64 rms_norm_f32_param_1,
	.param .u32 rms_norm_f32_param_2,
	.param .u32 rms_norm_f32_param_3,
	.param .u32 rms_norm_f32_param_4,
	.param .u32 rms_norm_f32_param_5,
	.param .u32 rms_norm_f32_param_6,
	.param .u32 rms_norm_f32_param_7,
	.param .f32 rms_norm_f32_param_8
)
{
	.reg .pred 	%p<16>;
	.reg .f32 	%f<37>;
	.reg .b32 	%r<65>;
	.reg .b64 	%rd<10>;
	// demoted variable
	.shared .align 4 .b8 _ZZ12rms_norm_f32E5s_sum[128];

	ld.param.u64 	%rd4, [rms_norm_f32_param_0];
	ld.param.u64 	%rd3, [rms_norm_f32_param_1];
	ld.param.u32 	%r10, [rms_norm_f32_param_3];
	ld.param.u32 	%r12, [rms_norm_f32_param_4];
	ld.param.u32 	%r13, [rms_norm_f32_param_5];
	ld.param.u32 	%r11, [rms_norm_f32_param_6];
	ld.param.u32 	%r14, [rms_norm_f32_param_7];
	ld.param.f32 	%f7, [rms_norm_f32_param_8];
	cvta.to.global.u64 	%rd1, %rd4;
	mov.u32 	%r15, %ctaid.x;
	div.u32 	%r16, %r15, %r12;
	mul.lo.s32 	%r17, %r16, %r12;
	sub.s32 	%r18, %r15, %r17;
	mul.lo.s32 	%r19, %r18, %r14;
	mad.lo.s32 	%r1, %r16, %r13, %r19;
	mov.u32 	%r64, %tid.x;
	setp.ge.s32 	%p1, %r64, %r10;
	mov.f32 	%f36, 0f00000000;
	@%p1 bra 	$L__BB11_3;

	mov.f32 	%f36, 0f00000000;
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r63, %r64;

$L__BB11_2:
	mad.lo.s32 	%r20, %r63, %r11, %r1;
	mul.wide.s32 	%rd5, %r20, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.f32 	%f10, [%rd6];
	fma.rn.f32 	%f36, %f10, %f10, %f36;
	add.s32 	%r63, %r63, %r3;
	setp.lt.s32 	%p2, %r63, %r10;
	@%p2 bra 	$L__BB11_2;

$L__BB11_3:
	mov.b32 	%r21, %f36;
	mov.u32 	%r22, 31;
	mov.u32 	%r23, 16;
	mov.u32 	%r24, -1;
	shfl.sync.bfly.b32 	%r25|%p3, %r21, %r23, %r22, %r24;
	mov.b32 	%f11, %r25;
	add.f32 	%f12, %f36, %f11;
	mov.b32 	%r26, %f12;
	mov.u32 	%r27, 8;
	shfl.sync.bfly.b32 	%r28|%p4, %r26, %r27, %r22, %r24;
	mov.b32 	%f13, %r28;
	add.f32 	%f14, %f12, %f13;
	mov.b32 	%r29, %f14;
	mov.u32 	%r30, 4;
	shfl.sync.bfly.b32 	%r31|%p5, %r29, %r30, %r22, %r24;
	mov.b32 	%f15, %r31;
	add.f32 	%f16, %f14, %f15;
	mov.b32 	%r32, %f16;
	mov.u32 	%r33, 2;
	shfl.sync.bfly.b32 	%r34|%p6, %r32, %r33, %r22, %r24;
	mov.b32 	%f17, %r34;
	add.f32 	%f18, %f16, %f17;
	mov.b32 	%r35, %f18;
	mov.u32 	%r36, 1;
	shfl.sync.bfly.b32 	%r37|%p7, %r35, %r36, %r22, %r24;
	mov.b32 	%f19, %r37;
	add.f32 	%f4, %f18, %f19;
	and.b32  	%r6, %r64, 31;
	setp.ne.s32 	%p8, %r6, 0;
	@%p8 bra 	$L__BB11_5;

	shr.u32 	%r38, %r64, 3;
	and.b32  	%r39, %r38, 536870908;
	mov.u32 	%r40, _ZZ12rms_norm_f32E5s_sum;
	add.s32 	%r41, %r40, %r39;
	st.shared.f32 	[%r41], %f4;

$L__BB11_5:
	bar.sync 	0;
	shl.b32 	%r42, %r6, 2;
	mov.u32 	%r43, _ZZ12rms_norm_f32E5s_sum;
	add.s32 	%r44, %r43, %r42;
	ld.shared.f32 	%f20, [%r44];
	mov.b32 	%r46, %f20;
	shfl.sync.bfly.b32 	%r50|%p10, %r46, %r23, %r22, %r24;
	mov.b32 	%f21, %r50;
	add.f32 	%f22, %f20, %f21;
	mov.b32 	%r51, %f22;
	shfl.sync.bfly.b32 	%r53|%p11, %r51, %r27, %r22, %r24;
	mov.b32 	%f23, %r53;
	add.f32 	%f24, %f22, %f23;
	mov.b32 	%r54, %f24;
	shfl.sync.bfly.b32 	%r56|%p12, %r54, %r30, %r22, %r24;
	mov.b32 	%f25, %r56;
	add.f32 	%f26, %f24, %f25;
	mov.b32 	%r57, %f26;
	shfl.sync.bfly.b32 	%r58|%p13, %r57, %r33, %r22, %r24;
	mov.b32 	%f27, %r58;
	add.f32 	%f28, %f26, %f27;
	mov.b32 	%r59, %f28;
	shfl.sync.bfly.b32 	%r61|%p14, %r59, %r36, %r22, %r24;
	mov.b32 	%f29, %r61;
	add.f32 	%f5, %f28, %f29;
	@%p1 bra 	$L__BB11_8;

	mov.u32 	%r7, %ntid.x;
	cvta.to.global.u64 	%rd2, %rd3;
	cvt.rn.f32.s32 	%f30, %r10;
	div.rn.f32 	%f31, %f5, %f30;
	add.f32 	%f32, %f31, %f7;
	rsqrt.approx.f32 	%f6, %f32;

$L__BB11_7:
	mad.lo.s32 	%r62, %r64, %r11, %r1;
	mul.wide.s32 	%rd7, %r62, 4;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.f32 	%f33, [%rd8];
	mul.f32 	%f34, %f6, %f33;
	add.s64 	%rd9, %rd2, %rd7;
	st.global.f32 	[%rd9], %f34;
	add.s32 	%r64, %r64, %r7;
	setp.lt.s32 	%p15, %r64, %r10;
	@%p15 bra 	$L__BB11_7;

$L__BB11_8:
	ret;

}
	// .globl	rms_norm_small_f16
.visible .entry rms_norm_small_f16(
	.param .u64 rms_norm_small_f16_param_0,
	.param .u64 rms_norm_small_f16_param_1,
	.param .u32 rms_norm_small_f16_param_2,
	.param .u32 rms_norm_small_f16_param_3,
	.param .u32 rms_norm_small_f16_param_4,
	.param .u32 rms_norm_small_f16_param_5,
	.param .u32 rms_norm_small_f16_param_6,
	.param .u32 rms_norm_small_f16_param_7,
	.param .align 2 .b8 rms_norm_small_f16_param_8[2]
)
{
	.reg .pred 	%p<10>;
	.reg .b16 	%rs<8>;
	.reg .f32 	%f<25>;
	.reg .b32 	%r<40>;
	.reg .b64 	%rd<10>;


	ld.param.u16 	%rs1, [rms_norm_small_f16_param_8];
	ld.param.u64 	%rd4, [rms_norm_small_f16_param_0];
	ld.param.u64 	%rd3, [rms_norm_small_f16_param_1];
	ld.param.u32 	%r9, [rms_norm_small_f16_param_3];
	ld.param.u32 	%r11, [rms_norm_small_f16_param_4];
	ld.param.u32 	%r12, [rms_norm_small_f16_param_5];
	ld.param.u32 	%r10, [rms_norm_small_f16_param_6];
	ld.param.u32 	%r13, [rms_norm_small_f16_param_7];
	cvta.to.global.u64 	%rd1, %rd4;
	mov.u32 	%r14, %ctaid.x;
	div.u32 	%r15, %r14, %r11;
	mul.lo.s32 	%r16, %r15, %r11;
	sub.s32 	%r17, %r14, %r16;
	mul.lo.s32 	%r18, %r17, %r13;
	mad.lo.s32 	%r1, %r15, %r12, %r18;
	mov.u32 	%r39, %tid.x;
	setp.ge.s32 	%p1, %r39, %r9;
	mov.f32 	%f24, 0f00000000;
	@%p1 bra 	$L__BB12_3;

	mov.f32 	%f24, 0f00000000;
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r38, %r39;

$L__BB12_2:
	mad.lo.s32 	%r19, %r38, %r10, %r1;
	mul.wide.s32 	%rd5, %r19, 2;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.u16 	%rs2, [%rd6];
	// begin inline asm
	{  cvt.f32.f16 %f8, %rs2;}

	// end inline asm
	fma.rn.f32 	%f24, %f8, %f8, %f24;
	add.s32 	%r38, %r38, %r3;
	setp.lt.s32 	%p2, %r38, %r9;
	@%p2 bra 	$L__BB12_2;

$L__BB12_3:
	mov.b32 	%r20, %f24;
	mov.u32 	%r21, 31;
	mov.u32 	%r22, 16;
	mov.u32 	%r23, -1;
	shfl.sync.bfly.b32 	%r24|%p3, %r20, %r22, %r21, %r23;
	mov.b32 	%f10, %r24;
	add.f32 	%f11, %f24, %f10;
	mov.b32 	%r25, %f11;
	mov.u32 	%r26, 8;
	shfl.sync.bfly.b32 	%r27|%p4, %r25, %r26, %r21, %r23;
	mov.b32 	%f12, %r27;
	add.f32 	%f13, %f11, %f12;
	mov.b32 	%r28, %f13;
	mov.u32 	%r29, 4;
	shfl.sync.bfly.b32 	%r30|%p5, %r28, %r29, %r21, %r23;
	mov.b32 	%f14, %r30;
	add.f32 	%f15, %f13, %f14;
	mov.b32 	%r31, %f15;
	mov.u32 	%r32, 2;
	shfl.sync.bfly.b32 	%r33|%p6, %r31, %r32, %r21, %r23;
	mov.b32 	%f16, %r33;
	add.f32 	%f17, %f15, %f16;
	mov.b32 	%r34, %f17;
	mov.u32 	%r35, 1;
	shfl.sync.bfly.b32 	%r36|%p7, %r34, %r35, %r21, %r23;
	mov.b32 	%f18, %r36;
	add.f32 	%f19, %f17, %f18;
	// begin inline asm
	{  cvt.f32.f16 %f9, %rs1;}

	// end inline asm
	cvt.rn.f32.s32 	%f20, %r9;
	div.rn.f32 	%f21, %f19, %f20;
	add.f32 	%f4, %f21, %f9;
	@%p1 bra 	$L__BB12_6;

	mov.u32 	%r6, %ntid.x;
	cvta.to.global.u64 	%rd2, %rd3;
	rsqrt.approx.f32 	%f5, %f4;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs4, %f5;}

	// end inline asm

$L__BB12_5:
	mad.lo.s32 	%r37, %r39, %r10, %r1;
	mul.wide.s32 	%rd7, %r37, 2;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.u16 	%rs7, [%rd8];
	// begin inline asm
	{mul.f16 %rs5,%rs4,%rs7;
}
	// end inline asm
	add.s64 	%rd9, %rd2, %rd7;
	st.global.u16 	[%rd9], %rs5;
	add.s32 	%r39, %r39, %r6;
	setp.lt.s32 	%p9, %r39, %r9;
	@%p9 bra 	$L__BB12_5;

$L__BB12_6:
	ret;

}
	// .globl	rms_norm_f16
.visible .entry rms_norm_f16(
	.param .u64 rms_norm_f16_param_0,
	.param .u64 rms_norm_f16_param_1,
	.param .u32 rms_norm_f16_param_2,
	.param .u32 rms_norm_f16_param_3,
	.param .u32 rms_norm_f16_param_4,
	.param .u32 rms_norm_f16_param_5,
	.param .u32 rms_norm_f16_param_6,
	.param .u32 rms_norm_f16_param_7,
	.param .align 2 .b8 rms_norm_f16_param_8[2]
)
{
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<8>;
	.reg .f32 	%f<36>;
	.reg .b32 	%r<65>;
	.reg .b64 	%rd<10>;
	// demoted variable
	.shared .align 4 .b8 _ZZ12rms_norm_f16E5s_sum[128];

	ld.param.u16 	%rs1, [rms_norm_f16_param_8];
	ld.param.u64 	%rd4, [rms_norm_f16_param_0];
	ld.param.u64 	%rd3, [rms_norm_f16_param_1];
	ld.param.u32 	%r10, [rms_norm_f16_param_3];
	ld.param.u32 	%r12, [rms_norm_f16_param_4];
	ld.param.u32 	%r13, [rms_norm_f16_param_5];
	ld.param.u32 	%r11, [rms_norm_f16_param_6];
	ld.param.u32 	%r14, [rms_norm_f16_param_7];
	cvta.to.global.u64 	%rd1, %rd4;
	mov.u32 	%r15, %ctaid.x;
	div.u32 	%r16, %r15, %r12;
	mul.lo.s32 	%r17, %r16, %r12;
	sub.s32 	%r18, %r15, %r17;
	mul.lo.s32 	%r19, %r18, %r14;
	mad.lo.s32 	%r1, %r16, %r13, %r19;
	mov.u32 	%r64, %tid.x;
	setp.ge.s32 	%p1, %r64, %r10;
	mov.f32 	%f35, 0f00000000;
	@%p1 bra 	$L__BB13_3;

	mov.f32 	%f35, 0f00000000;
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r63, %r64;

$L__BB13_2:
	mad.lo.s32 	%r20, %r63, %r11, %r1;
	mul.wide.s32 	%rd5, %r20, 2;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.u16 	%rs2, [%rd6];
	// begin inline asm
	{  cvt.f32.f16 %f9, %rs2;}

	// end inline asm
	fma.rn.f32 	%f35, %f9, %f9, %f35;
	add.s32 	%r63, %r63, %r3;
	setp.lt.s32 	%p2, %r63, %r10;
	@%p2 bra 	$L__BB13_2;

$L__BB13_3:
	mov.b32 	%r21, %f35;
	mov.u32 	%r22, 31;
	mov.u32 	%r23, 16;
	mov.u32 	%r24, -1;
	shfl.sync.bfly.b32 	%r25|%p3, %r21, %r23, %r22, %r24;
	mov.b32 	%f10, %r25;
	add.f32 	%f11, %f35, %f10;
	mov.b32 	%r26, %f11;
	mov.u32 	%r27, 8;
	shfl.sync.bfly.b32 	%r28|%p4, %r26, %r27, %r22, %r24;
	mov.b32 	%f12, %r28;
	add.f32 	%f13, %f11, %f12;
	mov.b32 	%r29, %f13;
	mov.u32 	%r30, 4;
	shfl.sync.bfly.b32 	%r31|%p5, %r29, %r30, %r22, %r24;
	mov.b32 	%f14, %r31;
	add.f32 	%f15, %f13, %f14;
	mov.b32 	%r32, %f15;
	mov.u32 	%r33, 2;
	shfl.sync.bfly.b32 	%r34|%p6, %r32, %r33, %r22, %r24;
	mov.b32 	%f16, %r34;
	add.f32 	%f17, %f15, %f16;
	mov.b32 	%r35, %f17;
	mov.u32 	%r36, 1;
	shfl.sync.bfly.b32 	%r37|%p7, %r35, %r36, %r22, %r24;
	mov.b32 	%f18, %r37;
	add.f32 	%f4, %f17, %f18;
	and.b32  	%r6, %r64, 31;
	setp.ne.s32 	%p8, %r6, 0;
	@%p8 bra 	$L__BB13_5;

	shr.u32 	%r38, %r64, 3;
	and.b32  	%r39, %r38, 536870908;
	mov.u32 	%r40, _ZZ12rms_norm_f16E5s_sum;
	add.s32 	%r41, %r40, %r39;
	st.shared.f32 	[%r41], %f4;

$L__BB13_5:
	bar.sync 	0;
	shl.b32 	%r42, %r6, 2;
	mov.u32 	%r43, _ZZ12rms_norm_f16E5s_sum;
	add.s32 	%r44, %r43, %r42;
	ld.shared.f32 	%f20, [%r44];
	mov.b32 	%r46, %f20;
	shfl.sync.bfly.b32 	%r50|%p10, %r46, %r23, %r22, %r24;
	mov.b32 	%f21, %r50;
	add.f32 	%f22, %f20, %f21;
	mov.b32 	%r51, %f22;
	shfl.sync.bfly.b32 	%r53|%p11, %r51, %r27, %r22, %r24;
	mov.b32 	%f23, %r53;
	add.f32 	%f24, %f22, %f23;
	mov.b32 	%r54, %f24;
	shfl.sync.bfly.b32 	%r56|%p12, %r54, %r30, %r22, %r24;
	mov.b32 	%f25, %r56;
	add.f32 	%f26, %f24, %f25;
	mov.b32 	%r57, %f26;
	shfl.sync.bfly.b32 	%r58|%p13, %r57, %r33, %r22, %r24;
	mov.b32 	%f27, %r58;
	add.f32 	%f28, %f26, %f27;
	mov.b32 	%r59, %f28;
	shfl.sync.bfly.b32 	%r61|%p14, %r59, %r36, %r22, %r24;
	mov.b32 	%f29, %r61;
	add.f32 	%f30, %f28, %f29;
	// begin inline asm
	{  cvt.f32.f16 %f19, %rs1;}

	// end inline asm
	cvt.rn.f32.s32 	%f31, %r10;
	div.rn.f32 	%f32, %f30, %f31;
	add.f32 	%f5, %f32, %f19;
	@%p1 bra 	$L__BB13_8;

	mov.u32 	%r7, %ntid.x;
	cvta.to.global.u64 	%rd2, %rd3;
	rsqrt.approx.f32 	%f6, %f5;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs4, %f6;}

	// end inline asm

$L__BB13_7:
	mad.lo.s32 	%r62, %r64, %r11, %r1;
	mul.wide.s32 	%rd7, %r62, 2;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.u16 	%rs7, [%rd8];
	// begin inline asm
	{mul.f16 %rs5,%rs4,%rs7;
}
	// end inline asm
	add.s64 	%rd9, %rd2, %rd7;
	st.global.u16 	[%rd9], %rs5;
	add.s32 	%r64, %r64, %r7;
	setp.lt.s32 	%p15, %r64, %r10;
	@%p15 bra 	$L__BB13_7;

$L__BB13_8:
	ret;

}
	// .globl	softmax_small_f32
.visible .entry softmax_small_f32(
	.param .u64 softmax_small_f32_param_0,
	.param .u64 softmax_small_f32_param_1,
	.param .u32 softmax_small_f32_param_2,
	.param .u32 softmax_small_f32_param_3,
	.param .u32 softmax_small_f32_param_4,
	.param .u32 softmax_small_f32_param_5,
	.param .u32 softmax_small_f32_param_6,
	.param .u32 softmax_small_f32_param_7
)
{
	.reg .pred 	%p<17>;
	.reg .f32 	%f<57>;
	.reg .b32 	%r<64>;
	.reg .b64 	%rd<19>;


	ld.param.u64 	%rd4, [softmax_small_f32_param_0];
	ld.param.u64 	%rd5, [softmax_small_f32_param_1];
	ld.param.u32 	%r11, [softmax_small_f32_param_3];
	ld.param.u32 	%r13, [softmax_small_f32_param_4];
	ld.param.u32 	%r14, [softmax_small_f32_param_5];
	ld.param.u32 	%r12, [softmax_small_f32_param_6];
	ld.param.u32 	%r15, [softmax_small_f32_param_7];
	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd5;
	mov.u32 	%r16, %ctaid.x;
	div.u32 	%r17, %r16, %r13;
	mul.lo.s32 	%r18, %r17, %r13;
	sub.s32 	%r19, %r16, %r18;
	mul.lo.s32 	%r20, %r19, %r15;
	mad.lo.s32 	%r21, %r17, %r14, %r20;
	cvt.s64.s32 	%rd3, %r21;
	mov.u32 	%r63, %tid.x;
	setp.ge.s32 	%p1, %r63, %r11;
	mov.f32 	%f54, 0fFF800000;
	@%p1 bra 	$L__BB14_3;

	mov.f32 	%f54, 0fFF800000;
	mov.u32 	%r2, %ntid.x;
	mov.u32 	%r61, %r63;

$L__BB14_2:
	mul.lo.s32 	%r22, %r61, %r12;
	cvt.s64.s32 	%rd6, %r22;
	add.s64 	%rd7, %rd6, %rd3;
	shl.b64 	%rd8, %rd7, 2;
	add.s64 	%rd9, %rd1, %rd8;
	ld.global.f32 	%f12, [%rd9];
	max.f32 	%f54, %f54, %f12;
	add.s32 	%r61, %r61, %r2;
	setp.lt.s32 	%p2, %r61, %r11;
	@%p2 bra 	$L__BB14_2;

$L__BB14_3:
	mov.b32 	%r23, %f54;
	mov.u32 	%r24, 31;
	mov.u32 	%r25, 16;
	mov.u32 	%r26, -1;
	shfl.sync.bfly.b32 	%r27|%p3, %r23, %r25, %r24, %r26;
	mov.b32 	%f14, %r27;
	max.f32 	%f15, %f54, %f14;
	mov.b32 	%r28, %f15;
	mov.u32 	%r29, 8;
	shfl.sync.bfly.b32 	%r30|%p4, %r28, %r29, %r24, %r26;
	mov.b32 	%f16, %r30;
	max.f32 	%f17, %f15, %f16;
	mov.b32 	%r31, %f17;
	mov.u32 	%r32, 4;
	shfl.sync.bfly.b32 	%r33|%p5, %r31, %r32, %r24, %r26;
	mov.b32 	%f18, %r33;
	max.f32 	%f19, %f17, %f18;
	mov.b32 	%r34, %f19;
	mov.u32 	%r35, 2;
	shfl.sync.bfly.b32 	%r36|%p6, %r34, %r35, %r24, %r26;
	mov.b32 	%f20, %r36;
	max.f32 	%f21, %f19, %f20;
	mov.b32 	%r37, %f21;
	mov.u32 	%r38, 1;
	shfl.sync.bfly.b32 	%r39|%p7, %r37, %r38, %r24, %r26;
	mov.b32 	%f22, %r39;
	max.f32 	%f4, %f21, %f22;
	mov.f32 	%f56, 0f00000000;
	@%p1 bra 	$L__BB14_6;

	mov.f32 	%f56, 0f00000000;
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r62, %r63;

$L__BB14_5:
	mul.lo.s32 	%r40, %r62, %r12;
	cvt.s64.s32 	%rd10, %r40;
	add.s64 	%rd11, %rd10, %rd3;
	shl.b64 	%rd12, %rd11, 2;
	add.s64 	%rd13, %rd1, %rd12;
	ld.global.f32 	%f24, [%rd13];
	sub.f32 	%f25, %f24, %f4;
	mov.f32 	%f26, 0f3F000000;
	mov.f32 	%f27, 0f3BBB989D;
	fma.rn.f32 	%f28, %f25, %f27, %f26;
	cvt.sat.f32.f32 	%f29, %f28;
	mov.f32 	%f30, 0f4B400001;
	mov.f32 	%f31, 0f437C0000;
	fma.rm.f32 	%f32, %f29, %f31, %f30;
	add.f32 	%f33, %f32, 0fCB40007F;
	neg.f32 	%f34, %f33;
	mov.f32 	%f35, 0f3FB8AA3B;
	fma.rn.f32 	%f36, %f25, %f35, %f34;
	mov.f32 	%f37, 0f32A57060;
	fma.rn.f32 	%f38, %f25, %f37, %f36;
	mov.b32 	%r41, %f32;
	shl.b32 	%r42, %r41, 23;
	mov.b32 	%f39, %r42;
	ex2.approx.ftz.f32 	%f40, %f38;
	mul.f32 	%f41, %f40, %f39;
	add.f32 	%f56, %f56, %f41;
	add.s64 	%rd14, %rd2, %rd12;
	st.global.f32 	[%rd14], %f41;
	add.s32 	%r62, %r62, %r5;
	setp.lt.s32 	%p9, %r62, %r11;
	@%p9 bra 	$L__BB14_5;

$L__BB14_6:
	mov.b32 	%r43, %f56;
	shfl.sync.bfly.b32 	%r47|%p10, %r43, %r25, %r24, %r26;
	mov.b32 	%f42, %r47;
	add.f32 	%f43, %f56, %f42;
	mov.b32 	%r48, %f43;
	shfl.sync.bfly.b32 	%r50|%p11, %r48, %r29, %r24, %r26;
	mov.b32 	%f44, %r50;
	add.f32 	%f45, %f43, %f44;
	mov.b32 	%r51, %f45;
	shfl.sync.bfly.b32 	%r53|%p12, %r51, %r32, %r24, %r26;
	mov.b32 	%f46, %r53;
	add.f32 	%f47, %f45, %f46;
	mov.b32 	%r54, %f47;
	shfl.sync.bfly.b32 	%r56|%p13, %r54, %r35, %r24, %r26;
	mov.b32 	%f48, %r56;
	add.f32 	%f49, %f47, %f48;
	mov.b32 	%r57, %f49;
	shfl.sync.bfly.b32 	%r59|%p14, %r57, %r38, %r24, %r26;
	mov.b32 	%f50, %r59;
	add.f32 	%f8, %f49, %f50;
	@%p1 bra 	$L__BB14_9;

	mov.u32 	%r8, %ntid.x;
	rcp.rn.f32 	%f9, %f8;

$L__BB14_8:
	mul.lo.s32 	%r60, %r63, %r12;
	cvt.s64.s32 	%rd15, %r60;
	add.s64 	%rd16, %rd15, %rd3;
	shl.b64 	%rd17, %rd16, 2;
	add.s64 	%rd18, %rd2, %rd17;
	ld.global.f32 	%f51, [%rd18];
	mul.f32 	%f52, %f9, %f51;
	st.global.f32 	[%rd18], %f52;
	add.s32 	%r63, %r63, %r8;
	setp.lt.s32 	%p16, %r63, %r11;
	@%p16 bra 	$L__BB14_8;

$L__BB14_9:
	ret;

}
	// .globl	softmax_f32
.visible .entry softmax_f32(
	.param .u64 softmax_f32_param_0,
	.param .u64 softmax_f32_param_1,
	.param .u32 softmax_f32_param_2,
	.param .u32 softmax_f32_param_3,
	.param .u32 softmax_f32_param_4,
	.param .u32 softmax_f32_param_5,
	.param .u32 softmax_f32_param_6,
	.param .u32 softmax_f32_param_7
)
{
	.reg .pred 	%p<31>;
	.reg .f32 	%f<79>;
	.reg .b32 	%r<114>;
	.reg .b64 	%rd<19>;
	// demoted variable
	.shared .align 4 .b8 _ZZ11softmax_f32E5s_max[128];
	// demoted variable
	.shared .align 4 .b8 _ZZ11softmax_f32E5s_sum[128];

	ld.param.u64 	%rd4, [softmax_f32_param_0];
	ld.param.u64 	%rd5, [softmax_f32_param_1];
	ld.param.u32 	%r15, [softmax_f32_param_3];
	ld.param.u32 	%r17, [softmax_f32_param_4];
	ld.param.u32 	%r18, [softmax_f32_param_5];
	ld.param.u32 	%r16, [softmax_f32_param_6];
	ld.param.u32 	%r19, [softmax_f32_param_7];
	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd5;
	mov.u32 	%r20, %ctaid.x;
	div.u32 	%r21, %r20, %r17;
	mul.lo.s32 	%r22, %r21, %r17;
	sub.s32 	%r23, %r20, %r22;
	mul.lo.s32 	%r24, %r23, %r19;
	mad.lo.s32 	%r25, %r21, %r18, %r24;
	cvt.s64.s32 	%rd3, %r25;
	mov.u32 	%r113, %tid.x;
	shr.u32 	%r2, %r113, 5;
	and.b32  	%r3, %r113, 31;
	setp.ge.s32 	%p1, %r113, %r15;
	mov.f32 	%f76, 0fFF800000;
	@%p1 bra 	$L__BB15_3;

	mov.f32 	%f76, 0fFF800000;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r111, %r113;

$L__BB15_2:
	mul.lo.s32 	%r26, %r111, %r16;
	cvt.s64.s32 	%rd6, %r26;
	add.s64 	%rd7, %rd6, %rd3;
	shl.b64 	%rd8, %rd7, 2;
	add.s64 	%rd9, %rd1, %rd8;
	ld.global.f32 	%f14, [%rd9];
	max.f32 	%f76, %f76, %f14;
	add.s32 	%r111, %r111, %r4;
	setp.lt.s32 	%p2, %r111, %r15;
	@%p2 bra 	$L__BB15_2;

$L__BB15_3:
	mov.b32 	%r27, %f76;
	mov.u32 	%r28, 31;
	mov.u32 	%r29, 16;
	mov.u32 	%r30, -1;
	shfl.sync.bfly.b32 	%r31|%p3, %r27, %r29, %r28, %r30;
	mov.b32 	%f15, %r31;
	max.f32 	%f16, %f76, %f15;
	mov.b32 	%r32, %f16;
	mov.u32 	%r33, 8;
	shfl.sync.bfly.b32 	%r34|%p4, %r32, %r33, %r28, %r30;
	mov.b32 	%f17, %r34;
	max.f32 	%f18, %f16, %f17;
	mov.b32 	%r35, %f18;
	mov.u32 	%r36, 4;
	shfl.sync.bfly.b32 	%r37|%p5, %r35, %r36, %r28, %r30;
	mov.b32 	%f19, %r37;
	max.f32 	%f20, %f18, %f19;
	mov.b32 	%r38, %f20;
	mov.u32 	%r39, 2;
	shfl.sync.bfly.b32 	%r40|%p6, %r38, %r39, %r28, %r30;
	mov.b32 	%f21, %r40;
	max.f32 	%f22, %f20, %f21;
	mov.b32 	%r41, %f22;
	mov.u32 	%r42, 1;
	shfl.sync.bfly.b32 	%r43|%p7, %r41, %r42, %r28, %r30;
	mov.b32 	%f23, %r43;
	max.f32 	%f4, %f22, %f23;
	shl.b32 	%r44, %r3, 2;
	mov.u32 	%r45, _ZZ11softmax_f32E5s_max;
	add.s32 	%r7, %r45, %r44;
	setp.ne.s32 	%p8, %r2, 0;
	@%p8 bra 	$L__BB15_5;

	mov.u32 	%r46, -8388608;
	st.shared.u32 	[%r7], %r46;

$L__BB15_5:
	bar.sync 	0;
	setp.ne.s32 	%p9, %r3, 0;
	@%p9 bra 	$L__BB15_7;

	shl.b32 	%r47, %r2, 2;
	add.s32 	%r49, %r45, %r47;
	st.shared.f32 	[%r49], %f4;

$L__BB15_7:
	bar.sync 	0;
	ld.shared.f32 	%f25, [%r7];
	mov.b32 	%r50, %f25;
	mov.u32 	%r51, 31;
	mov.u32 	%r52, 16;
	mov.u32 	%r53, -1;
	shfl.sync.bfly.b32 	%r54|%p11, %r50, %r52, %r51, %r53;
	mov.b32 	%f26, %r54;
	max.f32 	%f27, %f25, %f26;
	mov.b32 	%r55, %f27;
	mov.u32 	%r56, 8;
	shfl.sync.bfly.b32 	%r57|%p12, %r55, %r56, %r51, %r53;
	mov.b32 	%f28, %r57;
	max.f32 	%f29, %f27, %f28;
	mov.b32 	%r58, %f29;
	mov.u32 	%r59, 4;
	shfl.sync.bfly.b32 	%r60|%p13, %r58, %r59, %r51, %r53;
	mov.b32 	%f30, %r60;
	max.f32 	%f31, %f29, %f30;
	mov.b32 	%r61, %f31;
	mov.u32 	%r62, 2;
	shfl.sync.bfly.b32 	%r63|%p14, %r61, %r62, %r51, %r53;
	mov.b32 	%f32, %r63;
	max.f32 	%f33, %f31, %f32;
	mov.b32 	%r64, %f33;
	mov.u32 	%r65, 1;
	shfl.sync.bfly.b32 	%r66|%p15, %r64, %r65, %r51, %r53;
	mov.b32 	%f34, %r66;
	max.f32 	%f5, %f33, %f34;
	mov.f32 	%f78, 0f00000000;
	@%p1 bra 	$L__BB15_10;

	mov.f32 	%f78, 0f00000000;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r112, %r113;

$L__BB15_9:
	mul.lo.s32 	%r67, %r112, %r16;
	cvt.s64.s32 	%rd10, %r67;
	add.s64 	%rd11, %rd10, %rd3;
	shl.b64 	%rd12, %rd11, 2;
	add.s64 	%rd13, %rd1, %rd12;
	ld.global.f32 	%f36, [%rd13];
	sub.f32 	%f37, %f36, %f5;
	mov.f32 	%f38, 0f3F000000;
	mov.f32 	%f39, 0f3BBB989D;
	fma.rn.f32 	%f40, %f37, %f39, %f38;
	cvt.sat.f32.f32 	%f41, %f40;
	mov.f32 	%f42, 0f4B400001;
	mov.f32 	%f43, 0f437C0000;
	fma.rm.f32 	%f44, %f41, %f43, %f42;
	add.f32 	%f45, %f44, 0fCB40007F;
	neg.f32 	%f46, %f45;
	mov.f32 	%f47, 0f3FB8AA3B;
	fma.rn.f32 	%f48, %f37, %f47, %f46;
	mov.f32 	%f49, 0f32A57060;
	fma.rn.f32 	%f50, %f37, %f49, %f48;
	mov.b32 	%r68, %f44;
	shl.b32 	%r69, %r68, 23;
	mov.b32 	%f51, %r69;
	ex2.approx.ftz.f32 	%f52, %f50;
	mul.f32 	%f53, %f52, %f51;
	add.f32 	%f78, %f78, %f53;
	add.s64 	%rd14, %rd2, %rd12;
	st.global.f32 	[%rd14], %f53;
	add.s32 	%r112, %r112, %r8;
	setp.lt.s32 	%p16, %r112, %r15;
	@%p16 bra 	$L__BB15_9;

$L__BB15_10:
	mov.b32 	%r70, %f78;
	shfl.sync.bfly.b32 	%r74|%p17, %r70, %r52, %r51, %r53;
	mov.b32 	%f54, %r74;
	add.f32 	%f55, %f78, %f54;
	mov.b32 	%r75, %f55;
	shfl.sync.bfly.b32 	%r77|%p18, %r75, %r56, %r51, %r53;
	mov.b32 	%f56, %r77;
	add.f32 	%f57, %f55, %f56;
	mov.b32 	%r78, %f57;
	shfl.sync.bfly.b32 	%r80|%p19, %r78, %r59, %r51, %r53;
	mov.b32 	%f58, %r80;
	add.f32 	%f59, %f57, %f58;
	mov.b32 	%r81, %f59;
	shfl.sync.bfly.b32 	%r83|%p20, %r81, %r62, %r51, %r53;
	mov.b32 	%f60, %r83;
	add.f32 	%f61, %f59, %f60;
	mov.b32 	%r84, %f61;
	shfl.sync.bfly.b32 	%r86|%p21, %r84, %r65, %r51, %r53;
	mov.b32 	%f62, %r86;
	add.f32 	%f9, %f61, %f62;
	mov.u32 	%r88, _ZZ11softmax_f32E5s_sum;
	add.s32 	%r11, %r88, %r44;
	@%p8 bra 	$L__BB15_12;

	mov.u32 	%r89, 0;
	st.shared.u32 	[%r11], %r89;

$L__BB15_12:
	bar.sync 	0;
	@%p9 bra 	$L__BB15_14;

	shl.b32 	%r90, %r2, 2;
	add.s32 	%r92, %r88, %r90;
	st.shared.f32 	[%r92], %f9;

$L__BB15_14:
	bar.sync 	0;
	ld.shared.f32 	%f63, [%r11];
	mov.b32 	%r93, %f63;
	mov.u32 	%r94, 31;
	mov.u32 	%r95, 16;
	mov.u32 	%r96, -1;
	shfl.sync.bfly.b32 	%r97|%p25, %r93, %r95, %r94, %r96;
	mov.b32 	%f64, %r97;
	add.f32 	%f65, %f63, %f64;
	mov.b32 	%r98, %f65;
	mov.u32 	%r99, 8;
	shfl.sync.bfly.b32 	%r100|%p26, %r98, %r99, %r94, %r96;
	mov.b32 	%f66, %r100;
	add.f32 	%f67, %f65, %f66;
	mov.b32 	%r101, %f67;
	mov.u32 	%r102, 4;
	shfl.sync.bfly.b32 	%r103|%p27, %r101, %r102, %r94, %r96;
	mov.b32 	%f68, %r103;
	add.f32 	%f69, %f67, %f68;
	mov.b32 	%r104, %f69;
	mov.u32 	%r105, 2;
	shfl.sync.bfly.b32 	%r106|%p28, %r104, %r105, %r94, %r96;
	mov.b32 	%f70, %r106;
	add.f32 	%f71, %f69, %f70;
	mov.b32 	%r107, %f71;
	mov.u32 	%r108, 1;
	shfl.sync.bfly.b32 	%r109|%p29, %r107, %r108, %r94, %r96;
	mov.b32 	%f72, %r109;
	add.f32 	%f10, %f71, %f72;
	@%p1 bra 	$L__BB15_17;

	mov.u32 	%r12, %ntid.x;
	rcp.rn.f32 	%f11, %f10;

$L__BB15_16:
	mul.lo.s32 	%r110, %r113, %r16;
	cvt.s64.s32 	%rd15, %r110;
	add.s64 	%rd16, %rd15, %rd3;
	shl.b64 	%rd17, %rd16, 2;
	add.s64 	%rd18, %rd2, %rd17;
	ld.global.f32 	%f73, [%rd18];
	mul.f32 	%f74, %f11, %f73;
	st.global.f32 	[%rd18], %f74;
	add.s32 	%r113, %r113, %r12;
	setp.lt.s32 	%p30, %r113, %r15;
	@%p30 bra 	$L__BB15_16;

$L__BB15_17:
	ret;

}
	// .globl	softmax_small_f16
.visible .entry softmax_small_f16(
	.param .u64 softmax_small_f16_param_0,
	.param .u64 softmax_small_f16_param_1,
	.param .u32 softmax_small_f16_param_2,
	.param .u32 softmax_small_f16_param_3,
	.param .u32 softmax_small_f16_param_4,
	.param .u32 softmax_small_f16_param_5,
	.param .u32 softmax_small_f16_param_6,
	.param .u32 softmax_small_f16_param_7
)
{
	.reg .pred 	%p<17>;
	.reg .b16 	%rs<8>;
	.reg .f32 	%f<56>;
	.reg .b32 	%r<64>;
	.reg .b64 	%rd<19>;


	ld.param.u64 	%rd4, [softmax_small_f16_param_0];
	ld.param.u64 	%rd5, [softmax_small_f16_param_1];
	ld.param.u32 	%r11, [softmax_small_f16_param_3];
	ld.param.u32 	%r13, [softmax_small_f16_param_4];
	ld.param.u32 	%r14, [softmax_small_f16_param_5];
	ld.param.u32 	%r12, [softmax_small_f16_param_6];
	ld.param.u32 	%r15, [softmax_small_f16_param_7];
	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd5;
	mov.u32 	%r16, %ctaid.x;
	div.u32 	%r17, %r16, %r13;
	mul.lo.s32 	%r18, %r17, %r13;
	sub.s32 	%r19, %r16, %r18;
	mul.lo.s32 	%r20, %r19, %r15;
	mad.lo.s32 	%r21, %r17, %r14, %r20;
	cvt.s64.s32 	%rd3, %r21;
	mov.u32 	%r63, %tid.x;
	setp.ge.s32 	%p1, %r63, %r11;
	mov.f32 	%f53, 0fFF800000;
	@%p1 bra 	$L__BB16_3;

	mov.f32 	%f53, 0fFF800000;
	mov.u32 	%r2, %ntid.x;
	mov.u32 	%r61, %r63;

$L__BB16_2:
	mul.lo.s32 	%r22, %r61, %r12;
	cvt.s64.s32 	%rd6, %r22;
	add.s64 	%rd7, %rd6, %rd3;
	shl.b64 	%rd8, %rd7, 1;
	add.s64 	%rd9, %rd1, %rd8;
	ld.global.u16 	%rs1, [%rd9];
	// begin inline asm
	{  cvt.f32.f16 %f12, %rs1;}

	// end inline asm
	max.f32 	%f53, %f53, %f12;
	add.s32 	%r61, %r61, %r2;
	setp.lt.s32 	%p2, %r61, %r11;
	@%p2 bra 	$L__BB16_2;

$L__BB16_3:
	mov.b32 	%r23, %f53;
	mov.u32 	%r24, 31;
	mov.u32 	%r25, 16;
	mov.u32 	%r26, -1;
	shfl.sync.bfly.b32 	%r27|%p3, %r23, %r25, %r24, %r26;
	mov.b32 	%f14, %r27;
	max.f32 	%f15, %f53, %f14;
	mov.b32 	%r28, %f15;
	mov.u32 	%r29, 8;
	shfl.sync.bfly.b32 	%r30|%p4, %r28, %r29, %r24, %r26;
	mov.b32 	%f16, %r30;
	max.f32 	%f17, %f15, %f16;
	mov.b32 	%r31, %f17;
	mov.u32 	%r32, 4;
	shfl.sync.bfly.b32 	%r33|%p5, %r31, %r32, %r24, %r26;
	mov.b32 	%f18, %r33;
	max.f32 	%f19, %f17, %f18;
	mov.b32 	%r34, %f19;
	mov.u32 	%r35, 2;
	shfl.sync.bfly.b32 	%r36|%p6, %r34, %r35, %r24, %r26;
	mov.b32 	%f20, %r36;
	max.f32 	%f21, %f19, %f20;
	mov.b32 	%r37, %f21;
	mov.u32 	%r38, 1;
	shfl.sync.bfly.b32 	%r39|%p7, %r37, %r38, %r24, %r26;
	mov.b32 	%f22, %r39;
	max.f32 	%f4, %f21, %f22;
	mov.f32 	%f55, 0f00000000;
	@%p1 bra 	$L__BB16_6;

	mov.f32 	%f55, 0f00000000;
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r62, %r63;

$L__BB16_5:
	mul.lo.s32 	%r40, %r62, %r12;
	cvt.s64.s32 	%rd10, %r40;
	add.s64 	%rd11, %rd10, %rd3;
	shl.b64 	%rd12, %rd11, 1;
	add.s64 	%rd13, %rd1, %rd12;
	ld.global.u16 	%rs2, [%rd13];
	// begin inline asm
	{  cvt.f32.f16 %f24, %rs2;}

	// end inline asm
	sub.f32 	%f26, %f24, %f4;
	mov.f32 	%f27, 0f3F000000;
	mov.f32 	%f28, 0f3BBB989D;
	fma.rn.f32 	%f29, %f26, %f28, %f27;
	cvt.sat.f32.f32 	%f30, %f29;
	mov.f32 	%f31, 0f4B400001;
	mov.f32 	%f32, 0f437C0000;
	fma.rm.f32 	%f33, %f30, %f32, %f31;
	add.f32 	%f34, %f33, 0fCB40007F;
	neg.f32 	%f35, %f34;
	mov.f32 	%f36, 0f3FB8AA3B;
	fma.rn.f32 	%f37, %f26, %f36, %f35;
	mov.f32 	%f38, 0f32A57060;
	fma.rn.f32 	%f39, %f26, %f38, %f37;
	mov.b32 	%r41, %f33;
	shl.b32 	%r42, %r41, 23;
	mov.b32 	%f40, %r42;
	ex2.approx.ftz.f32 	%f41, %f39;
	mul.f32 	%f25, %f41, %f40;
	add.f32 	%f55, %f55, %f25;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs3, %f25;}

	// end inline asm
	add.s64 	%rd14, %rd2, %rd12;
	st.global.u16 	[%rd14], %rs3;
	add.s32 	%r62, %r62, %r5;
	setp.lt.s32 	%p9, %r62, %r11;
	@%p9 bra 	$L__BB16_5;

$L__BB16_6:
	mov.b32 	%r43, %f55;
	shfl.sync.bfly.b32 	%r47|%p10, %r43, %r25, %r24, %r26;
	mov.b32 	%f42, %r47;
	add.f32 	%f43, %f55, %f42;
	mov.b32 	%r48, %f43;
	shfl.sync.bfly.b32 	%r50|%p11, %r48, %r29, %r24, %r26;
	mov.b32 	%f44, %r50;
	add.f32 	%f45, %f43, %f44;
	mov.b32 	%r51, %f45;
	shfl.sync.bfly.b32 	%r53|%p12, %r51, %r32, %r24, %r26;
	mov.b32 	%f46, %r53;
	add.f32 	%f47, %f45, %f46;
	mov.b32 	%r54, %f47;
	shfl.sync.bfly.b32 	%r56|%p13, %r54, %r35, %r24, %r26;
	mov.b32 	%f48, %r56;
	add.f32 	%f49, %f47, %f48;
	mov.b32 	%r57, %f49;
	shfl.sync.bfly.b32 	%r59|%p14, %r57, %r38, %r24, %r26;
	mov.b32 	%f50, %r59;
	add.f32 	%f8, %f49, %f50;
	@%p1 bra 	$L__BB16_9;

	mov.u32 	%r8, %ntid.x;
	rcp.rn.f32 	%f9, %f8;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs4, %f9;}

	// end inline asm

$L__BB16_8:
	mul.lo.s32 	%r60, %r63, %r12;
	cvt.s64.s32 	%rd15, %r60;
	add.s64 	%rd16, %rd15, %rd3;
	shl.b64 	%rd17, %rd16, 1;
	add.s64 	%rd18, %rd2, %rd17;
	ld.global.u16 	%rs6, [%rd18];
	// begin inline asm
	{mul.f16 %rs5,%rs6,%rs4;
}
	// end inline asm
	st.global.u16 	[%rd18], %rs5;
	add.s32 	%r63, %r63, %r8;
	setp.lt.s32 	%p16, %r63, %r11;
	@%p16 bra 	$L__BB16_8;

$L__BB16_9:
	ret;

}
	// .globl	softmax_f16
.visible .entry softmax_f16(
	.param .u64 softmax_f16_param_0,
	.param .u64 softmax_f16_param_1,
	.param .u32 softmax_f16_param_2,
	.param .u32 softmax_f16_param_3,
	.param .u32 softmax_f16_param_4,
	.param .u32 softmax_f16_param_5,
	.param .u32 softmax_f16_param_6,
	.param .u32 softmax_f16_param_7
)
{
	.reg .pred 	%p<31>;
	.reg .b16 	%rs<8>;
	.reg .f32 	%f<78>;
	.reg .b32 	%r<114>;
	.reg .b64 	%rd<19>;
	// demoted variable
	.shared .align 4 .b8 _ZZ11softmax_f16E5s_max[128];
	// demoted variable
	.shared .align 4 .b8 _ZZ11softmax_f16E5s_sum[128];

	ld.param.u64 	%rd4, [softmax_f16_param_0];
	ld.param.u64 	%rd5, [softmax_f16_param_1];
	ld.param.u32 	%r15, [softmax_f16_param_3];
	ld.param.u32 	%r17, [softmax_f16_param_4];
	ld.param.u32 	%r18, [softmax_f16_param_5];
	ld.param.u32 	%r16, [softmax_f16_param_6];
	ld.param.u32 	%r19, [softmax_f16_param_7];
	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd5;
	mov.u32 	%r20, %ctaid.x;
	div.u32 	%r21, %r20, %r17;
	mul.lo.s32 	%r22, %r21, %r17;
	sub.s32 	%r23, %r20, %r22;
	mul.lo.s32 	%r24, %r23, %r19;
	mad.lo.s32 	%r25, %r21, %r18, %r24;
	cvt.s64.s32 	%rd3, %r25;
	mov.u32 	%r113, %tid.x;
	shr.u32 	%r2, %r113, 5;
	and.b32  	%r3, %r113, 31;
	setp.ge.s32 	%p1, %r113, %r15;
	mov.f32 	%f75, 0fFF800000;
	@%p1 bra 	$L__BB17_3;

	mov.f32 	%f75, 0fFF800000;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r111, %r113;

$L__BB17_2:
	mul.lo.s32 	%r26, %r111, %r16;
	cvt.s64.s32 	%rd6, %r26;
	add.s64 	%rd7, %rd6, %rd3;
	shl.b64 	%rd8, %rd7, 1;
	add.s64 	%rd9, %rd1, %rd8;
	ld.global.u16 	%rs1, [%rd9];
	// begin inline asm
	{  cvt.f32.f16 %f14, %rs1;}

	// end inline asm
	max.f32 	%f75, %f75, %f14;
	add.s32 	%r111, %r111, %r4;
	setp.lt.s32 	%p2, %r111, %r15;
	@%p2 bra 	$L__BB17_2;

$L__BB17_3:
	mov.b32 	%r27, %f75;
	mov.u32 	%r28, 31;
	mov.u32 	%r29, 16;
	mov.u32 	%r30, -1;
	shfl.sync.bfly.b32 	%r31|%p3, %r27, %r29, %r28, %r30;
	mov.b32 	%f15, %r31;
	max.f32 	%f16, %f75, %f15;
	mov.b32 	%r32, %f16;
	mov.u32 	%r33, 8;
	shfl.sync.bfly.b32 	%r34|%p4, %r32, %r33, %r28, %r30;
	mov.b32 	%f17, %r34;
	max.f32 	%f18, %f16, %f17;
	mov.b32 	%r35, %f18;
	mov.u32 	%r36, 4;
	shfl.sync.bfly.b32 	%r37|%p5, %r35, %r36, %r28, %r30;
	mov.b32 	%f19, %r37;
	max.f32 	%f20, %f18, %f19;
	mov.b32 	%r38, %f20;
	mov.u32 	%r39, 2;
	shfl.sync.bfly.b32 	%r40|%p6, %r38, %r39, %r28, %r30;
	mov.b32 	%f21, %r40;
	max.f32 	%f22, %f20, %f21;
	mov.b32 	%r41, %f22;
	mov.u32 	%r42, 1;
	shfl.sync.bfly.b32 	%r43|%p7, %r41, %r42, %r28, %r30;
	mov.b32 	%f23, %r43;
	max.f32 	%f4, %f22, %f23;
	shl.b32 	%r44, %r3, 2;
	mov.u32 	%r45, _ZZ11softmax_f16E5s_max;
	add.s32 	%r7, %r45, %r44;
	setp.ne.s32 	%p8, %r2, 0;
	@%p8 bra 	$L__BB17_5;

	mov.u32 	%r46, -8388608;
	st.shared.u32 	[%r7], %r46;

$L__BB17_5:
	bar.sync 	0;
	setp.ne.s32 	%p9, %r3, 0;
	@%p9 bra 	$L__BB17_7;

	shl.b32 	%r47, %r2, 2;
	add.s32 	%r49, %r45, %r47;
	st.shared.f32 	[%r49], %f4;

$L__BB17_7:
	bar.sync 	0;
	ld.shared.f32 	%f25, [%r7];
	mov.b32 	%r50, %f25;
	mov.u32 	%r51, 31;
	mov.u32 	%r52, 16;
	mov.u32 	%r53, -1;
	shfl.sync.bfly.b32 	%r54|%p11, %r50, %r52, %r51, %r53;
	mov.b32 	%f26, %r54;
	max.f32 	%f27, %f25, %f26;
	mov.b32 	%r55, %f27;
	mov.u32 	%r56, 8;
	shfl.sync.bfly.b32 	%r57|%p12, %r55, %r56, %r51, %r53;
	mov.b32 	%f28, %r57;
	max.f32 	%f29, %f27, %f28;
	mov.b32 	%r58, %f29;
	mov.u32 	%r59, 4;
	shfl.sync.bfly.b32 	%r60|%p13, %r58, %r59, %r51, %r53;
	mov.b32 	%f30, %r60;
	max.f32 	%f31, %f29, %f30;
	mov.b32 	%r61, %f31;
	mov.u32 	%r62, 2;
	shfl.sync.bfly.b32 	%r63|%p14, %r61, %r62, %r51, %r53;
	mov.b32 	%f32, %r63;
	max.f32 	%f33, %f31, %f32;
	mov.b32 	%r64, %f33;
	mov.u32 	%r65, 1;
	shfl.sync.bfly.b32 	%r66|%p15, %r64, %r65, %r51, %r53;
	mov.b32 	%f34, %r66;
	max.f32 	%f5, %f33, %f34;
	mov.f32 	%f77, 0f00000000;
	@%p1 bra 	$L__BB17_10;

	mov.f32 	%f77, 0f00000000;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r112, %r113;

$L__BB17_9:
	mul.lo.s32 	%r67, %r112, %r16;
	cvt.s64.s32 	%rd10, %r67;
	add.s64 	%rd11, %rd10, %rd3;
	shl.b64 	%rd12, %rd11, 1;
	add.s64 	%rd13, %rd1, %rd12;
	ld.global.u16 	%rs2, [%rd13];
	// begin inline asm
	{  cvt.f32.f16 %f36, %rs2;}

	// end inline asm
	sub.f32 	%f38, %f36, %f5;
	mov.f32 	%f39, 0f3F000000;
	mov.f32 	%f40, 0f3BBB989D;
	fma.rn.f32 	%f41, %f38, %f40, %f39;
	cvt.sat.f32.f32 	%f42, %f41;
	mov.f32 	%f43, 0f4B400001;
	mov.f32 	%f44, 0f437C0000;
	fma.rm.f32 	%f45, %f42, %f44, %f43;
	add.f32 	%f46, %f45, 0fCB40007F;
	neg.f32 	%f47, %f46;
	mov.f32 	%f48, 0f3FB8AA3B;
	fma.rn.f32 	%f49, %f38, %f48, %f47;
	mov.f32 	%f50, 0f32A57060;
	fma.rn.f32 	%f51, %f38, %f50, %f49;
	mov.b32 	%r68, %f45;
	shl.b32 	%r69, %r68, 23;
	mov.b32 	%f52, %r69;
	ex2.approx.ftz.f32 	%f53, %f51;
	mul.f32 	%f37, %f53, %f52;
	add.f32 	%f77, %f77, %f37;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs3, %f37;}

	// end inline asm
	add.s64 	%rd14, %rd2, %rd12;
	st.global.u16 	[%rd14], %rs3;
	add.s32 	%r112, %r112, %r8;
	setp.lt.s32 	%p16, %r112, %r15;
	@%p16 bra 	$L__BB17_9;

$L__BB17_10:
	mov.b32 	%r70, %f77;
	shfl.sync.bfly.b32 	%r74|%p17, %r70, %r52, %r51, %r53;
	mov.b32 	%f54, %r74;
	add.f32 	%f55, %f77, %f54;
	mov.b32 	%r75, %f55;
	shfl.sync.bfly.b32 	%r77|%p18, %r75, %r56, %r51, %r53;
	mov.b32 	%f56, %r77;
	add.f32 	%f57, %f55, %f56;
	mov.b32 	%r78, %f57;
	shfl.sync.bfly.b32 	%r80|%p19, %r78, %r59, %r51, %r53;
	mov.b32 	%f58, %r80;
	add.f32 	%f59, %f57, %f58;
	mov.b32 	%r81, %f59;
	shfl.sync.bfly.b32 	%r83|%p20, %r81, %r62, %r51, %r53;
	mov.b32 	%f60, %r83;
	add.f32 	%f61, %f59, %f60;
	mov.b32 	%r84, %f61;
	shfl.sync.bfly.b32 	%r86|%p21, %r84, %r65, %r51, %r53;
	mov.b32 	%f62, %r86;
	add.f32 	%f9, %f61, %f62;
	mov.u32 	%r88, _ZZ11softmax_f16E5s_sum;
	add.s32 	%r11, %r88, %r44;
	@%p8 bra 	$L__BB17_12;

	mov.u32 	%r89, 0;
	st.shared.u32 	[%r11], %r89;

$L__BB17_12:
	bar.sync 	0;
	@%p9 bra 	$L__BB17_14;

	shl.b32 	%r90, %r2, 2;
	add.s32 	%r92, %r88, %r90;
	st.shared.f32 	[%r92], %f9;

$L__BB17_14:
	bar.sync 	0;
	ld.shared.f32 	%f63, [%r11];
	mov.b32 	%r93, %f63;
	mov.u32 	%r94, 31;
	mov.u32 	%r95, 16;
	mov.u32 	%r96, -1;
	shfl.sync.bfly.b32 	%r97|%p25, %r93, %r95, %r94, %r96;
	mov.b32 	%f64, %r97;
	add.f32 	%f65, %f63, %f64;
	mov.b32 	%r98, %f65;
	mov.u32 	%r99, 8;
	shfl.sync.bfly.b32 	%r100|%p26, %r98, %r99, %r94, %r96;
	mov.b32 	%f66, %r100;
	add.f32 	%f67, %f65, %f66;
	mov.b32 	%r101, %f67;
	mov.u32 	%r102, 4;
	shfl.sync.bfly.b32 	%r103|%p27, %r101, %r102, %r94, %r96;
	mov.b32 	%f68, %r103;
	add.f32 	%f69, %f67, %f68;
	mov.b32 	%r104, %f69;
	mov.u32 	%r105, 2;
	shfl.sync.bfly.b32 	%r106|%p28, %r104, %r105, %r94, %r96;
	mov.b32 	%f70, %r106;
	add.f32 	%f71, %f69, %f70;
	mov.b32 	%r107, %f71;
	mov.u32 	%r108, 1;
	shfl.sync.bfly.b32 	%r109|%p29, %r107, %r108, %r94, %r96;
	mov.b32 	%f72, %r109;
	add.f32 	%f10, %f71, %f72;
	@%p1 bra 	$L__BB17_17;

	mov.u32 	%r12, %ntid.x;
	rcp.rn.f32 	%f11, %f10;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs4, %f11;}

	// end inline asm

$L__BB17_16:
	mul.lo.s32 	%r110, %r113, %r16;
	cvt.s64.s32 	%rd15, %r110;
	add.s64 	%rd16, %rd15, %rd3;
	shl.b64 	%rd17, %rd16, 1;
	add.s64 	%rd18, %rd2, %rd17;
	ld.global.u16 	%rs6, [%rd18];
	// begin inline asm
	{mul.f16 %rs5,%rs6,%rs4;
}
	// end inline asm
	st.global.u16 	[%rd18], %rs5;
	add.s32 	%r113, %r113, %r12;
	setp.lt.s32 	%p30, %r113, %r15;
	@%p30 bra 	$L__BB17_16;

$L__BB17_17:
	ret;

}
	// .globl	scaled_masked_softmax_32_f32
.visible .entry scaled_masked_softmax_32_f32(
	.param .u64 scaled_masked_softmax_32_f32_param_0,
	.param .u64 scaled_masked_softmax_32_f32_param_1,
	.param .f32 scaled_masked_softmax_32_f32_param_2,
	.param .u64 scaled_masked_softmax_32_f32_param_3,
	.param .u32 scaled_masked_softmax_32_f32_param_4,
	.param .u32 scaled_masked_softmax_32_f32_param_5,
	.param .u32 scaled_masked_softmax_32_f32_param_6,
	.param .u32 scaled_masked_softmax_32_f32_param_7,
	.param .u32 scaled_masked_softmax_32_f32_param_8,
	.param .u32 scaled_masked_softmax_32_f32_param_9,
	.param .u32 scaled_masked_softmax_32_f32_param_10,
	.param .u32 scaled_masked_softmax_32_f32_param_11,
	.param .u32 scaled_masked_softmax_32_f32_param_12,
	.param .u32 scaled_masked_softmax_32_f32_param_13,
	.param .u32 scaled_masked_softmax_32_f32_param_14,
	.param .u32 scaled_masked_softmax_32_f32_param_15
)
{
	.reg .pred 	%p<27>;
	.reg .f32 	%f<158>;
	.reg .b32 	%r<168>;
	.reg .b64 	%rd<77>;


	ld.param.u64 	%rd33, [scaled_masked_softmax_32_f32_param_0];
	ld.param.u64 	%rd34, [scaled_masked_softmax_32_f32_param_1];
	ld.param.f32 	%f17, [scaled_masked_softmax_32_f32_param_2];
	ld.param.u64 	%rd35, [scaled_masked_softmax_32_f32_param_3];
	ld.param.u32 	%r55, [scaled_masked_softmax_32_f32_param_6];
	ld.param.s32 	%rd5, [scaled_masked_softmax_32_f32_param_10];
	ld.param.u32 	%r56, [scaled_masked_softmax_32_f32_param_11];
	ld.param.u32 	%r57, [scaled_masked_softmax_32_f32_param_12];
	cvta.to.global.u64 	%rd1, %rd34;
	cvta.to.global.u64 	%rd2, %rd33;
	cvta.to.global.u64 	%rd3, %rd35;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.y;
	cvt.u64.u32 	%rd4, %r2;
	and.b64  	%rd36, %rd5, -4294967296;
	setp.eq.s64 	%p1, %rd36, 0;
	@%p1 bra 	$L__BB18_2;

	rem.s64 	%rd70, %rd4, %rd5;
	bra.uni 	$L__BB18_3;

$L__BB18_2:
	cvt.u32.u64 	%r58, %rd5;
	cvt.u32.u64 	%r59, %rd4;
	rem.u32 	%r60, %r59, %r58;
	cvt.u64.u32 	%rd70, %r60;

$L__BB18_3:
	mov.u32 	%r61, %ctaid.x;
	mov.u32 	%r62, %nctaid.x;
	mov.u32 	%r63, %ctaid.z;
	mov.u32 	%r64, %nctaid.y;
	mad.lo.s32 	%r65, %r64, %r63, %r2;
	mad.lo.s32 	%r66, %r65, %r62, %r61;
	cvt.s64.s32 	%rd9, %r66;
	cvt.s64.s32 	%rd10, %r55;
	cvt.s64.s32 	%rd37, %r56;
	cvt.u64.u32 	%rd38, %r61;
	mul.lo.s64 	%rd39, %rd37, %rd38;
	mul.lo.s64 	%rd40, %rd70, %rd5;
	add.s64 	%rd41, %rd40, %rd39;
	shr.u64 	%rd11, %rd41, 2;
	setp.lt.s32 	%p2, %r55, 1;
	mov.f32 	%f152, 0fFF800000;
	@%p2 bra 	$L__BB18_10;

	add.s32 	%r68, %r55, -1;
	shr.u32 	%r3, %r68, 5;
	add.s32 	%r69, %r3, 1;
	and.b32  	%r155, %r69, 3;
	setp.lt.u32 	%p3, %r68, 96;
	mov.f32 	%f152, 0fFF800000;
	mov.u32 	%r153, 0;
	@%p3 bra 	$L__BB18_7;

	mul.lo.s64 	%rd42, %rd10, %rd9;
	mul.lo.s32 	%r71, %r1, %r57;
	cvt.s64.s32 	%rd43, %r71;
	add.s64 	%rd44, %rd11, %rd43;
	shl.b64 	%rd45, %rd44, 2;
	add.s64 	%rd72, %rd1, %rd45;
	shl.b32 	%r5, %r57, 7;
	mul.wide.s32 	%rd13, %r5, 4;
	add.s32 	%r72, %r1, 32;
	mul.lo.s32 	%r151, %r57, %r72;
	sub.s32 	%r150, %r3, %r155;
	cvt.s64.s32 	%rd46, %r1;
	add.s64 	%rd47, %rd42, %rd46;
	shl.b64 	%rd48, %rd47, 2;
	add.s64 	%rd71, %rd2, %rd48;
	shl.b32 	%r73, %r1, 2;
	mov.u32 	%r74, data_soft_max_f32;
	add.s32 	%r75, %r74, %r73;
	add.s32 	%r149, %r75, 256;
	shl.b32 	%r76, %r57, 5;
	mul.wide.s32 	%rd15, %r76, 4;
	mov.f32 	%f152, 0fFF800000;
	mov.u32 	%r153, 0;

$L__BB18_6:
	.pragma "nounroll";
	ld.global.f32 	%f22, [%rd71];
	ld.global.f32 	%f23, [%rd72];
	fma.rn.f32 	%f24, %f22, %f17, %f23;
	st.shared.f32 	[%r149+-128], %f24;
	max.f32 	%f25, %f152, %f24;
	ld.global.f32 	%f26, [%rd71+128];
	cvt.s64.s32 	%rd49, %r151;
	add.s64 	%rd50, %rd11, %rd49;
	shl.b64 	%rd51, %rd50, 2;
	add.s64 	%rd52, %rd1, %rd51;
	ld.global.f32 	%f27, [%rd52];
	fma.rn.f32 	%f28, %f26, %f17, %f27;
	st.shared.f32 	[%r149], %f28;
	max.f32 	%f29, %f25, %f28;
	ld.global.f32 	%f30, [%rd71+256];
	add.s64 	%rd53, %rd52, %rd15;
	ld.global.f32 	%f31, [%rd53];
	fma.rn.f32 	%f32, %f30, %f17, %f31;
	st.shared.f32 	[%r149+128], %f32;
	max.f32 	%f33, %f29, %f32;
	ld.global.f32 	%f34, [%rd71+384];
	add.s64 	%rd54, %rd53, %rd15;
	ld.global.f32 	%f35, [%rd54];
	fma.rn.f32 	%f36, %f34, %f17, %f35;
	st.shared.f32 	[%r149+256], %f36;
	max.f32 	%f152, %f33, %f36;
	add.s32 	%r153, %r153, 128;
	add.s64 	%rd72, %rd72, %rd13;
	add.s32 	%r151, %r151, %r5;
	add.s64 	%rd71, %rd71, 512;
	add.s32 	%r149, %r149, 512;
	add.s32 	%r150, %r150, -4;
	setp.ne.s32 	%p4, %r150, -1;
	@%p4 bra 	$L__BB18_6;

$L__BB18_7:
	setp.eq.s32 	%p5, %r155, 0;
	@%p5 bra 	$L__BB18_10;

	add.s32 	%r77, %r1, %r153;
	shl.b32 	%r78, %r77, 2;
	mov.u32 	%r79, data_soft_max_f32;
	add.s32 	%r80, %r79, %r78;
	add.s32 	%r154, %r80, 128;
	mul.lo.s32 	%r81, %r57, %r77;
	cvt.s64.s32 	%rd55, %r81;
	add.s64 	%rd56, %rd11, %rd55;
	shl.b64 	%rd57, %rd56, 2;
	add.s64 	%rd74, %rd1, %rd57;
	shl.b32 	%r82, %r57, 5;
	mul.wide.s32 	%rd21, %r82, 4;
	cvt.s64.s32 	%rd58, %r77;
	mul.lo.s64 	%rd59, %rd10, %rd9;
	add.s64 	%rd60, %rd59, %rd58;
	shl.b64 	%rd61, %rd60, 2;
	add.s64 	%rd73, %rd2, %rd61;

$L__BB18_9:
	.pragma "nounroll";
	ld.global.f32 	%f37, [%rd73];
	ld.global.f32 	%f38, [%rd74];
	fma.rn.f32 	%f39, %f37, %f17, %f38;
	st.shared.f32 	[%r154], %f39;
	max.f32 	%f152, %f152, %f39;
	add.s32 	%r154, %r154, 128;
	add.s64 	%rd74, %rd74, %rd21;
	add.s64 	%rd73, %rd73, 128;
	add.s32 	%r155, %r155, -1;
	setp.ne.s32 	%p6, %r155, 0;
	@%p6 bra 	$L__BB18_9;

$L__BB18_10:
	mov.b32 	%r83, %f152;
	mov.u32 	%r84, 31;
	mov.u32 	%r85, 16;
	mov.u32 	%r86, -1;
	shfl.sync.bfly.b32 	%r87|%p7, %r83, %r85, %r84, %r86;
	mov.b32 	%f41, %r87;
	max.f32 	%f42, %f152, %f41;
	mov.b32 	%r88, %f42;
	mov.u32 	%r89, 8;
	shfl.sync.bfly.b32 	%r90|%p8, %r88, %r89, %r84, %r86;
	mov.b32 	%f43, %r90;
	max.f32 	%f44, %f42, %f43;
	mov.b32 	%r91, %f44;
	mov.u32 	%r92, 4;
	shfl.sync.bfly.b32 	%r93|%p9, %r91, %r92, %r84, %r86;
	mov.b32 	%f45, %r93;
	max.f32 	%f46, %f44, %f45;
	mov.b32 	%r94, %f46;
	mov.u32 	%r95, 2;
	shfl.sync.bfly.b32 	%r96|%p10, %r94, %r95, %r84, %r86;
	mov.b32 	%f47, %r96;
	max.f32 	%f48, %f46, %f47;
	mov.b32 	%r97, %f48;
	mov.u32 	%r98, 1;
	shfl.sync.bfly.b32 	%r99|%p11, %r97, %r98, %r84, %r86;
	mov.b32 	%f49, %r99;
	max.f32 	%f8, %f48, %f49;
	mov.f32 	%f157, 0f00000000;
	@%p2 bra 	$L__BB18_17;

	add.s32 	%r101, %r55, -1;
	shr.u32 	%r23, %r101, 5;
	add.s32 	%r102, %r23, 1;
	and.b32  	%r161, %r102, 3;
	setp.lt.u32 	%p13, %r101, 96;
	mov.f32 	%f157, 0f00000000;
	mov.u32 	%r159, 0;
	@%p13 bra 	$L__BB18_14;

	shl.b32 	%r104, %r1, 2;
	mov.u32 	%r105, data_soft_max_f32;
	add.s32 	%r106, %r105, %r104;
	add.s32 	%r157, %r106, 512;
	sub.s32 	%r156, %r23, %r161;
	mov.f32 	%f157, 0f00000000;
	mov.u32 	%r159, 0;

$L__BB18_13:
	.pragma "nounroll";
	ld.shared.f32 	%f53, [%r157+-384];
	sub.f32 	%f54, %f53, %f8;
	mov.f32 	%f55, 0f3F000000;
	mov.f32 	%f56, 0f3BBB989D;
	fma.rn.f32 	%f57, %f54, %f56, %f55;
	cvt.sat.f32.f32 	%f58, %f57;
	mov.f32 	%f59, 0f4B400001;
	mov.f32 	%f60, 0f437C0000;
	fma.rm.f32 	%f61, %f58, %f60, %f59;
	add.f32 	%f62, %f61, 0fCB40007F;
	neg.f32 	%f63, %f62;
	mov.f32 	%f64, 0f3FB8AA3B;
	fma.rn.f32 	%f65, %f54, %f64, %f63;
	mov.f32 	%f66, 0f32A57060;
	fma.rn.f32 	%f67, %f54, %f66, %f65;
	mov.b32 	%r107, %f61;
	shl.b32 	%r108, %r107, 23;
	mov.b32 	%f68, %r108;
	ex2.approx.ftz.f32 	%f69, %f67;
	mul.f32 	%f70, %f69, %f68;
	add.f32 	%f71, %f157, %f70;
	st.shared.f32 	[%r157+-384], %f70;
	ld.shared.f32 	%f72, [%r157+-256];
	sub.f32 	%f73, %f72, %f8;
	fma.rn.f32 	%f74, %f73, %f56, %f55;
	cvt.sat.f32.f32 	%f75, %f74;
	fma.rm.f32 	%f76, %f75, %f60, %f59;
	add.f32 	%f77, %f76, 0fCB40007F;
	neg.f32 	%f78, %f77;
	fma.rn.f32 	%f79, %f73, %f64, %f78;
	fma.rn.f32 	%f80, %f73, %f66, %f79;
	mov.b32 	%r109, %f76;
	shl.b32 	%r110, %r109, 23;
	mov.b32 	%f81, %r110;
	ex2.approx.ftz.f32 	%f82, %f80;
	mul.f32 	%f83, %f82, %f81;
	add.f32 	%f84, %f71, %f83;
	st.shared.f32 	[%r157+-256], %f83;
	ld.shared.f32 	%f85, [%r157+-128];
	sub.f32 	%f86, %f85, %f8;
	fma.rn.f32 	%f87, %f86, %f56, %f55;
	cvt.sat.f32.f32 	%f88, %f87;
	fma.rm.f32 	%f89, %f88, %f60, %f59;
	add.f32 	%f90, %f89, 0fCB40007F;
	neg.f32 	%f91, %f90;
	fma.rn.f32 	%f92, %f86, %f64, %f91;
	fma.rn.f32 	%f93, %f86, %f66, %f92;
	mov.b32 	%r111, %f89;
	shl.b32 	%r112, %r111, 23;
	mov.b32 	%f94, %r112;
	ex2.approx.ftz.f32 	%f95, %f93;
	mul.f32 	%f96, %f95, %f94;
	add.f32 	%f97, %f84, %f96;
	st.shared.f32 	[%r157+-128], %f96;
	ld.shared.f32 	%f98, [%r157];
	sub.f32 	%f99, %f98, %f8;
	fma.rn.f32 	%f100, %f99, %f56, %f55;
	cvt.sat.f32.f32 	%f101, %f100;
	fma.rm.f32 	%f102, %f101, %f60, %f59;
	add.f32 	%f103, %f102, 0fCB40007F;
	neg.f32 	%f104, %f103;
	fma.rn.f32 	%f105, %f99, %f64, %f104;
	fma.rn.f32 	%f106, %f99, %f66, %f105;
	mov.b32 	%r113, %f102;
	shl.b32 	%r114, %r113, 23;
	mov.b32 	%f107, %r114;
	ex2.approx.ftz.f32 	%f108, %f106;
	mul.f32 	%f109, %f108, %f107;
	add.f32 	%f157, %f97, %f109;
	st.shared.f32 	[%r157], %f109;
	add.s32 	%r159, %r159, 128;
	add.s32 	%r157, %r157, 512;
	add.s32 	%r156, %r156, -4;
	setp.ne.s32 	%p14, %r156, -1;
	@%p14 bra 	$L__BB18_13;

$L__BB18_14:
	setp.eq.s32 	%p15, %r161, 0;
	@%p15 bra 	$L__BB18_17;

	add.s32 	%r115, %r1, %r159;
	shl.b32 	%r116, %r115, 2;
	mov.u32 	%r117, data_soft_max_f32;
	add.s32 	%r118, %r117, %r116;
	add.s32 	%r160, %r118, 128;

$L__BB18_16:
	.pragma "nounroll";
	ld.shared.f32 	%f110, [%r160];
	sub.f32 	%f111, %f110, %f8;
	mov.f32 	%f112, 0f3F000000;
	mov.f32 	%f113, 0f3BBB989D;
	fma.rn.f32 	%f114, %f111, %f113, %f112;
	cvt.sat.f32.f32 	%f115, %f114;
	mov.f32 	%f116, 0f4B400001;
	mov.f32 	%f117, 0f437C0000;
	fma.rm.f32 	%f118, %f115, %f117, %f116;
	add.f32 	%f119, %f118, 0fCB40007F;
	neg.f32 	%f120, %f119;
	mov.f32 	%f121, 0f3FB8AA3B;
	fma.rn.f32 	%f122, %f111, %f121, %f120;
	mov.f32 	%f123, 0f32A57060;
	fma.rn.f32 	%f124, %f111, %f123, %f122;
	mov.b32 	%r119, %f118;
	shl.b32 	%r120, %r119, 23;
	mov.b32 	%f125, %r120;
	ex2.approx.ftz.f32 	%f126, %f124;
	mul.f32 	%f127, %f126, %f125;
	add.f32 	%f157, %f157, %f127;
	st.shared.f32 	[%r160], %f127;
	add.s32 	%r160, %r160, 128;
	add.s32 	%r161, %r161, -1;
	setp.ne.s32 	%p16, %r161, 0;
	@%p16 bra 	$L__BB18_16;

$L__BB18_17:
	mov.b32 	%r121, %f157;
	shfl.sync.bfly.b32 	%r125|%p17, %r121, %r85, %r84, %r86;
	mov.b32 	%f128, %r125;
	add.f32 	%f129, %f157, %f128;
	mov.b32 	%r126, %f129;
	shfl.sync.bfly.b32 	%r128|%p18, %r126, %r89, %r84, %r86;
	mov.b32 	%f130, %r128;
	add.f32 	%f131, %f129, %f130;
	mov.b32 	%r129, %f131;
	shfl.sync.bfly.b32 	%r131|%p19, %r129, %r92, %r84, %r86;
	mov.b32 	%f132, %r131;
	add.f32 	%f133, %f131, %f132;
	mov.b32 	%r132, %f133;
	shfl.sync.bfly.b32 	%r134|%p20, %r132, %r95, %r84, %r86;
	mov.b32 	%f134, %r134;
	add.f32 	%f135, %f133, %f134;
	mov.b32 	%r135, %f135;
	shfl.sync.bfly.b32 	%r137|%p21, %r135, %r98, %r84, %r86;
	mov.b32 	%f136, %r137;
	add.f32 	%f137, %f135, %f136;
	rcp.rn.f32 	%f16, %f137;
	@%p2 bra 	$L__BB18_24;

	add.s32 	%r139, %r55, -1;
	shr.u32 	%r39, %r139, 5;
	add.s32 	%r140, %r39, 1;
	and.b32  	%r167, %r140, 3;
	setp.lt.u32 	%p23, %r139, 96;
	mov.u32 	%r165, 0;
	@%p23 bra 	$L__BB18_21;

	mul.lo.s64 	%rd62, %rd10, %rd9;
	sub.s32 	%r163, %r39, %r167;
	cvt.s64.s32 	%rd63, %r1;
	add.s64 	%rd64, %rd62, %rd63;
	shl.b64 	%rd65, %rd64, 2;
	add.s64 	%rd75, %rd3, %rd65;
	shl.b32 	%r142, %r1, 2;
	mov.u32 	%r143, data_soft_max_f32;
	add.s32 	%r144, %r143, %r142;
	add.s32 	%r162, %r144, 256;
	mov.u32 	%r165, 0;

$L__BB18_20:
	.pragma "nounroll";
	ld.shared.f32 	%f138, [%r162+-128];
	mul.f32 	%f139, %f16, %f138;
	st.global.f32 	[%rd75], %f139;
	ld.shared.f32 	%f140, [%r162];
	mul.f32 	%f141, %f16, %f140;
	st.global.f32 	[%rd75+128], %f141;
	ld.shared.f32 	%f142, [%r162+128];
	mul.f32 	%f143, %f16, %f142;
	st.global.f32 	[%rd75+256], %f143;
	ld.shared.f32 	%f144, [%r162+256];
	mul.f32 	%f145, %f16, %f144;
	st.global.f32 	[%rd75+384], %f145;
	add.s32 	%r165, %r165, 128;
	add.s64 	%rd75, %rd75, 512;
	add.s32 	%r162, %r162, 512;
	add.s32 	%r163, %r163, -4;
	setp.ne.s32 	%p24, %r163, -1;
	@%p24 bra 	$L__BB18_20;

$L__BB18_21:
	setp.eq.s32 	%p25, %r167, 0;
	@%p25 bra 	$L__BB18_24;

	mul.lo.s64 	%rd66, %rd10, %rd9;
	add.s32 	%r145, %r1, %r165;
	cvt.s64.s32 	%rd67, %r145;
	add.s64 	%rd68, %rd66, %rd67;
	shl.b64 	%rd69, %rd68, 2;
	add.s64 	%rd76, %rd3, %rd69;
	shl.b32 	%r146, %r145, 2;
	mov.u32 	%r147, data_soft_max_f32;
	add.s32 	%r148, %r147, %r146;
	add.s32 	%r166, %r148, 128;

$L__BB18_23:
	.pragma "nounroll";
	ld.shared.f32 	%f146, [%r166];
	mul.f32 	%f147, %f16, %f146;
	st.global.f32 	[%rd76], %f147;
	add.s64 	%rd76, %rd76, 128;
	add.s32 	%r166, %r166, 128;
	add.s32 	%r167, %r167, -1;
	setp.ne.s32 	%p26, %r167, 0;
	@%p26 bra 	$L__BB18_23;

$L__BB18_24:
	ret;

}
	// .globl	scaled_masked_softmax_64_f32
.visible .entry scaled_masked_softmax_64_f32(
	.param .u64 scaled_masked_softmax_64_f32_param_0,
	.param .u64 scaled_masked_softmax_64_f32_param_1,
	.param .f32 scaled_masked_softmax_64_f32_param_2,
	.param .u64 scaled_masked_softmax_64_f32_param_3,
	.param .u32 scaled_masked_softmax_64_f32_param_4,
	.param .u32 scaled_masked_softmax_64_f32_param_5,
	.param .u32 scaled_masked_softmax_64_f32_param_6,
	.param .u32 scaled_masked_softmax_64_f32_param_7,
	.param .u32 scaled_masked_softmax_64_f32_param_8,
	.param .u32 scaled_masked_softmax_64_f32_param_9,
	.param .u32 scaled_masked_softmax_64_f32_param_10,
	.param .u32 scaled_masked_softmax_64_f32_param_11,
	.param .u32 scaled_masked_softmax_64_f32_param_12,
	.param .u32 scaled_masked_softmax_64_f32_param_13,
	.param .u32 scaled_masked_softmax_64_f32_param_14,
	.param .u32 scaled_masked_softmax_64_f32_param_15
)
{
	.reg .pred 	%p<41>;
	.reg .f32 	%f<180>;
	.reg .b32 	%r<212>;
	.reg .b64 	%rd<77>;


	ld.param.u64 	%rd33, [scaled_masked_softmax_64_f32_param_0];
	ld.param.u64 	%rd34, [scaled_masked_softmax_64_f32_param_1];
	ld.param.f32 	%f19, [scaled_masked_softmax_64_f32_param_2];
	ld.param.u64 	%rd35, [scaled_masked_softmax_64_f32_param_3];
	ld.param.u32 	%r59, [scaled_masked_softmax_64_f32_param_6];
	ld.param.s32 	%rd5, [scaled_masked_softmax_64_f32_param_10];
	ld.param.u32 	%r60, [scaled_masked_softmax_64_f32_param_11];
	ld.param.u32 	%r61, [scaled_masked_softmax_64_f32_param_12];
	cvta.to.global.u64 	%rd1, %rd34;
	cvta.to.global.u64 	%rd2, %rd33;
	cvta.to.global.u64 	%rd3, %rd35;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.y;
	cvt.u64.u32 	%rd4, %r2;
	and.b64  	%rd36, %rd5, -4294967296;
	setp.eq.s64 	%p1, %rd36, 0;
	@%p1 bra 	$L__BB19_2;

	rem.s64 	%rd70, %rd4, %rd5;
	bra.uni 	$L__BB19_3;

$L__BB19_2:
	cvt.u32.u64 	%r62, %rd5;
	cvt.u32.u64 	%r63, %rd4;
	rem.u32 	%r64, %r63, %r62;
	cvt.u64.u32 	%rd70, %r64;

$L__BB19_3:
	mov.u32 	%r65, %ctaid.x;
	mov.u32 	%r66, %nctaid.x;
	mov.u32 	%r67, %ctaid.z;
	mov.u32 	%r68, %nctaid.y;
	mad.lo.s32 	%r69, %r68, %r67, %r2;
	mad.lo.s32 	%r70, %r69, %r66, %r65;
	cvt.s64.s32 	%rd9, %r70;
	cvt.s64.s32 	%rd10, %r59;
	cvt.s64.s32 	%rd37, %r60;
	cvt.u64.u32 	%rd38, %r65;
	mul.lo.s64 	%rd39, %rd37, %rd38;
	mul.lo.s64 	%rd40, %rd70, %rd5;
	add.s64 	%rd41, %rd40, %rd39;
	shr.u64 	%rd11, %rd41, 2;
	shr.u32 	%r3, %r1, 5;
	and.b32  	%r4, %r1, 31;
	setp.lt.s32 	%p2, %r59, 1;
	mov.f32 	%f174, 0fFF800000;
	@%p2 bra 	$L__BB19_10;

	add.s32 	%r72, %r59, -1;
	shr.u32 	%r5, %r72, 6;
	add.s32 	%r73, %r5, 1;
	and.b32  	%r199, %r73, 3;
	setp.lt.u32 	%p3, %r72, 192;
	mov.f32 	%f174, 0fFF800000;
	mov.u32 	%r197, 0;
	@%p3 bra 	$L__BB19_7;

	mul.lo.s64 	%rd42, %rd10, %rd9;
	sub.s32 	%r195, %r5, %r199;
	cvt.s64.s32 	%rd43, %r1;
	add.s64 	%rd44, %rd42, %rd43;
	shl.b64 	%rd45, %rd44, 2;
	add.s64 	%rd72, %rd2, %rd45;
	add.s32 	%r75, %r1, 64;
	mul.lo.s32 	%r194, %r61, %r75;
	shl.b32 	%r76, %r1, 2;
	mov.u32 	%r77, data_soft_max_f32;
	add.s32 	%r78, %r77, %r76;
	add.s32 	%r193, %r78, 640;
	mul.lo.s32 	%r79, %r1, %r61;
	cvt.s64.s32 	%rd46, %r79;
	add.s64 	%rd47, %rd11, %rd46;
	shl.b64 	%rd48, %rd47, 2;
	add.s64 	%rd71, %rd1, %rd48;
	shl.b32 	%r10, %r61, 8;
	mul.wide.s32 	%rd14, %r10, 4;
	shl.b32 	%r80, %r61, 6;
	mul.wide.s32 	%rd15, %r80, 4;
	mov.f32 	%f174, 0fFF800000;
	mov.u32 	%r197, 0;

$L__BB19_6:
	.pragma "nounroll";
	ld.global.f32 	%f24, [%rd72];
	ld.global.f32 	%f25, [%rd71];
	fma.rn.f32 	%f26, %f24, %f19, %f25;
	st.shared.f32 	[%r193+-512], %f26;
	max.f32 	%f27, %f174, %f26;
	ld.global.f32 	%f28, [%rd72+256];
	cvt.s64.s32 	%rd49, %r194;
	add.s64 	%rd50, %rd11, %rd49;
	shl.b64 	%rd51, %rd50, 2;
	add.s64 	%rd52, %rd1, %rd51;
	ld.global.f32 	%f29, [%rd52];
	fma.rn.f32 	%f30, %f28, %f19, %f29;
	st.shared.f32 	[%r193+-256], %f30;
	max.f32 	%f31, %f27, %f30;
	ld.global.f32 	%f32, [%rd72+512];
	add.s64 	%rd53, %rd52, %rd15;
	ld.global.f32 	%f33, [%rd53];
	fma.rn.f32 	%f34, %f32, %f19, %f33;
	st.shared.f32 	[%r193], %f34;
	max.f32 	%f35, %f31, %f34;
	ld.global.f32 	%f36, [%rd72+768];
	add.s64 	%rd54, %rd53, %rd15;
	ld.global.f32 	%f37, [%rd54];
	fma.rn.f32 	%f38, %f36, %f19, %f37;
	st.shared.f32 	[%r193+256], %f38;
	max.f32 	%f174, %f35, %f38;
	add.s32 	%r197, %r197, 256;
	add.s64 	%rd72, %rd72, 1024;
	add.s32 	%r194, %r194, %r10;
	add.s32 	%r193, %r193, 1024;
	add.s64 	%rd71, %rd71, %rd14;
	add.s32 	%r195, %r195, -4;
	setp.ne.s32 	%p4, %r195, -1;
	@%p4 bra 	$L__BB19_6;

$L__BB19_7:
	setp.eq.s32 	%p5, %r199, 0;
	@%p5 bra 	$L__BB19_10;

	add.s32 	%r81, %r1, %r197;
	shl.b32 	%r82, %r81, 2;
	mov.u32 	%r83, data_soft_max_f32;
	add.s32 	%r84, %r83, %r82;
	add.s32 	%r198, %r84, 128;
	mul.lo.s32 	%r85, %r61, %r81;
	cvt.s64.s32 	%rd55, %r85;
	add.s64 	%rd56, %rd11, %rd55;
	shl.b64 	%rd57, %rd56, 2;
	add.s64 	%rd74, %rd1, %rd57;
	shl.b32 	%r86, %r61, 6;
	mul.wide.s32 	%rd21, %r86, 4;
	cvt.s64.s32 	%rd58, %r81;
	mul.lo.s64 	%rd59, %rd10, %rd9;
	add.s64 	%rd60, %rd59, %rd58;
	shl.b64 	%rd61, %rd60, 2;
	add.s64 	%rd73, %rd2, %rd61;

$L__BB19_9:
	.pragma "nounroll";
	ld.global.f32 	%f39, [%rd73];
	ld.global.f32 	%f40, [%rd74];
	fma.rn.f32 	%f41, %f39, %f19, %f40;
	st.shared.f32 	[%r198], %f41;
	max.f32 	%f174, %f174, %f41;
	add.s32 	%r198, %r198, 256;
	add.s64 	%rd74, %rd74, %rd21;
	add.s64 	%rd73, %rd73, 256;
	add.s32 	%r199, %r199, -1;
	setp.ne.s32 	%p6, %r199, 0;
	@%p6 bra 	$L__BB19_9;

$L__BB19_10:
	mov.b32 	%r87, %f174;
	mov.u32 	%r88, 31;
	mov.u32 	%r89, 16;
	mov.u32 	%r90, -1;
	shfl.sync.bfly.b32 	%r91|%p7, %r87, %r89, %r88, %r90;
	mov.b32 	%f42, %r91;
	max.f32 	%f43, %f174, %f42;
	mov.b32 	%r92, %f43;
	mov.u32 	%r93, 8;
	shfl.sync.bfly.b32 	%r94|%p8, %r92, %r93, %r88, %r90;
	mov.b32 	%f44, %r94;
	max.f32 	%f45, %f43, %f44;
	mov.b32 	%r95, %f45;
	mov.u32 	%r96, 4;
	shfl.sync.bfly.b32 	%r97|%p9, %r95, %r96, %r88, %r90;
	mov.b32 	%f46, %r97;
	max.f32 	%f47, %f45, %f46;
	mov.b32 	%r98, %f47;
	mov.u32 	%r99, 2;
	shfl.sync.bfly.b32 	%r100|%p10, %r98, %r99, %r88, %r90;
	mov.b32 	%f48, %r100;
	max.f32 	%f49, %f47, %f48;
	mov.b32 	%r101, %f49;
	mov.u32 	%r102, 1;
	shfl.sync.bfly.b32 	%r103|%p11, %r101, %r102, %r88, %r90;
	mov.b32 	%f50, %r103;
	max.f32 	%f8, %f49, %f50;
	shl.b32 	%r104, %r4, 2;
	mov.u32 	%r105, data_soft_max_f32;
	add.s32 	%r25, %r105, %r104;
	setp.ne.s32 	%p12, %r3, 0;
	@%p12 bra 	$L__BB19_12;

	mov.u32 	%r106, -8388608;
	st.shared.u32 	[%r25], %r106;

$L__BB19_12:
	bar.sync 	0;
	shl.b32 	%r107, %r3, 2;
	add.s32 	%r26, %r105, %r107;
	setp.ne.s32 	%p13, %r4, 0;
	@%p13 bra 	$L__BB19_14;

	st.shared.f32 	[%r26], %f8;

$L__BB19_14:
	bar.sync 	0;
	ld.shared.f32 	%f52, [%r25];
	mov.b32 	%r109, %f52;
	mov.u32 	%r110, 31;
	mov.u32 	%r111, 16;
	mov.u32 	%r112, -1;
	shfl.sync.bfly.b32 	%r113|%p15, %r109, %r111, %r110, %r112;
	mov.b32 	%f53, %r113;
	max.f32 	%f54, %f52, %f53;
	mov.b32 	%r114, %f54;
	mov.u32 	%r115, 8;
	shfl.sync.bfly.b32 	%r116|%p16, %r114, %r115, %r110, %r112;
	mov.b32 	%f55, %r116;
	max.f32 	%f56, %f54, %f55;
	mov.b32 	%r117, %f56;
	mov.u32 	%r118, 4;
	shfl.sync.bfly.b32 	%r119|%p17, %r117, %r118, %r110, %r112;
	mov.b32 	%f57, %r119;
	max.f32 	%f58, %f56, %f57;
	mov.b32 	%r120, %f58;
	mov.u32 	%r121, 2;
	shfl.sync.bfly.b32 	%r122|%p18, %r120, %r121, %r110, %r112;
	mov.b32 	%f59, %r122;
	max.f32 	%f60, %f58, %f59;
	mov.b32 	%r123, %f60;
	mov.u32 	%r124, 1;
	shfl.sync.bfly.b32 	%r125|%p19, %r123, %r124, %r110, %r112;
	mov.b32 	%f61, %r125;
	max.f32 	%f9, %f60, %f61;
	mov.f32 	%f179, 0f00000000;
	@%p2 bra 	$L__BB19_21;

	add.s32 	%r127, %r59, -1;
	shr.u32 	%r27, %r127, 6;
	add.s32 	%r128, %r27, 1;
	and.b32  	%r205, %r128, 3;
	setp.lt.u32 	%p20, %r127, 192;
	mov.f32 	%f179, 0f00000000;
	mov.u32 	%r203, 0;
	@%p20 bra 	$L__BB19_18;

	shl.b32 	%r130, %r1, 2;
	add.s32 	%r132, %r105, %r130;
	add.s32 	%r201, %r132, 640;
	sub.s32 	%r200, %r27, %r205;
	mov.f32 	%f179, 0f00000000;
	mov.u32 	%r203, 0;

$L__BB19_17:
	.pragma "nounroll";
	ld.shared.f32 	%f65, [%r201+-512];
	sub.f32 	%f66, %f65, %f9;
	mov.f32 	%f67, 0f3F000000;
	mov.f32 	%f68, 0f3BBB989D;
	fma.rn.f32 	%f69, %f66, %f68, %f67;
	cvt.sat.f32.f32 	%f70, %f69;
	mov.f32 	%f71, 0f4B400001;
	mov.f32 	%f72, 0f437C0000;
	fma.rm.f32 	%f73, %f70, %f72, %f71;
	add.f32 	%f74, %f73, 0fCB40007F;
	neg.f32 	%f75, %f74;
	mov.f32 	%f76, 0f3FB8AA3B;
	fma.rn.f32 	%f77, %f66, %f76, %f75;
	mov.f32 	%f78, 0f32A57060;
	fma.rn.f32 	%f79, %f66, %f78, %f77;
	mov.b32 	%r133, %f73;
	shl.b32 	%r134, %r133, 23;
	mov.b32 	%f80, %r134;
	ex2.approx.ftz.f32 	%f81, %f79;
	mul.f32 	%f82, %f81, %f80;
	add.f32 	%f83, %f179, %f82;
	st.shared.f32 	[%r201+-512], %f82;
	ld.shared.f32 	%f84, [%r201+-256];
	sub.f32 	%f85, %f84, %f9;
	fma.rn.f32 	%f86, %f85, %f68, %f67;
	cvt.sat.f32.f32 	%f87, %f86;
	fma.rm.f32 	%f88, %f87, %f72, %f71;
	add.f32 	%f89, %f88, 0fCB40007F;
	neg.f32 	%f90, %f89;
	fma.rn.f32 	%f91, %f85, %f76, %f90;
	fma.rn.f32 	%f92, %f85, %f78, %f91;
	mov.b32 	%r135, %f88;
	shl.b32 	%r136, %r135, 23;
	mov.b32 	%f93, %r136;
	ex2.approx.ftz.f32 	%f94, %f92;
	mul.f32 	%f95, %f94, %f93;
	add.f32 	%f96, %f83, %f95;
	st.shared.f32 	[%r201+-256], %f95;
	ld.shared.f32 	%f97, [%r201];
	sub.f32 	%f98, %f97, %f9;
	fma.rn.f32 	%f99, %f98, %f68, %f67;
	cvt.sat.f32.f32 	%f100, %f99;
	fma.rm.f32 	%f101, %f100, %f72, %f71;
	add.f32 	%f102, %f101, 0fCB40007F;
	neg.f32 	%f103, %f102;
	fma.rn.f32 	%f104, %f98, %f76, %f103;
	fma.rn.f32 	%f105, %f98, %f78, %f104;
	mov.b32 	%r137, %f101;
	shl.b32 	%r138, %r137, 23;
	mov.b32 	%f106, %r138;
	ex2.approx.ftz.f32 	%f107, %f105;
	mul.f32 	%f108, %f107, %f106;
	add.f32 	%f109, %f96, %f108;
	st.shared.f32 	[%r201], %f108;
	ld.shared.f32 	%f110, [%r201+256];
	sub.f32 	%f111, %f110, %f9;
	fma.rn.f32 	%f112, %f111, %f68, %f67;
	cvt.sat.f32.f32 	%f113, %f112;
	fma.rm.f32 	%f114, %f113, %f72, %f71;
	add.f32 	%f115, %f114, 0fCB40007F;
	neg.f32 	%f116, %f115;
	fma.rn.f32 	%f117, %f111, %f76, %f116;
	fma.rn.f32 	%f118, %f111, %f78, %f117;
	mov.b32 	%r139, %f114;
	shl.b32 	%r140, %r139, 23;
	mov.b32 	%f119, %r140;
	ex2.approx.ftz.f32 	%f120, %f118;
	mul.f32 	%f121, %f120, %f119;
	add.f32 	%f179, %f109, %f121;
	st.shared.f32 	[%r201+256], %f121;
	add.s32 	%r203, %r203, 256;
	add.s32 	%r201, %r201, 1024;
	add.s32 	%r200, %r200, -4;
	setp.ne.s32 	%p21, %r200, -1;
	@%p21 bra 	$L__BB19_17;

$L__BB19_18:
	setp.eq.s32 	%p22, %r205, 0;
	@%p22 bra 	$L__BB19_21;

	add.s32 	%r141, %r1, %r203;
	shl.b32 	%r142, %r141, 2;
	add.s32 	%r144, %r105, %r142;
	add.s32 	%r204, %r144, 128;

$L__BB19_20:
	.pragma "nounroll";
	ld.shared.f32 	%f122, [%r204];
	sub.f32 	%f123, %f122, %f9;
	mov.f32 	%f124, 0f3F000000;
	mov.f32 	%f125, 0f3BBB989D;
	fma.rn.f32 	%f126, %f123, %f125, %f124;
	cvt.sat.f32.f32 	%f127, %f126;
	mov.f32 	%f128, 0f4B400001;
	mov.f32 	%f129, 0f437C0000;
	fma.rm.f32 	%f130, %f127, %f129, %f128;
	add.f32 	%f131, %f130, 0fCB40007F;
	neg.f32 	%f132, %f131;
	mov.f32 	%f133, 0f3FB8AA3B;
	fma.rn.f32 	%f134, %f123, %f133, %f132;
	mov.f32 	%f135, 0f32A57060;
	fma.rn.f32 	%f136, %f123, %f135, %f134;
	mov.b32 	%r145, %f130;
	shl.b32 	%r146, %r145, 23;
	mov.b32 	%f137, %r146;
	ex2.approx.ftz.f32 	%f138, %f136;
	mul.f32 	%f139, %f138, %f137;
	add.f32 	%f179, %f179, %f139;
	st.shared.f32 	[%r204], %f139;
	add.s32 	%r204, %r204, 256;
	add.s32 	%r205, %r205, -1;
	setp.ne.s32 	%p23, %r205, 0;
	@%p23 bra 	$L__BB19_20;

$L__BB19_21:
	mov.b32 	%r147, %f179;
	shfl.sync.bfly.b32 	%r151|%p24, %r147, %r111, %r110, %r112;
	mov.b32 	%f140, %r151;
	add.f32 	%f141, %f179, %f140;
	mov.b32 	%r152, %f141;
	shfl.sync.bfly.b32 	%r154|%p25, %r152, %r115, %r110, %r112;
	mov.b32 	%f142, %r154;
	add.f32 	%f143, %f141, %f142;
	mov.b32 	%r155, %f143;
	shfl.sync.bfly.b32 	%r157|%p26, %r155, %r118, %r110, %r112;
	mov.b32 	%f144, %r157;
	add.f32 	%f145, %f143, %f144;
	mov.b32 	%r158, %f145;
	shfl.sync.bfly.b32 	%r160|%p27, %r158, %r121, %r110, %r112;
	mov.b32 	%f146, %r160;
	add.f32 	%f147, %f145, %f146;
	mov.b32 	%r161, %f147;
	shfl.sync.bfly.b32 	%r163|%p28, %r161, %r124, %r110, %r112;
	mov.b32 	%f148, %r163;
	add.f32 	%f17, %f147, %f148;
	bar.sync 	0;
	@%p12 bra 	$L__BB19_23;

	mov.u32 	%r164, 0;
	st.shared.u32 	[%r25], %r164;

$L__BB19_23:
	bar.sync 	0;
	@%p13 bra 	$L__BB19_25;

	st.shared.f32 	[%r26], %f17;

$L__BB19_25:
	bar.sync 	0;
	ld.shared.f32 	%f149, [%r25];
	mov.b32 	%r165, %f149;
	mov.u32 	%r166, 31;
	mov.u32 	%r167, 16;
	mov.u32 	%r168, -1;
	shfl.sync.bfly.b32 	%r169|%p32, %r165, %r167, %r166, %r168;
	mov.b32 	%f150, %r169;
	add.f32 	%f151, %f149, %f150;
	mov.b32 	%r170, %f151;
	mov.u32 	%r171, 8;
	shfl.sync.bfly.b32 	%r172|%p33, %r170, %r171, %r166, %r168;
	mov.b32 	%f152, %r172;
	add.f32 	%f153, %f151, %f152;
	mov.b32 	%r173, %f153;
	mov.u32 	%r174, 4;
	shfl.sync.bfly.b32 	%r175|%p34, %r173, %r174, %r166, %r168;
	mov.b32 	%f154, %r175;
	add.f32 	%f155, %f153, %f154;
	mov.b32 	%r176, %f155;
	mov.u32 	%r177, 2;
	shfl.sync.bfly.b32 	%r178|%p35, %r176, %r177, %r166, %r168;
	mov.b32 	%f156, %r178;
	add.f32 	%f157, %f155, %f156;
	mov.b32 	%r179, %f157;
	mov.u32 	%r180, 1;
	shfl.sync.bfly.b32 	%r181|%p36, %r179, %r180, %r166, %r168;
	mov.b32 	%f158, %r181;
	add.f32 	%f159, %f157, %f158;
	rcp.rn.f32 	%f18, %f159;
	@%p2 bra 	$L__BB19_32;

	add.s32 	%r183, %r59, -1;
	shr.u32 	%r43, %r183, 6;
	add.s32 	%r184, %r43, 1;
	and.b32  	%r211, %r184, 3;
	setp.lt.u32 	%p37, %r183, 192;
	mov.u32 	%r209, 0;
	@%p37 bra 	$L__BB19_29;

	sub.s32 	%r207, %r43, %r211;
	cvt.s64.s32 	%rd62, %r1;
	mul.lo.s64 	%rd63, %rd10, %rd9;
	add.s64 	%rd64, %rd63, %rd62;
	shl.b64 	%rd65, %rd64, 2;
	add.s64 	%rd75, %rd3, %rd65;
	shl.b32 	%r186, %r1, 2;
	add.s32 	%r188, %r105, %r186;
	add.s32 	%r206, %r188, 640;
	mov.u32 	%r209, 0;

$L__BB19_28:
	.pragma "nounroll";
	ld.shared.f32 	%f160, [%r206+-512];
	mul.f32 	%f161, %f18, %f160;
	st.global.f32 	[%rd75], %f161;
	ld.shared.f32 	%f162, [%r206+-256];
	mul.f32 	%f163, %f18, %f162;
	st.global.f32 	[%rd75+256], %f163;
	ld.shared.f32 	%f164, [%r206];
	mul.f32 	%f165, %f18, %f164;
	st.global.f32 	[%rd75+512], %f165;
	ld.shared.f32 	%f166, [%r206+256];
	mul.f32 	%f167, %f18, %f166;
	st.global.f32 	[%rd75+768], %f167;
	add.s32 	%r209, %r209, 256;
	add.s64 	%rd75, %rd75, 1024;
	add.s32 	%r206, %r206, 1024;
	add.s32 	%r207, %r207, -4;
	setp.ne.s32 	%p38, %r207, -1;
	@%p38 bra 	$L__BB19_28;

$L__BB19_29:
	setp.eq.s32 	%p39, %r211, 0;
	@%p39 bra 	$L__BB19_32;

	mul.lo.s64 	%rd66, %rd10, %rd9;
	add.s32 	%r189, %r1, %r209;
	cvt.s64.s32 	%rd67, %r189;
	add.s64 	%rd68, %rd66, %rd67;
	shl.b64 	%rd69, %rd68, 2;
	add.s64 	%rd76, %rd3, %rd69;
	shl.b32 	%r190, %r189, 2;
	add.s32 	%r192, %r105, %r190;
	add.s32 	%r210, %r192, 128;

$L__BB19_31:
	.pragma "nounroll";
	ld.shared.f32 	%f168, [%r210];
	mul.f32 	%f169, %f18, %f168;
	st.global.f32 	[%rd76], %f169;
	add.s64 	%rd76, %rd76, 256;
	add.s32 	%r210, %r210, 256;
	add.s32 	%r211, %r211, -1;
	setp.ne.s32 	%p40, %r211, 0;
	@%p40 bra 	$L__BB19_31;

$L__BB19_32:
	ret;

}
	// .globl	scaled_masked_softmax_128_f32
.visible .entry scaled_masked_softmax_128_f32(
	.param .u64 scaled_masked_softmax_128_f32_param_0,
	.param .u64 scaled_masked_softmax_128_f32_param_1,
	.param .f32 scaled_masked_softmax_128_f32_param_2,
	.param .u64 scaled_masked_softmax_128_f32_param_3,
	.param .u32 scaled_masked_softmax_128_f32_param_4,
	.param .u32 scaled_masked_softmax_128_f32_param_5,
	.param .u32 scaled_masked_softmax_128_f32_param_6,
	.param .u32 scaled_masked_softmax_128_f32_param_7,
	.param .u32 scaled_masked_softmax_128_f32_param_8,
	.param .u32 scaled_masked_softmax_128_f32_param_9,
	.param .u32 scaled_masked_softmax_128_f32_param_10,
	.param .u32 scaled_masked_softmax_128_f32_param_11,
	.param .u32 scaled_masked_softmax_128_f32_param_12,
	.param .u32 scaled_masked_softmax_128_f32_param_13,
	.param .u32 scaled_masked_softmax_128_f32_param_14,
	.param .u32 scaled_masked_softmax_128_f32_param_15
)
{
	.reg .pred 	%p<41>;
	.reg .f32 	%f<180>;
	.reg .b32 	%r<212>;
	.reg .b64 	%rd<77>;


	ld.param.u64 	%rd33, [scaled_masked_softmax_128_f32_param_0];
	ld.param.u64 	%rd34, [scaled_masked_softmax_128_f32_param_1];
	ld.param.f32 	%f19, [scaled_masked_softmax_128_f32_param_2];
	ld.param.u64 	%rd35, [scaled_masked_softmax_128_f32_param_3];
	ld.param.u32 	%r59, [scaled_masked_softmax_128_f32_param_6];
	ld.param.s32 	%rd5, [scaled_masked_softmax_128_f32_param_10];
	ld.param.u32 	%r60, [scaled_masked_softmax_128_f32_param_11];
	ld.param.u32 	%r61, [scaled_masked_softmax_128_f32_param_12];
	cvta.to.global.u64 	%rd1, %rd34;
	cvta.to.global.u64 	%rd2, %rd33;
	cvta.to.global.u64 	%rd3, %rd35;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.y;
	cvt.u64.u32 	%rd4, %r2;
	and.b64  	%rd36, %rd5, -4294967296;
	setp.eq.s64 	%p1, %rd36, 0;
	@%p1 bra 	$L__BB20_2;

	rem.s64 	%rd70, %rd4, %rd5;
	bra.uni 	$L__BB20_3;

$L__BB20_2:
	cvt.u32.u64 	%r62, %rd5;
	cvt.u32.u64 	%r63, %rd4;
	rem.u32 	%r64, %r63, %r62;
	cvt.u64.u32 	%rd70, %r64;

$L__BB20_3:
	mov.u32 	%r65, %ctaid.x;
	mov.u32 	%r66, %nctaid.x;
	mov.u32 	%r67, %ctaid.z;
	mov.u32 	%r68, %nctaid.y;
	mad.lo.s32 	%r69, %r68, %r67, %r2;
	mad.lo.s32 	%r70, %r69, %r66, %r65;
	cvt.s64.s32 	%rd9, %r70;
	cvt.s64.s32 	%rd10, %r59;
	cvt.s64.s32 	%rd37, %r60;
	cvt.u64.u32 	%rd38, %r65;
	mul.lo.s64 	%rd39, %rd37, %rd38;
	mul.lo.s64 	%rd40, %rd70, %rd5;
	add.s64 	%rd41, %rd40, %rd39;
	shr.u64 	%rd11, %rd41, 2;
	shr.u32 	%r3, %r1, 5;
	and.b32  	%r4, %r1, 31;
	setp.lt.s32 	%p2, %r59, 1;
	mov.f32 	%f174, 0fFF800000;
	@%p2 bra 	$L__BB20_10;

	add.s32 	%r72, %r59, -1;
	shr.u32 	%r5, %r72, 7;
	add.s32 	%r73, %r5, 1;
	and.b32  	%r199, %r73, 3;
	setp.lt.u32 	%p3, %r72, 384;
	mov.f32 	%f174, 0fFF800000;
	mov.u32 	%r197, 0;
	@%p3 bra 	$L__BB20_7;

	mul.lo.s64 	%rd42, %rd10, %rd9;
	sub.s32 	%r195, %r5, %r199;
	cvt.s64.s32 	%rd43, %r1;
	add.s64 	%rd44, %rd42, %rd43;
	shl.b64 	%rd45, %rd44, 2;
	add.s64 	%rd72, %rd2, %rd45;
	add.s32 	%r75, %r1, 128;
	mul.lo.s32 	%r194, %r61, %r75;
	shl.b32 	%r76, %r1, 2;
	mov.u32 	%r77, data_soft_max_f32;
	add.s32 	%r78, %r77, %r76;
	add.s32 	%r193, %r78, 1152;
	mul.lo.s32 	%r79, %r1, %r61;
	cvt.s64.s32 	%rd46, %r79;
	add.s64 	%rd47, %rd11, %rd46;
	shl.b64 	%rd48, %rd47, 2;
	add.s64 	%rd71, %rd1, %rd48;
	shl.b32 	%r10, %r61, 9;
	mul.wide.s32 	%rd14, %r10, 4;
	shl.b32 	%r80, %r61, 7;
	mul.wide.s32 	%rd15, %r80, 4;
	mov.f32 	%f174, 0fFF800000;
	mov.u32 	%r197, 0;

$L__BB20_6:
	.pragma "nounroll";
	ld.global.f32 	%f24, [%rd72];
	ld.global.f32 	%f25, [%rd71];
	fma.rn.f32 	%f26, %f24, %f19, %f25;
	st.shared.f32 	[%r193+-1024], %f26;
	max.f32 	%f27, %f174, %f26;
	ld.global.f32 	%f28, [%rd72+512];
	cvt.s64.s32 	%rd49, %r194;
	add.s64 	%rd50, %rd11, %rd49;
	shl.b64 	%rd51, %rd50, 2;
	add.s64 	%rd52, %rd1, %rd51;
	ld.global.f32 	%f29, [%rd52];
	fma.rn.f32 	%f30, %f28, %f19, %f29;
	st.shared.f32 	[%r193+-512], %f30;
	max.f32 	%f31, %f27, %f30;
	ld.global.f32 	%f32, [%rd72+1024];
	add.s64 	%rd53, %rd52, %rd15;
	ld.global.f32 	%f33, [%rd53];
	fma.rn.f32 	%f34, %f32, %f19, %f33;
	st.shared.f32 	[%r193], %f34;
	max.f32 	%f35, %f31, %f34;
	ld.global.f32 	%f36, [%rd72+1536];
	add.s64 	%rd54, %rd53, %rd15;
	ld.global.f32 	%f37, [%rd54];
	fma.rn.f32 	%f38, %f36, %f19, %f37;
	st.shared.f32 	[%r193+512], %f38;
	max.f32 	%f174, %f35, %f38;
	add.s32 	%r197, %r197, 512;
	add.s64 	%rd72, %rd72, 2048;
	add.s32 	%r194, %r194, %r10;
	add.s32 	%r193, %r193, 2048;
	add.s64 	%rd71, %rd71, %rd14;
	add.s32 	%r195, %r195, -4;
	setp.ne.s32 	%p4, %r195, -1;
	@%p4 bra 	$L__BB20_6;

$L__BB20_7:
	setp.eq.s32 	%p5, %r199, 0;
	@%p5 bra 	$L__BB20_10;

	add.s32 	%r81, %r1, %r197;
	shl.b32 	%r82, %r81, 2;
	mov.u32 	%r83, data_soft_max_f32;
	add.s32 	%r84, %r83, %r82;
	add.s32 	%r198, %r84, 128;
	mul.lo.s32 	%r85, %r61, %r81;
	cvt.s64.s32 	%rd55, %r85;
	add.s64 	%rd56, %rd11, %rd55;
	shl.b64 	%rd57, %rd56, 2;
	add.s64 	%rd74, %rd1, %rd57;
	shl.b32 	%r86, %r61, 7;
	mul.wide.s32 	%rd21, %r86, 4;
	cvt.s64.s32 	%rd58, %r81;
	mul.lo.s64 	%rd59, %rd10, %rd9;
	add.s64 	%rd60, %rd59, %rd58;
	shl.b64 	%rd61, %rd60, 2;
	add.s64 	%rd73, %rd2, %rd61;

$L__BB20_9:
	.pragma "nounroll";
	ld.global.f32 	%f39, [%rd73];
	ld.global.f32 	%f40, [%rd74];
	fma.rn.f32 	%f41, %f39, %f19, %f40;
	st.shared.f32 	[%r198], %f41;
	max.f32 	%f174, %f174, %f41;
	add.s32 	%r198, %r198, 512;
	add.s64 	%rd74, %rd74, %rd21;
	add.s64 	%rd73, %rd73, 512;
	add.s32 	%r199, %r199, -1;
	setp.ne.s32 	%p6, %r199, 0;
	@%p6 bra 	$L__BB20_9;

$L__BB20_10:
	mov.b32 	%r87, %f174;
	mov.u32 	%r88, 31;
	mov.u32 	%r89, 16;
	mov.u32 	%r90, -1;
	shfl.sync.bfly.b32 	%r91|%p7, %r87, %r89, %r88, %r90;
	mov.b32 	%f42, %r91;
	max.f32 	%f43, %f174, %f42;
	mov.b32 	%r92, %f43;
	mov.u32 	%r93, 8;
	shfl.sync.bfly.b32 	%r94|%p8, %r92, %r93, %r88, %r90;
	mov.b32 	%f44, %r94;
	max.f32 	%f45, %f43, %f44;
	mov.b32 	%r95, %f45;
	mov.u32 	%r96, 4;
	shfl.sync.bfly.b32 	%r97|%p9, %r95, %r96, %r88, %r90;
	mov.b32 	%f46, %r97;
	max.f32 	%f47, %f45, %f46;
	mov.b32 	%r98, %f47;
	mov.u32 	%r99, 2;
	shfl.sync.bfly.b32 	%r100|%p10, %r98, %r99, %r88, %r90;
	mov.b32 	%f48, %r100;
	max.f32 	%f49, %f47, %f48;
	mov.b32 	%r101, %f49;
	mov.u32 	%r102, 1;
	shfl.sync.bfly.b32 	%r103|%p11, %r101, %r102, %r88, %r90;
	mov.b32 	%f50, %r103;
	max.f32 	%f8, %f49, %f50;
	shl.b32 	%r104, %r4, 2;
	mov.u32 	%r105, data_soft_max_f32;
	add.s32 	%r25, %r105, %r104;
	setp.ne.s32 	%p12, %r3, 0;
	@%p12 bra 	$L__BB20_12;

	mov.u32 	%r106, -8388608;
	st.shared.u32 	[%r25], %r106;

$L__BB20_12:
	bar.sync 	0;
	shl.b32 	%r107, %r3, 2;
	add.s32 	%r26, %r105, %r107;
	setp.ne.s32 	%p13, %r4, 0;
	@%p13 bra 	$L__BB20_14;

	st.shared.f32 	[%r26], %f8;

$L__BB20_14:
	bar.sync 	0;
	ld.shared.f32 	%f52, [%r25];
	mov.b32 	%r109, %f52;
	mov.u32 	%r110, 31;
	mov.u32 	%r111, 16;
	mov.u32 	%r112, -1;
	shfl.sync.bfly.b32 	%r113|%p15, %r109, %r111, %r110, %r112;
	mov.b32 	%f53, %r113;
	max.f32 	%f54, %f52, %f53;
	mov.b32 	%r114, %f54;
	mov.u32 	%r115, 8;
	shfl.sync.bfly.b32 	%r116|%p16, %r114, %r115, %r110, %r112;
	mov.b32 	%f55, %r116;
	max.f32 	%f56, %f54, %f55;
	mov.b32 	%r117, %f56;
	mov.u32 	%r118, 4;
	shfl.sync.bfly.b32 	%r119|%p17, %r117, %r118, %r110, %r112;
	mov.b32 	%f57, %r119;
	max.f32 	%f58, %f56, %f57;
	mov.b32 	%r120, %f58;
	mov.u32 	%r121, 2;
	shfl.sync.bfly.b32 	%r122|%p18, %r120, %r121, %r110, %r112;
	mov.b32 	%f59, %r122;
	max.f32 	%f60, %f58, %f59;
	mov.b32 	%r123, %f60;
	mov.u32 	%r124, 1;
	shfl.sync.bfly.b32 	%r125|%p19, %r123, %r124, %r110, %r112;
	mov.b32 	%f61, %r125;
	max.f32 	%f9, %f60, %f61;
	mov.f32 	%f179, 0f00000000;
	@%p2 bra 	$L__BB20_21;

	add.s32 	%r127, %r59, -1;
	shr.u32 	%r27, %r127, 7;
	add.s32 	%r128, %r27, 1;
	and.b32  	%r205, %r128, 3;
	setp.lt.u32 	%p20, %r127, 384;
	mov.f32 	%f179, 0f00000000;
	mov.u32 	%r203, 0;
	@%p20 bra 	$L__BB20_18;

	shl.b32 	%r130, %r1, 2;
	add.s32 	%r132, %r105, %r130;
	add.s32 	%r201, %r132, 1152;
	sub.s32 	%r200, %r27, %r205;
	mov.f32 	%f179, 0f00000000;
	mov.u32 	%r203, 0;

$L__BB20_17:
	.pragma "nounroll";
	ld.shared.f32 	%f65, [%r201+-1024];
	sub.f32 	%f66, %f65, %f9;
	mov.f32 	%f67, 0f3F000000;
	mov.f32 	%f68, 0f3BBB989D;
	fma.rn.f32 	%f69, %f66, %f68, %f67;
	cvt.sat.f32.f32 	%f70, %f69;
	mov.f32 	%f71, 0f4B400001;
	mov.f32 	%f72, 0f437C0000;
	fma.rm.f32 	%f73, %f70, %f72, %f71;
	add.f32 	%f74, %f73, 0fCB40007F;
	neg.f32 	%f75, %f74;
	mov.f32 	%f76, 0f3FB8AA3B;
	fma.rn.f32 	%f77, %f66, %f76, %f75;
	mov.f32 	%f78, 0f32A57060;
	fma.rn.f32 	%f79, %f66, %f78, %f77;
	mov.b32 	%r133, %f73;
	shl.b32 	%r134, %r133, 23;
	mov.b32 	%f80, %r134;
	ex2.approx.ftz.f32 	%f81, %f79;
	mul.f32 	%f82, %f81, %f80;
	add.f32 	%f83, %f179, %f82;
	st.shared.f32 	[%r201+-1024], %f82;
	ld.shared.f32 	%f84, [%r201+-512];
	sub.f32 	%f85, %f84, %f9;
	fma.rn.f32 	%f86, %f85, %f68, %f67;
	cvt.sat.f32.f32 	%f87, %f86;
	fma.rm.f32 	%f88, %f87, %f72, %f71;
	add.f32 	%f89, %f88, 0fCB40007F;
	neg.f32 	%f90, %f89;
	fma.rn.f32 	%f91, %f85, %f76, %f90;
	fma.rn.f32 	%f92, %f85, %f78, %f91;
	mov.b32 	%r135, %f88;
	shl.b32 	%r136, %r135, 23;
	mov.b32 	%f93, %r136;
	ex2.approx.ftz.f32 	%f94, %f92;
	mul.f32 	%f95, %f94, %f93;
	add.f32 	%f96, %f83, %f95;
	st.shared.f32 	[%r201+-512], %f95;
	ld.shared.f32 	%f97, [%r201];
	sub.f32 	%f98, %f97, %f9;
	fma.rn.f32 	%f99, %f98, %f68, %f67;
	cvt.sat.f32.f32 	%f100, %f99;
	fma.rm.f32 	%f101, %f100, %f72, %f71;
	add.f32 	%f102, %f101, 0fCB40007F;
	neg.f32 	%f103, %f102;
	fma.rn.f32 	%f104, %f98, %f76, %f103;
	fma.rn.f32 	%f105, %f98, %f78, %f104;
	mov.b32 	%r137, %f101;
	shl.b32 	%r138, %r137, 23;
	mov.b32 	%f106, %r138;
	ex2.approx.ftz.f32 	%f107, %f105;
	mul.f32 	%f108, %f107, %f106;
	add.f32 	%f109, %f96, %f108;
	st.shared.f32 	[%r201], %f108;
	ld.shared.f32 	%f110, [%r201+512];
	sub.f32 	%f111, %f110, %f9;
	fma.rn.f32 	%f112, %f111, %f68, %f67;
	cvt.sat.f32.f32 	%f113, %f112;
	fma.rm.f32 	%f114, %f113, %f72, %f71;
	add.f32 	%f115, %f114, 0fCB40007F;
	neg.f32 	%f116, %f115;
	fma.rn.f32 	%f117, %f111, %f76, %f116;
	fma.rn.f32 	%f118, %f111, %f78, %f117;
	mov.b32 	%r139, %f114;
	shl.b32 	%r140, %r139, 23;
	mov.b32 	%f119, %r140;
	ex2.approx.ftz.f32 	%f120, %f118;
	mul.f32 	%f121, %f120, %f119;
	add.f32 	%f179, %f109, %f121;
	st.shared.f32 	[%r201+512], %f121;
	add.s32 	%r203, %r203, 512;
	add.s32 	%r201, %r201, 2048;
	add.s32 	%r200, %r200, -4;
	setp.ne.s32 	%p21, %r200, -1;
	@%p21 bra 	$L__BB20_17;

$L__BB20_18:
	setp.eq.s32 	%p22, %r205, 0;
	@%p22 bra 	$L__BB20_21;

	add.s32 	%r141, %r1, %r203;
	shl.b32 	%r142, %r141, 2;
	add.s32 	%r144, %r105, %r142;
	add.s32 	%r204, %r144, 128;

$L__BB20_20:
	.pragma "nounroll";
	ld.shared.f32 	%f122, [%r204];
	sub.f32 	%f123, %f122, %f9;
	mov.f32 	%f124, 0f3F000000;
	mov.f32 	%f125, 0f3BBB989D;
	fma.rn.f32 	%f126, %f123, %f125, %f124;
	cvt.sat.f32.f32 	%f127, %f126;
	mov.f32 	%f128, 0f4B400001;
	mov.f32 	%f129, 0f437C0000;
	fma.rm.f32 	%f130, %f127, %f129, %f128;
	add.f32 	%f131, %f130, 0fCB40007F;
	neg.f32 	%f132, %f131;
	mov.f32 	%f133, 0f3FB8AA3B;
	fma.rn.f32 	%f134, %f123, %f133, %f132;
	mov.f32 	%f135, 0f32A57060;
	fma.rn.f32 	%f136, %f123, %f135, %f134;
	mov.b32 	%r145, %f130;
	shl.b32 	%r146, %r145, 23;
	mov.b32 	%f137, %r146;
	ex2.approx.ftz.f32 	%f138, %f136;
	mul.f32 	%f139, %f138, %f137;
	add.f32 	%f179, %f179, %f139;
	st.shared.f32 	[%r204], %f139;
	add.s32 	%r204, %r204, 512;
	add.s32 	%r205, %r205, -1;
	setp.ne.s32 	%p23, %r205, 0;
	@%p23 bra 	$L__BB20_20;

$L__BB20_21:
	mov.b32 	%r147, %f179;
	shfl.sync.bfly.b32 	%r151|%p24, %r147, %r111, %r110, %r112;
	mov.b32 	%f140, %r151;
	add.f32 	%f141, %f179, %f140;
	mov.b32 	%r152, %f141;
	shfl.sync.bfly.b32 	%r154|%p25, %r152, %r115, %r110, %r112;
	mov.b32 	%f142, %r154;
	add.f32 	%f143, %f141, %f142;
	mov.b32 	%r155, %f143;
	shfl.sync.bfly.b32 	%r157|%p26, %r155, %r118, %r110, %r112;
	mov.b32 	%f144, %r157;
	add.f32 	%f145, %f143, %f144;
	mov.b32 	%r158, %f145;
	shfl.sync.bfly.b32 	%r160|%p27, %r158, %r121, %r110, %r112;
	mov.b32 	%f146, %r160;
	add.f32 	%f147, %f145, %f146;
	mov.b32 	%r161, %f147;
	shfl.sync.bfly.b32 	%r163|%p28, %r161, %r124, %r110, %r112;
	mov.b32 	%f148, %r163;
	add.f32 	%f17, %f147, %f148;
	bar.sync 	0;
	@%p12 bra 	$L__BB20_23;

	mov.u32 	%r164, 0;
	st.shared.u32 	[%r25], %r164;

$L__BB20_23:
	bar.sync 	0;
	@%p13 bra 	$L__BB20_25;

	st.shared.f32 	[%r26], %f17;

$L__BB20_25:
	bar.sync 	0;
	ld.shared.f32 	%f149, [%r25];
	mov.b32 	%r165, %f149;
	mov.u32 	%r166, 31;
	mov.u32 	%r167, 16;
	mov.u32 	%r168, -1;
	shfl.sync.bfly.b32 	%r169|%p32, %r165, %r167, %r166, %r168;
	mov.b32 	%f150, %r169;
	add.f32 	%f151, %f149, %f150;
	mov.b32 	%r170, %f151;
	mov.u32 	%r171, 8;
	shfl.sync.bfly.b32 	%r172|%p33, %r170, %r171, %r166, %r168;
	mov.b32 	%f152, %r172;
	add.f32 	%f153, %f151, %f152;
	mov.b32 	%r173, %f153;
	mov.u32 	%r174, 4;
	shfl.sync.bfly.b32 	%r175|%p34, %r173, %r174, %r166, %r168;
	mov.b32 	%f154, %r175;
	add.f32 	%f155, %f153, %f154;
	mov.b32 	%r176, %f155;
	mov.u32 	%r177, 2;
	shfl.sync.bfly.b32 	%r178|%p35, %r176, %r177, %r166, %r168;
	mov.b32 	%f156, %r178;
	add.f32 	%f157, %f155, %f156;
	mov.b32 	%r179, %f157;
	mov.u32 	%r180, 1;
	shfl.sync.bfly.b32 	%r181|%p36, %r179, %r180, %r166, %r168;
	mov.b32 	%f158, %r181;
	add.f32 	%f159, %f157, %f158;
	rcp.rn.f32 	%f18, %f159;
	@%p2 bra 	$L__BB20_32;

	add.s32 	%r183, %r59, -1;
	shr.u32 	%r43, %r183, 7;
	add.s32 	%r184, %r43, 1;
	and.b32  	%r211, %r184, 3;
	setp.lt.u32 	%p37, %r183, 384;
	mov.u32 	%r209, 0;
	@%p37 bra 	$L__BB20_29;

	sub.s32 	%r207, %r43, %r211;
	cvt.s64.s32 	%rd62, %r1;
	mul.lo.s64 	%rd63, %rd10, %rd9;
	add.s64 	%rd64, %rd63, %rd62;
	shl.b64 	%rd65, %rd64, 2;
	add.s64 	%rd75, %rd3, %rd65;
	shl.b32 	%r186, %r1, 2;
	add.s32 	%r188, %r105, %r186;
	add.s32 	%r206, %r188, 1152;
	mov.u32 	%r209, 0;

$L__BB20_28:
	.pragma "nounroll";
	ld.shared.f32 	%f160, [%r206+-1024];
	mul.f32 	%f161, %f18, %f160;
	st.global.f32 	[%rd75], %f161;
	ld.shared.f32 	%f162, [%r206+-512];
	mul.f32 	%f163, %f18, %f162;
	st.global.f32 	[%rd75+512], %f163;
	ld.shared.f32 	%f164, [%r206];
	mul.f32 	%f165, %f18, %f164;
	st.global.f32 	[%rd75+1024], %f165;
	ld.shared.f32 	%f166, [%r206+512];
	mul.f32 	%f167, %f18, %f166;
	st.global.f32 	[%rd75+1536], %f167;
	add.s32 	%r209, %r209, 512;
	add.s64 	%rd75, %rd75, 2048;
	add.s32 	%r206, %r206, 2048;
	add.s32 	%r207, %r207, -4;
	setp.ne.s32 	%p38, %r207, -1;
	@%p38 bra 	$L__BB20_28;

$L__BB20_29:
	setp.eq.s32 	%p39, %r211, 0;
	@%p39 bra 	$L__BB20_32;

	mul.lo.s64 	%rd66, %rd10, %rd9;
	add.s32 	%r189, %r1, %r209;
	cvt.s64.s32 	%rd67, %r189;
	add.s64 	%rd68, %rd66, %rd67;
	shl.b64 	%rd69, %rd68, 2;
	add.s64 	%rd76, %rd3, %rd69;
	shl.b32 	%r190, %r189, 2;
	add.s32 	%r192, %r105, %r190;
	add.s32 	%r210, %r192, 128;

$L__BB20_31:
	.pragma "nounroll";
	ld.shared.f32 	%f168, [%r210];
	mul.f32 	%f169, %f18, %f168;
	st.global.f32 	[%rd76], %f169;
	add.s64 	%rd76, %rd76, 512;
	add.s32 	%r210, %r210, 512;
	add.s32 	%r211, %r211, -1;
	setp.ne.s32 	%p40, %r211, 0;
	@%p40 bra 	$L__BB20_31;

$L__BB20_32:
	ret;

}
	// .globl	scaled_masked_softmax_256_f32
.visible .entry scaled_masked_softmax_256_f32(
	.param .u64 scaled_masked_softmax_256_f32_param_0,
	.param .u64 scaled_masked_softmax_256_f32_param_1,
	.param .f32 scaled_masked_softmax_256_f32_param_2,
	.param .u64 scaled_masked_softmax_256_f32_param_3,
	.param .u32 scaled_masked_softmax_256_f32_param_4,
	.param .u32 scaled_masked_softmax_256_f32_param_5,
	.param .u32 scaled_masked_softmax_256_f32_param_6,
	.param .u32 scaled_masked_softmax_256_f32_param_7,
	.param .u32 scaled_masked_softmax_256_f32_param_8,
	.param .u32 scaled_masked_softmax_256_f32_param_9,
	.param .u32 scaled_masked_softmax_256_f32_param_10,
	.param .u32 scaled_masked_softmax_256_f32_param_11,
	.param .u32 scaled_masked_softmax_256_f32_param_12,
	.param .u32 scaled_masked_softmax_256_f32_param_13,
	.param .u32 scaled_masked_softmax_256_f32_param_14,
	.param .u32 scaled_masked_softmax_256_f32_param_15
)
{
	.reg .pred 	%p<41>;
	.reg .f32 	%f<180>;
	.reg .b32 	%r<212>;
	.reg .b64 	%rd<77>;


	ld.param.u64 	%rd33, [scaled_masked_softmax_256_f32_param_0];
	ld.param.u64 	%rd34, [scaled_masked_softmax_256_f32_param_1];
	ld.param.f32 	%f19, [scaled_masked_softmax_256_f32_param_2];
	ld.param.u64 	%rd35, [scaled_masked_softmax_256_f32_param_3];
	ld.param.u32 	%r59, [scaled_masked_softmax_256_f32_param_6];
	ld.param.s32 	%rd5, [scaled_masked_softmax_256_f32_param_10];
	ld.param.u32 	%r60, [scaled_masked_softmax_256_f32_param_11];
	ld.param.u32 	%r61, [scaled_masked_softmax_256_f32_param_12];
	cvta.to.global.u64 	%rd1, %rd34;
	cvta.to.global.u64 	%rd2, %rd33;
	cvta.to.global.u64 	%rd3, %rd35;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.y;
	cvt.u64.u32 	%rd4, %r2;
	and.b64  	%rd36, %rd5, -4294967296;
	setp.eq.s64 	%p1, %rd36, 0;
	@%p1 bra 	$L__BB21_2;

	rem.s64 	%rd70, %rd4, %rd5;
	bra.uni 	$L__BB21_3;

$L__BB21_2:
	cvt.u32.u64 	%r62, %rd5;
	cvt.u32.u64 	%r63, %rd4;
	rem.u32 	%r64, %r63, %r62;
	cvt.u64.u32 	%rd70, %r64;

$L__BB21_3:
	mov.u32 	%r65, %ctaid.x;
	mov.u32 	%r66, %nctaid.x;
	mov.u32 	%r67, %ctaid.z;
	mov.u32 	%r68, %nctaid.y;
	mad.lo.s32 	%r69, %r68, %r67, %r2;
	mad.lo.s32 	%r70, %r69, %r66, %r65;
	cvt.s64.s32 	%rd9, %r70;
	cvt.s64.s32 	%rd10, %r59;
	cvt.s64.s32 	%rd37, %r60;
	cvt.u64.u32 	%rd38, %r65;
	mul.lo.s64 	%rd39, %rd37, %rd38;
	mul.lo.s64 	%rd40, %rd70, %rd5;
	add.s64 	%rd41, %rd40, %rd39;
	shr.u64 	%rd11, %rd41, 2;
	shr.u32 	%r3, %r1, 5;
	and.b32  	%r4, %r1, 31;
	setp.lt.s32 	%p2, %r59, 1;
	mov.f32 	%f174, 0fFF800000;
	@%p2 bra 	$L__BB21_10;

	add.s32 	%r72, %r59, -1;
	shr.u32 	%r5, %r72, 8;
	add.s32 	%r73, %r5, 1;
	and.b32  	%r199, %r73, 3;
	setp.lt.u32 	%p3, %r72, 768;
	mov.f32 	%f174, 0fFF800000;
	mov.u32 	%r197, 0;
	@%p3 bra 	$L__BB21_7;

	mul.lo.s64 	%rd42, %rd10, %rd9;
	sub.s32 	%r195, %r5, %r199;
	cvt.s64.s32 	%rd43, %r1;
	add.s64 	%rd44, %rd42, %rd43;
	shl.b64 	%rd45, %rd44, 2;
	add.s64 	%rd72, %rd2, %rd45;
	add.s32 	%r75, %r1, 256;
	mul.lo.s32 	%r194, %r61, %r75;
	shl.b32 	%r76, %r1, 2;
	mov.u32 	%r77, data_soft_max_f32;
	add.s32 	%r78, %r77, %r76;
	add.s32 	%r193, %r78, 2176;
	mul.lo.s32 	%r79, %r1, %r61;
	cvt.s64.s32 	%rd46, %r79;
	add.s64 	%rd47, %rd11, %rd46;
	shl.b64 	%rd48, %rd47, 2;
	add.s64 	%rd71, %rd1, %rd48;
	shl.b32 	%r10, %r61, 10;
	mul.wide.s32 	%rd14, %r10, 4;
	shl.b32 	%r80, %r61, 8;
	mul.wide.s32 	%rd15, %r80, 4;
	mov.f32 	%f174, 0fFF800000;
	mov.u32 	%r197, 0;

$L__BB21_6:
	.pragma "nounroll";
	ld.global.f32 	%f24, [%rd72];
	ld.global.f32 	%f25, [%rd71];
	fma.rn.f32 	%f26, %f24, %f19, %f25;
	st.shared.f32 	[%r193+-2048], %f26;
	max.f32 	%f27, %f174, %f26;
	ld.global.f32 	%f28, [%rd72+1024];
	cvt.s64.s32 	%rd49, %r194;
	add.s64 	%rd50, %rd11, %rd49;
	shl.b64 	%rd51, %rd50, 2;
	add.s64 	%rd52, %rd1, %rd51;
	ld.global.f32 	%f29, [%rd52];
	fma.rn.f32 	%f30, %f28, %f19, %f29;
	st.shared.f32 	[%r193+-1024], %f30;
	max.f32 	%f31, %f27, %f30;
	ld.global.f32 	%f32, [%rd72+2048];
	add.s64 	%rd53, %rd52, %rd15;
	ld.global.f32 	%f33, [%rd53];
	fma.rn.f32 	%f34, %f32, %f19, %f33;
	st.shared.f32 	[%r193], %f34;
	max.f32 	%f35, %f31, %f34;
	ld.global.f32 	%f36, [%rd72+3072];
	add.s64 	%rd54, %rd53, %rd15;
	ld.global.f32 	%f37, [%rd54];
	fma.rn.f32 	%f38, %f36, %f19, %f37;
	st.shared.f32 	[%r193+1024], %f38;
	max.f32 	%f174, %f35, %f38;
	add.s32 	%r197, %r197, 1024;
	add.s64 	%rd72, %rd72, 4096;
	add.s32 	%r194, %r194, %r10;
	add.s32 	%r193, %r193, 4096;
	add.s64 	%rd71, %rd71, %rd14;
	add.s32 	%r195, %r195, -4;
	setp.ne.s32 	%p4, %r195, -1;
	@%p4 bra 	$L__BB21_6;

$L__BB21_7:
	setp.eq.s32 	%p5, %r199, 0;
	@%p5 bra 	$L__BB21_10;

	add.s32 	%r81, %r1, %r197;
	shl.b32 	%r82, %r81, 2;
	mov.u32 	%r83, data_soft_max_f32;
	add.s32 	%r84, %r83, %r82;
	add.s32 	%r198, %r84, 128;
	mul.lo.s32 	%r85, %r61, %r81;
	cvt.s64.s32 	%rd55, %r85;
	add.s64 	%rd56, %rd11, %rd55;
	shl.b64 	%rd57, %rd56, 2;
	add.s64 	%rd74, %rd1, %rd57;
	shl.b32 	%r86, %r61, 8;
	mul.wide.s32 	%rd21, %r86, 4;
	cvt.s64.s32 	%rd58, %r81;
	mul.lo.s64 	%rd59, %rd10, %rd9;
	add.s64 	%rd60, %rd59, %rd58;
	shl.b64 	%rd61, %rd60, 2;
	add.s64 	%rd73, %rd2, %rd61;

$L__BB21_9:
	.pragma "nounroll";
	ld.global.f32 	%f39, [%rd73];
	ld.global.f32 	%f40, [%rd74];
	fma.rn.f32 	%f41, %f39, %f19, %f40;
	st.shared.f32 	[%r198], %f41;
	max.f32 	%f174, %f174, %f41;
	add.s32 	%r198, %r198, 1024;
	add.s64 	%rd74, %rd74, %rd21;
	add.s64 	%rd73, %rd73, 1024;
	add.s32 	%r199, %r199, -1;
	setp.ne.s32 	%p6, %r199, 0;
	@%p6 bra 	$L__BB21_9;

$L__BB21_10:
	mov.b32 	%r87, %f174;
	mov.u32 	%r88, 31;
	mov.u32 	%r89, 16;
	mov.u32 	%r90, -1;
	shfl.sync.bfly.b32 	%r91|%p7, %r87, %r89, %r88, %r90;
	mov.b32 	%f42, %r91;
	max.f32 	%f43, %f174, %f42;
	mov.b32 	%r92, %f43;
	mov.u32 	%r93, 8;
	shfl.sync.bfly.b32 	%r94|%p8, %r92, %r93, %r88, %r90;
	mov.b32 	%f44, %r94;
	max.f32 	%f45, %f43, %f44;
	mov.b32 	%r95, %f45;
	mov.u32 	%r96, 4;
	shfl.sync.bfly.b32 	%r97|%p9, %r95, %r96, %r88, %r90;
	mov.b32 	%f46, %r97;
	max.f32 	%f47, %f45, %f46;
	mov.b32 	%r98, %f47;
	mov.u32 	%r99, 2;
	shfl.sync.bfly.b32 	%r100|%p10, %r98, %r99, %r88, %r90;
	mov.b32 	%f48, %r100;
	max.f32 	%f49, %f47, %f48;
	mov.b32 	%r101, %f49;
	mov.u32 	%r102, 1;
	shfl.sync.bfly.b32 	%r103|%p11, %r101, %r102, %r88, %r90;
	mov.b32 	%f50, %r103;
	max.f32 	%f8, %f49, %f50;
	shl.b32 	%r104, %r4, 2;
	mov.u32 	%r105, data_soft_max_f32;
	add.s32 	%r25, %r105, %r104;
	setp.ne.s32 	%p12, %r3, 0;
	@%p12 bra 	$L__BB21_12;

	mov.u32 	%r106, -8388608;
	st.shared.u32 	[%r25], %r106;

$L__BB21_12:
	bar.sync 	0;
	shl.b32 	%r107, %r3, 2;
	add.s32 	%r26, %r105, %r107;
	setp.ne.s32 	%p13, %r4, 0;
	@%p13 bra 	$L__BB21_14;

	st.shared.f32 	[%r26], %f8;

$L__BB21_14:
	bar.sync 	0;
	ld.shared.f32 	%f52, [%r25];
	mov.b32 	%r109, %f52;
	mov.u32 	%r110, 31;
	mov.u32 	%r111, 16;
	mov.u32 	%r112, -1;
	shfl.sync.bfly.b32 	%r113|%p15, %r109, %r111, %r110, %r112;
	mov.b32 	%f53, %r113;
	max.f32 	%f54, %f52, %f53;
	mov.b32 	%r114, %f54;
	mov.u32 	%r115, 8;
	shfl.sync.bfly.b32 	%r116|%p16, %r114, %r115, %r110, %r112;
	mov.b32 	%f55, %r116;
	max.f32 	%f56, %f54, %f55;
	mov.b32 	%r117, %f56;
	mov.u32 	%r118, 4;
	shfl.sync.bfly.b32 	%r119|%p17, %r117, %r118, %r110, %r112;
	mov.b32 	%f57, %r119;
	max.f32 	%f58, %f56, %f57;
	mov.b32 	%r120, %f58;
	mov.u32 	%r121, 2;
	shfl.sync.bfly.b32 	%r122|%p18, %r120, %r121, %r110, %r112;
	mov.b32 	%f59, %r122;
	max.f32 	%f60, %f58, %f59;
	mov.b32 	%r123, %f60;
	mov.u32 	%r124, 1;
	shfl.sync.bfly.b32 	%r125|%p19, %r123, %r124, %r110, %r112;
	mov.b32 	%f61, %r125;
	max.f32 	%f9, %f60, %f61;
	mov.f32 	%f179, 0f00000000;
	@%p2 bra 	$L__BB21_21;

	add.s32 	%r127, %r59, -1;
	shr.u32 	%r27, %r127, 8;
	add.s32 	%r128, %r27, 1;
	and.b32  	%r205, %r128, 3;
	setp.lt.u32 	%p20, %r127, 768;
	mov.f32 	%f179, 0f00000000;
	mov.u32 	%r203, 0;
	@%p20 bra 	$L__BB21_18;

	shl.b32 	%r130, %r1, 2;
	add.s32 	%r132, %r105, %r130;
	add.s32 	%r201, %r132, 2176;
	sub.s32 	%r200, %r27, %r205;
	mov.f32 	%f179, 0f00000000;
	mov.u32 	%r203, 0;

$L__BB21_17:
	.pragma "nounroll";
	ld.shared.f32 	%f65, [%r201+-2048];
	sub.f32 	%f66, %f65, %f9;
	mov.f32 	%f67, 0f3F000000;
	mov.f32 	%f68, 0f3BBB989D;
	fma.rn.f32 	%f69, %f66, %f68, %f67;
	cvt.sat.f32.f32 	%f70, %f69;
	mov.f32 	%f71, 0f4B400001;
	mov.f32 	%f72, 0f437C0000;
	fma.rm.f32 	%f73, %f70, %f72, %f71;
	add.f32 	%f74, %f73, 0fCB40007F;
	neg.f32 	%f75, %f74;
	mov.f32 	%f76, 0f3FB8AA3B;
	fma.rn.f32 	%f77, %f66, %f76, %f75;
	mov.f32 	%f78, 0f32A57060;
	fma.rn.f32 	%f79, %f66, %f78, %f77;
	mov.b32 	%r133, %f73;
	shl.b32 	%r134, %r133, 23;
	mov.b32 	%f80, %r134;
	ex2.approx.ftz.f32 	%f81, %f79;
	mul.f32 	%f82, %f81, %f80;
	add.f32 	%f83, %f179, %f82;
	st.shared.f32 	[%r201+-2048], %f82;
	ld.shared.f32 	%f84, [%r201+-1024];
	sub.f32 	%f85, %f84, %f9;
	fma.rn.f32 	%f86, %f85, %f68, %f67;
	cvt.sat.f32.f32 	%f87, %f86;
	fma.rm.f32 	%f88, %f87, %f72, %f71;
	add.f32 	%f89, %f88, 0fCB40007F;
	neg.f32 	%f90, %f89;
	fma.rn.f32 	%f91, %f85, %f76, %f90;
	fma.rn.f32 	%f92, %f85, %f78, %f91;
	mov.b32 	%r135, %f88;
	shl.b32 	%r136, %r135, 23;
	mov.b32 	%f93, %r136;
	ex2.approx.ftz.f32 	%f94, %f92;
	mul.f32 	%f95, %f94, %f93;
	add.f32 	%f96, %f83, %f95;
	st.shared.f32 	[%r201+-1024], %f95;
	ld.shared.f32 	%f97, [%r201];
	sub.f32 	%f98, %f97, %f9;
	fma.rn.f32 	%f99, %f98, %f68, %f67;
	cvt.sat.f32.f32 	%f100, %f99;
	fma.rm.f32 	%f101, %f100, %f72, %f71;
	add.f32 	%f102, %f101, 0fCB40007F;
	neg.f32 	%f103, %f102;
	fma.rn.f32 	%f104, %f98, %f76, %f103;
	fma.rn.f32 	%f105, %f98, %f78, %f104;
	mov.b32 	%r137, %f101;
	shl.b32 	%r138, %r137, 23;
	mov.b32 	%f106, %r138;
	ex2.approx.ftz.f32 	%f107, %f105;
	mul.f32 	%f108, %f107, %f106;
	add.f32 	%f109, %f96, %f108;
	st.shared.f32 	[%r201], %f108;
	ld.shared.f32 	%f110, [%r201+1024];
	sub.f32 	%f111, %f110, %f9;
	fma.rn.f32 	%f112, %f111, %f68, %f67;
	cvt.sat.f32.f32 	%f113, %f112;
	fma.rm.f32 	%f114, %f113, %f72, %f71;
	add.f32 	%f115, %f114, 0fCB40007F;
	neg.f32 	%f116, %f115;
	fma.rn.f32 	%f117, %f111, %f76, %f116;
	fma.rn.f32 	%f118, %f111, %f78, %f117;
	mov.b32 	%r139, %f114;
	shl.b32 	%r140, %r139, 23;
	mov.b32 	%f119, %r140;
	ex2.approx.ftz.f32 	%f120, %f118;
	mul.f32 	%f121, %f120, %f119;
	add.f32 	%f179, %f109, %f121;
	st.shared.f32 	[%r201+1024], %f121;
	add.s32 	%r203, %r203, 1024;
	add.s32 	%r201, %r201, 4096;
	add.s32 	%r200, %r200, -4;
	setp.ne.s32 	%p21, %r200, -1;
	@%p21 bra 	$L__BB21_17;

$L__BB21_18:
	setp.eq.s32 	%p22, %r205, 0;
	@%p22 bra 	$L__BB21_21;

	add.s32 	%r141, %r1, %r203;
	shl.b32 	%r142, %r141, 2;
	add.s32 	%r144, %r105, %r142;
	add.s32 	%r204, %r144, 128;

$L__BB21_20:
	.pragma "nounroll";
	ld.shared.f32 	%f122, [%r204];
	sub.f32 	%f123, %f122, %f9;
	mov.f32 	%f124, 0f3F000000;
	mov.f32 	%f125, 0f3BBB989D;
	fma.rn.f32 	%f126, %f123, %f125, %f124;
	cvt.sat.f32.f32 	%f127, %f126;
	mov.f32 	%f128, 0f4B400001;
	mov.f32 	%f129, 0f437C0000;
	fma.rm.f32 	%f130, %f127, %f129, %f128;
	add.f32 	%f131, %f130, 0fCB40007F;
	neg.f32 	%f132, %f131;
	mov.f32 	%f133, 0f3FB8AA3B;
	fma.rn.f32 	%f134, %f123, %f133, %f132;
	mov.f32 	%f135, 0f32A57060;
	fma.rn.f32 	%f136, %f123, %f135, %f134;
	mov.b32 	%r145, %f130;
	shl.b32 	%r146, %r145, 23;
	mov.b32 	%f137, %r146;
	ex2.approx.ftz.f32 	%f138, %f136;
	mul.f32 	%f139, %f138, %f137;
	add.f32 	%f179, %f179, %f139;
	st.shared.f32 	[%r204], %f139;
	add.s32 	%r204, %r204, 1024;
	add.s32 	%r205, %r205, -1;
	setp.ne.s32 	%p23, %r205, 0;
	@%p23 bra 	$L__BB21_20;

$L__BB21_21:
	mov.b32 	%r147, %f179;
	shfl.sync.bfly.b32 	%r151|%p24, %r147, %r111, %r110, %r112;
	mov.b32 	%f140, %r151;
	add.f32 	%f141, %f179, %f140;
	mov.b32 	%r152, %f141;
	shfl.sync.bfly.b32 	%r154|%p25, %r152, %r115, %r110, %r112;
	mov.b32 	%f142, %r154;
	add.f32 	%f143, %f141, %f142;
	mov.b32 	%r155, %f143;
	shfl.sync.bfly.b32 	%r157|%p26, %r155, %r118, %r110, %r112;
	mov.b32 	%f144, %r157;
	add.f32 	%f145, %f143, %f144;
	mov.b32 	%r158, %f145;
	shfl.sync.bfly.b32 	%r160|%p27, %r158, %r121, %r110, %r112;
	mov.b32 	%f146, %r160;
	add.f32 	%f147, %f145, %f146;
	mov.b32 	%r161, %f147;
	shfl.sync.bfly.b32 	%r163|%p28, %r161, %r124, %r110, %r112;
	mov.b32 	%f148, %r163;
	add.f32 	%f17, %f147, %f148;
	bar.sync 	0;
	@%p12 bra 	$L__BB21_23;

	mov.u32 	%r164, 0;
	st.shared.u32 	[%r25], %r164;

$L__BB21_23:
	bar.sync 	0;
	@%p13 bra 	$L__BB21_25;

	st.shared.f32 	[%r26], %f17;

$L__BB21_25:
	bar.sync 	0;
	ld.shared.f32 	%f149, [%r25];
	mov.b32 	%r165, %f149;
	mov.u32 	%r166, 31;
	mov.u32 	%r167, 16;
	mov.u32 	%r168, -1;
	shfl.sync.bfly.b32 	%r169|%p32, %r165, %r167, %r166, %r168;
	mov.b32 	%f150, %r169;
	add.f32 	%f151, %f149, %f150;
	mov.b32 	%r170, %f151;
	mov.u32 	%r171, 8;
	shfl.sync.bfly.b32 	%r172|%p33, %r170, %r171, %r166, %r168;
	mov.b32 	%f152, %r172;
	add.f32 	%f153, %f151, %f152;
	mov.b32 	%r173, %f153;
	mov.u32 	%r174, 4;
	shfl.sync.bfly.b32 	%r175|%p34, %r173, %r174, %r166, %r168;
	mov.b32 	%f154, %r175;
	add.f32 	%f155, %f153, %f154;
	mov.b32 	%r176, %f155;
	mov.u32 	%r177, 2;
	shfl.sync.bfly.b32 	%r178|%p35, %r176, %r177, %r166, %r168;
	mov.b32 	%f156, %r178;
	add.f32 	%f157, %f155, %f156;
	mov.b32 	%r179, %f157;
	mov.u32 	%r180, 1;
	shfl.sync.bfly.b32 	%r181|%p36, %r179, %r180, %r166, %r168;
	mov.b32 	%f158, %r181;
	add.f32 	%f159, %f157, %f158;
	rcp.rn.f32 	%f18, %f159;
	@%p2 bra 	$L__BB21_32;

	add.s32 	%r183, %r59, -1;
	shr.u32 	%r43, %r183, 8;
	add.s32 	%r184, %r43, 1;
	and.b32  	%r211, %r184, 3;
	setp.lt.u32 	%p37, %r183, 768;
	mov.u32 	%r209, 0;
	@%p37 bra 	$L__BB21_29;

	sub.s32 	%r207, %r43, %r211;
	cvt.s64.s32 	%rd62, %r1;
	mul.lo.s64 	%rd63, %rd10, %rd9;
	add.s64 	%rd64, %rd63, %rd62;
	shl.b64 	%rd65, %rd64, 2;
	add.s64 	%rd75, %rd3, %rd65;
	shl.b32 	%r186, %r1, 2;
	add.s32 	%r188, %r105, %r186;
	add.s32 	%r206, %r188, 2176;
	mov.u32 	%r209, 0;

$L__BB21_28:
	.pragma "nounroll";
	ld.shared.f32 	%f160, [%r206+-2048];
	mul.f32 	%f161, %f18, %f160;
	st.global.f32 	[%rd75], %f161;
	ld.shared.f32 	%f162, [%r206+-1024];
	mul.f32 	%f163, %f18, %f162;
	st.global.f32 	[%rd75+1024], %f163;
	ld.shared.f32 	%f164, [%r206];
	mul.f32 	%f165, %f18, %f164;
	st.global.f32 	[%rd75+2048], %f165;
	ld.shared.f32 	%f166, [%r206+1024];
	mul.f32 	%f167, %f18, %f166;
	st.global.f32 	[%rd75+3072], %f167;
	add.s32 	%r209, %r209, 1024;
	add.s64 	%rd75, %rd75, 4096;
	add.s32 	%r206, %r206, 4096;
	add.s32 	%r207, %r207, -4;
	setp.ne.s32 	%p38, %r207, -1;
	@%p38 bra 	$L__BB21_28;

$L__BB21_29:
	setp.eq.s32 	%p39, %r211, 0;
	@%p39 bra 	$L__BB21_32;

	mul.lo.s64 	%rd66, %rd10, %rd9;
	add.s32 	%r189, %r1, %r209;
	cvt.s64.s32 	%rd67, %r189;
	add.s64 	%rd68, %rd66, %rd67;
	shl.b64 	%rd69, %rd68, 2;
	add.s64 	%rd76, %rd3, %rd69;
	shl.b32 	%r190, %r189, 2;
	add.s32 	%r192, %r105, %r190;
	add.s32 	%r210, %r192, 128;

$L__BB21_31:
	.pragma "nounroll";
	ld.shared.f32 	%f168, [%r210];
	mul.f32 	%f169, %f18, %f168;
	st.global.f32 	[%rd76], %f169;
	add.s64 	%rd76, %rd76, 1024;
	add.s32 	%r210, %r210, 1024;
	add.s32 	%r211, %r211, -1;
	setp.ne.s32 	%p40, %r211, 0;
	@%p40 bra 	$L__BB21_31;

$L__BB21_32:
	ret;

}
	// .globl	scaled_masked_softmax_512_f32
.visible .entry scaled_masked_softmax_512_f32(
	.param .u64 scaled_masked_softmax_512_f32_param_0,
	.param .u64 scaled_masked_softmax_512_f32_param_1,
	.param .f32 scaled_masked_softmax_512_f32_param_2,
	.param .u64 scaled_masked_softmax_512_f32_param_3,
	.param .u32 scaled_masked_softmax_512_f32_param_4,
	.param .u32 scaled_masked_softmax_512_f32_param_5,
	.param .u32 scaled_masked_softmax_512_f32_param_6,
	.param .u32 scaled_masked_softmax_512_f32_param_7,
	.param .u32 scaled_masked_softmax_512_f32_param_8,
	.param .u32 scaled_masked_softmax_512_f32_param_9,
	.param .u32 scaled_masked_softmax_512_f32_param_10,
	.param .u32 scaled_masked_softmax_512_f32_param_11,
	.param .u32 scaled_masked_softmax_512_f32_param_12,
	.param .u32 scaled_masked_softmax_512_f32_param_13,
	.param .u32 scaled_masked_softmax_512_f32_param_14,
	.param .u32 scaled_masked_softmax_512_f32_param_15
)
{
	.reg .pred 	%p<41>;
	.reg .f32 	%f<180>;
	.reg .b32 	%r<212>;
	.reg .b64 	%rd<77>;


	ld.param.u64 	%rd33, [scaled_masked_softmax_512_f32_param_0];
	ld.param.u64 	%rd34, [scaled_masked_softmax_512_f32_param_1];
	ld.param.f32 	%f19, [scaled_masked_softmax_512_f32_param_2];
	ld.param.u64 	%rd35, [scaled_masked_softmax_512_f32_param_3];
	ld.param.u32 	%r59, [scaled_masked_softmax_512_f32_param_6];
	ld.param.s32 	%rd5, [scaled_masked_softmax_512_f32_param_10];
	ld.param.u32 	%r60, [scaled_masked_softmax_512_f32_param_11];
	ld.param.u32 	%r61, [scaled_masked_softmax_512_f32_param_12];
	cvta.to.global.u64 	%rd1, %rd34;
	cvta.to.global.u64 	%rd2, %rd33;
	cvta.to.global.u64 	%rd3, %rd35;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.y;
	cvt.u64.u32 	%rd4, %r2;
	and.b64  	%rd36, %rd5, -4294967296;
	setp.eq.s64 	%p1, %rd36, 0;
	@%p1 bra 	$L__BB22_2;

	rem.s64 	%rd70, %rd4, %rd5;
	bra.uni 	$L__BB22_3;

$L__BB22_2:
	cvt.u32.u64 	%r62, %rd5;
	cvt.u32.u64 	%r63, %rd4;
	rem.u32 	%r64, %r63, %r62;
	cvt.u64.u32 	%rd70, %r64;

$L__BB22_3:
	mov.u32 	%r65, %ctaid.x;
	mov.u32 	%r66, %nctaid.x;
	mov.u32 	%r67, %ctaid.z;
	mov.u32 	%r68, %nctaid.y;
	mad.lo.s32 	%r69, %r68, %r67, %r2;
	mad.lo.s32 	%r70, %r69, %r66, %r65;
	cvt.s64.s32 	%rd9, %r70;
	cvt.s64.s32 	%rd10, %r59;
	cvt.s64.s32 	%rd37, %r60;
	cvt.u64.u32 	%rd38, %r65;
	mul.lo.s64 	%rd39, %rd37, %rd38;
	mul.lo.s64 	%rd40, %rd70, %rd5;
	add.s64 	%rd41, %rd40, %rd39;
	shr.u64 	%rd11, %rd41, 2;
	shr.u32 	%r3, %r1, 5;
	and.b32  	%r4, %r1, 31;
	setp.lt.s32 	%p2, %r59, 1;
	mov.f32 	%f174, 0fFF800000;
	@%p2 bra 	$L__BB22_10;

	add.s32 	%r72, %r59, -1;
	shr.u32 	%r5, %r72, 9;
	add.s32 	%r73, %r5, 1;
	and.b32  	%r199, %r73, 3;
	setp.lt.u32 	%p3, %r72, 1536;
	mov.f32 	%f174, 0fFF800000;
	mov.u32 	%r197, 0;
	@%p3 bra 	$L__BB22_7;

	mul.lo.s64 	%rd42, %rd10, %rd9;
	sub.s32 	%r195, %r5, %r199;
	cvt.s64.s32 	%rd43, %r1;
	add.s64 	%rd44, %rd42, %rd43;
	shl.b64 	%rd45, %rd44, 2;
	add.s64 	%rd72, %rd2, %rd45;
	add.s32 	%r75, %r1, 512;
	mul.lo.s32 	%r194, %r61, %r75;
	shl.b32 	%r76, %r1, 2;
	mov.u32 	%r77, data_soft_max_f32;
	add.s32 	%r78, %r77, %r76;
	add.s32 	%r193, %r78, 4224;
	mul.lo.s32 	%r79, %r1, %r61;
	cvt.s64.s32 	%rd46, %r79;
	add.s64 	%rd47, %rd11, %rd46;
	shl.b64 	%rd48, %rd47, 2;
	add.s64 	%rd71, %rd1, %rd48;
	shl.b32 	%r10, %r61, 11;
	mul.wide.s32 	%rd14, %r10, 4;
	shl.b32 	%r80, %r61, 9;
	mul.wide.s32 	%rd15, %r80, 4;
	mov.f32 	%f174, 0fFF800000;
	mov.u32 	%r197, 0;

$L__BB22_6:
	.pragma "nounroll";
	ld.global.f32 	%f24, [%rd72];
	ld.global.f32 	%f25, [%rd71];
	fma.rn.f32 	%f26, %f24, %f19, %f25;
	st.shared.f32 	[%r193+-4096], %f26;
	max.f32 	%f27, %f174, %f26;
	ld.global.f32 	%f28, [%rd72+2048];
	cvt.s64.s32 	%rd49, %r194;
	add.s64 	%rd50, %rd11, %rd49;
	shl.b64 	%rd51, %rd50, 2;
	add.s64 	%rd52, %rd1, %rd51;
	ld.global.f32 	%f29, [%rd52];
	fma.rn.f32 	%f30, %f28, %f19, %f29;
	st.shared.f32 	[%r193+-2048], %f30;
	max.f32 	%f31, %f27, %f30;
	ld.global.f32 	%f32, [%rd72+4096];
	add.s64 	%rd53, %rd52, %rd15;
	ld.global.f32 	%f33, [%rd53];
	fma.rn.f32 	%f34, %f32, %f19, %f33;
	st.shared.f32 	[%r193], %f34;
	max.f32 	%f35, %f31, %f34;
	ld.global.f32 	%f36, [%rd72+6144];
	add.s64 	%rd54, %rd53, %rd15;
	ld.global.f32 	%f37, [%rd54];
	fma.rn.f32 	%f38, %f36, %f19, %f37;
	st.shared.f32 	[%r193+2048], %f38;
	max.f32 	%f174, %f35, %f38;
	add.s32 	%r197, %r197, 2048;
	add.s64 	%rd72, %rd72, 8192;
	add.s32 	%r194, %r194, %r10;
	add.s32 	%r193, %r193, 8192;
	add.s64 	%rd71, %rd71, %rd14;
	add.s32 	%r195, %r195, -4;
	setp.ne.s32 	%p4, %r195, -1;
	@%p4 bra 	$L__BB22_6;

$L__BB22_7:
	setp.eq.s32 	%p5, %r199, 0;
	@%p5 bra 	$L__BB22_10;

	add.s32 	%r81, %r1, %r197;
	shl.b32 	%r82, %r81, 2;
	mov.u32 	%r83, data_soft_max_f32;
	add.s32 	%r84, %r83, %r82;
	add.s32 	%r198, %r84, 128;
	mul.lo.s32 	%r85, %r61, %r81;
	cvt.s64.s32 	%rd55, %r85;
	add.s64 	%rd56, %rd11, %rd55;
	shl.b64 	%rd57, %rd56, 2;
	add.s64 	%rd74, %rd1, %rd57;
	shl.b32 	%r86, %r61, 9;
	mul.wide.s32 	%rd21, %r86, 4;
	cvt.s64.s32 	%rd58, %r81;
	mul.lo.s64 	%rd59, %rd10, %rd9;
	add.s64 	%rd60, %rd59, %rd58;
	shl.b64 	%rd61, %rd60, 2;
	add.s64 	%rd73, %rd2, %rd61;

$L__BB22_9:
	.pragma "nounroll";
	ld.global.f32 	%f39, [%rd73];
	ld.global.f32 	%f40, [%rd74];
	fma.rn.f32 	%f41, %f39, %f19, %f40;
	st.shared.f32 	[%r198], %f41;
	max.f32 	%f174, %f174, %f41;
	add.s32 	%r198, %r198, 2048;
	add.s64 	%rd74, %rd74, %rd21;
	add.s64 	%rd73, %rd73, 2048;
	add.s32 	%r199, %r199, -1;
	setp.ne.s32 	%p6, %r199, 0;
	@%p6 bra 	$L__BB22_9;

$L__BB22_10:
	mov.b32 	%r87, %f174;
	mov.u32 	%r88, 31;
	mov.u32 	%r89, 16;
	mov.u32 	%r90, -1;
	shfl.sync.bfly.b32 	%r91|%p7, %r87, %r89, %r88, %r90;
	mov.b32 	%f42, %r91;
	max.f32 	%f43, %f174, %f42;
	mov.b32 	%r92, %f43;
	mov.u32 	%r93, 8;
	shfl.sync.bfly.b32 	%r94|%p8, %r92, %r93, %r88, %r90;
	mov.b32 	%f44, %r94;
	max.f32 	%f45, %f43, %f44;
	mov.b32 	%r95, %f45;
	mov.u32 	%r96, 4;
	shfl.sync.bfly.b32 	%r97|%p9, %r95, %r96, %r88, %r90;
	mov.b32 	%f46, %r97;
	max.f32 	%f47, %f45, %f46;
	mov.b32 	%r98, %f47;
	mov.u32 	%r99, 2;
	shfl.sync.bfly.b32 	%r100|%p10, %r98, %r99, %r88, %r90;
	mov.b32 	%f48, %r100;
	max.f32 	%f49, %f47, %f48;
	mov.b32 	%r101, %f49;
	mov.u32 	%r102, 1;
	shfl.sync.bfly.b32 	%r103|%p11, %r101, %r102, %r88, %r90;
	mov.b32 	%f50, %r103;
	max.f32 	%f8, %f49, %f50;
	shl.b32 	%r104, %r4, 2;
	mov.u32 	%r105, data_soft_max_f32;
	add.s32 	%r25, %r105, %r104;
	setp.ne.s32 	%p12, %r3, 0;
	@%p12 bra 	$L__BB22_12;

	mov.u32 	%r106, -8388608;
	st.shared.u32 	[%r25], %r106;

$L__BB22_12:
	bar.sync 	0;
	shl.b32 	%r107, %r3, 2;
	add.s32 	%r26, %r105, %r107;
	setp.ne.s32 	%p13, %r4, 0;
	@%p13 bra 	$L__BB22_14;

	st.shared.f32 	[%r26], %f8;

$L__BB22_14:
	bar.sync 	0;
	ld.shared.f32 	%f52, [%r25];
	mov.b32 	%r109, %f52;
	mov.u32 	%r110, 31;
	mov.u32 	%r111, 16;
	mov.u32 	%r112, -1;
	shfl.sync.bfly.b32 	%r113|%p15, %r109, %r111, %r110, %r112;
	mov.b32 	%f53, %r113;
	max.f32 	%f54, %f52, %f53;
	mov.b32 	%r114, %f54;
	mov.u32 	%r115, 8;
	shfl.sync.bfly.b32 	%r116|%p16, %r114, %r115, %r110, %r112;
	mov.b32 	%f55, %r116;
	max.f32 	%f56, %f54, %f55;
	mov.b32 	%r117, %f56;
	mov.u32 	%r118, 4;
	shfl.sync.bfly.b32 	%r119|%p17, %r117, %r118, %r110, %r112;
	mov.b32 	%f57, %r119;
	max.f32 	%f58, %f56, %f57;
	mov.b32 	%r120, %f58;
	mov.u32 	%r121, 2;
	shfl.sync.bfly.b32 	%r122|%p18, %r120, %r121, %r110, %r112;
	mov.b32 	%f59, %r122;
	max.f32 	%f60, %f58, %f59;
	mov.b32 	%r123, %f60;
	mov.u32 	%r124, 1;
	shfl.sync.bfly.b32 	%r125|%p19, %r123, %r124, %r110, %r112;
	mov.b32 	%f61, %r125;
	max.f32 	%f9, %f60, %f61;
	mov.f32 	%f179, 0f00000000;
	@%p2 bra 	$L__BB22_21;

	add.s32 	%r127, %r59, -1;
	shr.u32 	%r27, %r127, 9;
	add.s32 	%r128, %r27, 1;
	and.b32  	%r205, %r128, 3;
	setp.lt.u32 	%p20, %r127, 1536;
	mov.f32 	%f179, 0f00000000;
	mov.u32 	%r203, 0;
	@%p20 bra 	$L__BB22_18;

	shl.b32 	%r130, %r1, 2;
	add.s32 	%r132, %r105, %r130;
	add.s32 	%r201, %r132, 4224;
	sub.s32 	%r200, %r27, %r205;
	mov.f32 	%f179, 0f00000000;
	mov.u32 	%r203, 0;

$L__BB22_17:
	.pragma "nounroll";
	ld.shared.f32 	%f65, [%r201+-4096];
	sub.f32 	%f66, %f65, %f9;
	mov.f32 	%f67, 0f3F000000;
	mov.f32 	%f68, 0f3BBB989D;
	fma.rn.f32 	%f69, %f66, %f68, %f67;
	cvt.sat.f32.f32 	%f70, %f69;
	mov.f32 	%f71, 0f4B400001;
	mov.f32 	%f72, 0f437C0000;
	fma.rm.f32 	%f73, %f70, %f72, %f71;
	add.f32 	%f74, %f73, 0fCB40007F;
	neg.f32 	%f75, %f74;
	mov.f32 	%f76, 0f3FB8AA3B;
	fma.rn.f32 	%f77, %f66, %f76, %f75;
	mov.f32 	%f78, 0f32A57060;
	fma.rn.f32 	%f79, %f66, %f78, %f77;
	mov.b32 	%r133, %f73;
	shl.b32 	%r134, %r133, 23;
	mov.b32 	%f80, %r134;
	ex2.approx.ftz.f32 	%f81, %f79;
	mul.f32 	%f82, %f81, %f80;
	add.f32 	%f83, %f179, %f82;
	st.shared.f32 	[%r201+-4096], %f82;
	ld.shared.f32 	%f84, [%r201+-2048];
	sub.f32 	%f85, %f84, %f9;
	fma.rn.f32 	%f86, %f85, %f68, %f67;
	cvt.sat.f32.f32 	%f87, %f86;
	fma.rm.f32 	%f88, %f87, %f72, %f71;
	add.f32 	%f89, %f88, 0fCB40007F;
	neg.f32 	%f90, %f89;
	fma.rn.f32 	%f91, %f85, %f76, %f90;
	fma.rn.f32 	%f92, %f85, %f78, %f91;
	mov.b32 	%r135, %f88;
	shl.b32 	%r136, %r135, 23;
	mov.b32 	%f93, %r136;
	ex2.approx.ftz.f32 	%f94, %f92;
	mul.f32 	%f95, %f94, %f93;
	add.f32 	%f96, %f83, %f95;
	st.shared.f32 	[%r201+-2048], %f95;
	ld.shared.f32 	%f97, [%r201];
	sub.f32 	%f98, %f97, %f9;
	fma.rn.f32 	%f99, %f98, %f68, %f67;
	cvt.sat.f32.f32 	%f100, %f99;
	fma.rm.f32 	%f101, %f100, %f72, %f71;
	add.f32 	%f102, %f101, 0fCB40007F;
	neg.f32 	%f103, %f102;
	fma.rn.f32 	%f104, %f98, %f76, %f103;
	fma.rn.f32 	%f105, %f98, %f78, %f104;
	mov.b32 	%r137, %f101;
	shl.b32 	%r138, %r137, 23;
	mov.b32 	%f106, %r138;
	ex2.approx.ftz.f32 	%f107, %f105;
	mul.f32 	%f108, %f107, %f106;
	add.f32 	%f109, %f96, %f108;
	st.shared.f32 	[%r201], %f108;
	ld.shared.f32 	%f110, [%r201+2048];
	sub.f32 	%f111, %f110, %f9;
	fma.rn.f32 	%f112, %f111, %f68, %f67;
	cvt.sat.f32.f32 	%f113, %f112;
	fma.rm.f32 	%f114, %f113, %f72, %f71;
	add.f32 	%f115, %f114, 0fCB40007F;
	neg.f32 	%f116, %f115;
	fma.rn.f32 	%f117, %f111, %f76, %f116;
	fma.rn.f32 	%f118, %f111, %f78, %f117;
	mov.b32 	%r139, %f114;
	shl.b32 	%r140, %r139, 23;
	mov.b32 	%f119, %r140;
	ex2.approx.ftz.f32 	%f120, %f118;
	mul.f32 	%f121, %f120, %f119;
	add.f32 	%f179, %f109, %f121;
	st.shared.f32 	[%r201+2048], %f121;
	add.s32 	%r203, %r203, 2048;
	add.s32 	%r201, %r201, 8192;
	add.s32 	%r200, %r200, -4;
	setp.ne.s32 	%p21, %r200, -1;
	@%p21 bra 	$L__BB22_17;

$L__BB22_18:
	setp.eq.s32 	%p22, %r205, 0;
	@%p22 bra 	$L__BB22_21;

	add.s32 	%r141, %r1, %r203;
	shl.b32 	%r142, %r141, 2;
	add.s32 	%r144, %r105, %r142;
	add.s32 	%r204, %r144, 128;

$L__BB22_20:
	.pragma "nounroll";
	ld.shared.f32 	%f122, [%r204];
	sub.f32 	%f123, %f122, %f9;
	mov.f32 	%f124, 0f3F000000;
	mov.f32 	%f125, 0f3BBB989D;
	fma.rn.f32 	%f126, %f123, %f125, %f124;
	cvt.sat.f32.f32 	%f127, %f126;
	mov.f32 	%f128, 0f4B400001;
	mov.f32 	%f129, 0f437C0000;
	fma.rm.f32 	%f130, %f127, %f129, %f128;
	add.f32 	%f131, %f130, 0fCB40007F;
	neg.f32 	%f132, %f131;
	mov.f32 	%f133, 0f3FB8AA3B;
	fma.rn.f32 	%f134, %f123, %f133, %f132;
	mov.f32 	%f135, 0f32A57060;
	fma.rn.f32 	%f136, %f123, %f135, %f134;
	mov.b32 	%r145, %f130;
	shl.b32 	%r146, %r145, 23;
	mov.b32 	%f137, %r146;
	ex2.approx.ftz.f32 	%f138, %f136;
	mul.f32 	%f139, %f138, %f137;
	add.f32 	%f179, %f179, %f139;
	st.shared.f32 	[%r204], %f139;
	add.s32 	%r204, %r204, 2048;
	add.s32 	%r205, %r205, -1;
	setp.ne.s32 	%p23, %r205, 0;
	@%p23 bra 	$L__BB22_20;

$L__BB22_21:
	mov.b32 	%r147, %f179;
	shfl.sync.bfly.b32 	%r151|%p24, %r147, %r111, %r110, %r112;
	mov.b32 	%f140, %r151;
	add.f32 	%f141, %f179, %f140;
	mov.b32 	%r152, %f141;
	shfl.sync.bfly.b32 	%r154|%p25, %r152, %r115, %r110, %r112;
	mov.b32 	%f142, %r154;
	add.f32 	%f143, %f141, %f142;
	mov.b32 	%r155, %f143;
	shfl.sync.bfly.b32 	%r157|%p26, %r155, %r118, %r110, %r112;
	mov.b32 	%f144, %r157;
	add.f32 	%f145, %f143, %f144;
	mov.b32 	%r158, %f145;
	shfl.sync.bfly.b32 	%r160|%p27, %r158, %r121, %r110, %r112;
	mov.b32 	%f146, %r160;
	add.f32 	%f147, %f145, %f146;
	mov.b32 	%r161, %f147;
	shfl.sync.bfly.b32 	%r163|%p28, %r161, %r124, %r110, %r112;
	mov.b32 	%f148, %r163;
	add.f32 	%f17, %f147, %f148;
	bar.sync 	0;
	@%p12 bra 	$L__BB22_23;

	mov.u32 	%r164, 0;
	st.shared.u32 	[%r25], %r164;

$L__BB22_23:
	bar.sync 	0;
	@%p13 bra 	$L__BB22_25;

	st.shared.f32 	[%r26], %f17;

$L__BB22_25:
	bar.sync 	0;
	ld.shared.f32 	%f149, [%r25];
	mov.b32 	%r165, %f149;
	mov.u32 	%r166, 31;
	mov.u32 	%r167, 16;
	mov.u32 	%r168, -1;
	shfl.sync.bfly.b32 	%r169|%p32, %r165, %r167, %r166, %r168;
	mov.b32 	%f150, %r169;
	add.f32 	%f151, %f149, %f150;
	mov.b32 	%r170, %f151;
	mov.u32 	%r171, 8;
	shfl.sync.bfly.b32 	%r172|%p33, %r170, %r171, %r166, %r168;
	mov.b32 	%f152, %r172;
	add.f32 	%f153, %f151, %f152;
	mov.b32 	%r173, %f153;
	mov.u32 	%r174, 4;
	shfl.sync.bfly.b32 	%r175|%p34, %r173, %r174, %r166, %r168;
	mov.b32 	%f154, %r175;
	add.f32 	%f155, %f153, %f154;
	mov.b32 	%r176, %f155;
	mov.u32 	%r177, 2;
	shfl.sync.bfly.b32 	%r178|%p35, %r176, %r177, %r166, %r168;
	mov.b32 	%f156, %r178;
	add.f32 	%f157, %f155, %f156;
	mov.b32 	%r179, %f157;
	mov.u32 	%r180, 1;
	shfl.sync.bfly.b32 	%r181|%p36, %r179, %r180, %r166, %r168;
	mov.b32 	%f158, %r181;
	add.f32 	%f159, %f157, %f158;
	rcp.rn.f32 	%f18, %f159;
	@%p2 bra 	$L__BB22_32;

	add.s32 	%r183, %r59, -1;
	shr.u32 	%r43, %r183, 9;
	add.s32 	%r184, %r43, 1;
	and.b32  	%r211, %r184, 3;
	setp.lt.u32 	%p37, %r183, 1536;
	mov.u32 	%r209, 0;
	@%p37 bra 	$L__BB22_29;

	sub.s32 	%r207, %r43, %r211;
	cvt.s64.s32 	%rd62, %r1;
	mul.lo.s64 	%rd63, %rd10, %rd9;
	add.s64 	%rd64, %rd63, %rd62;
	shl.b64 	%rd65, %rd64, 2;
	add.s64 	%rd75, %rd3, %rd65;
	shl.b32 	%r186, %r1, 2;
	add.s32 	%r188, %r105, %r186;
	add.s32 	%r206, %r188, 4224;
	mov.u32 	%r209, 0;

$L__BB22_28:
	.pragma "nounroll";
	ld.shared.f32 	%f160, [%r206+-4096];
	mul.f32 	%f161, %f18, %f160;
	st.global.f32 	[%rd75], %f161;
	ld.shared.f32 	%f162, [%r206+-2048];
	mul.f32 	%f163, %f18, %f162;
	st.global.f32 	[%rd75+2048], %f163;
	ld.shared.f32 	%f164, [%r206];
	mul.f32 	%f165, %f18, %f164;
	st.global.f32 	[%rd75+4096], %f165;
	ld.shared.f32 	%f166, [%r206+2048];
	mul.f32 	%f167, %f18, %f166;
	st.global.f32 	[%rd75+6144], %f167;
	add.s32 	%r209, %r209, 2048;
	add.s64 	%rd75, %rd75, 8192;
	add.s32 	%r206, %r206, 8192;
	add.s32 	%r207, %r207, -4;
	setp.ne.s32 	%p38, %r207, -1;
	@%p38 bra 	$L__BB22_28;

$L__BB22_29:
	setp.eq.s32 	%p39, %r211, 0;
	@%p39 bra 	$L__BB22_32;

	mul.lo.s64 	%rd66, %rd10, %rd9;
	add.s32 	%r189, %r1, %r209;
	cvt.s64.s32 	%rd67, %r189;
	add.s64 	%rd68, %rd66, %rd67;
	shl.b64 	%rd69, %rd68, 2;
	add.s64 	%rd76, %rd3, %rd69;
	shl.b32 	%r190, %r189, 2;
	add.s32 	%r192, %r105, %r190;
	add.s32 	%r210, %r192, 128;

$L__BB22_31:
	.pragma "nounroll";
	ld.shared.f32 	%f168, [%r210];
	mul.f32 	%f169, %f18, %f168;
	st.global.f32 	[%rd76], %f169;
	add.s64 	%rd76, %rd76, 2048;
	add.s32 	%r210, %r210, 2048;
	add.s32 	%r211, %r211, -1;
	setp.ne.s32 	%p40, %r211, 0;
	@%p40 bra 	$L__BB22_31;

$L__BB22_32:
	ret;

}
	// .globl	scaled_masked_softmax_1024_f32
.visible .entry scaled_masked_softmax_1024_f32(
	.param .u64 scaled_masked_softmax_1024_f32_param_0,
	.param .u64 scaled_masked_softmax_1024_f32_param_1,
	.param .f32 scaled_masked_softmax_1024_f32_param_2,
	.param .u64 scaled_masked_softmax_1024_f32_param_3,
	.param .u32 scaled_masked_softmax_1024_f32_param_4,
	.param .u32 scaled_masked_softmax_1024_f32_param_5,
	.param .u32 scaled_masked_softmax_1024_f32_param_6,
	.param .u32 scaled_masked_softmax_1024_f32_param_7,
	.param .u32 scaled_masked_softmax_1024_f32_param_8,
	.param .u32 scaled_masked_softmax_1024_f32_param_9,
	.param .u32 scaled_masked_softmax_1024_f32_param_10,
	.param .u32 scaled_masked_softmax_1024_f32_param_11,
	.param .u32 scaled_masked_softmax_1024_f32_param_12,
	.param .u32 scaled_masked_softmax_1024_f32_param_13,
	.param .u32 scaled_masked_softmax_1024_f32_param_14,
	.param .u32 scaled_masked_softmax_1024_f32_param_15
)
{
	.reg .pred 	%p<41>;
	.reg .f32 	%f<180>;
	.reg .b32 	%r<212>;
	.reg .b64 	%rd<77>;


	ld.param.u64 	%rd33, [scaled_masked_softmax_1024_f32_param_0];
	ld.param.u64 	%rd34, [scaled_masked_softmax_1024_f32_param_1];
	ld.param.f32 	%f19, [scaled_masked_softmax_1024_f32_param_2];
	ld.param.u64 	%rd35, [scaled_masked_softmax_1024_f32_param_3];
	ld.param.u32 	%r59, [scaled_masked_softmax_1024_f32_param_6];
	ld.param.s32 	%rd5, [scaled_masked_softmax_1024_f32_param_10];
	ld.param.u32 	%r60, [scaled_masked_softmax_1024_f32_param_11];
	ld.param.u32 	%r61, [scaled_masked_softmax_1024_f32_param_12];
	cvta.to.global.u64 	%rd1, %rd34;
	cvta.to.global.u64 	%rd2, %rd33;
	cvta.to.global.u64 	%rd3, %rd35;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.y;
	cvt.u64.u32 	%rd4, %r2;
	and.b64  	%rd36, %rd5, -4294967296;
	setp.eq.s64 	%p1, %rd36, 0;
	@%p1 bra 	$L__BB23_2;

	rem.s64 	%rd70, %rd4, %rd5;
	bra.uni 	$L__BB23_3;

$L__BB23_2:
	cvt.u32.u64 	%r62, %rd5;
	cvt.u32.u64 	%r63, %rd4;
	rem.u32 	%r64, %r63, %r62;
	cvt.u64.u32 	%rd70, %r64;

$L__BB23_3:
	mov.u32 	%r65, %ctaid.x;
	mov.u32 	%r66, %nctaid.x;
	mov.u32 	%r67, %ctaid.z;
	mov.u32 	%r68, %nctaid.y;
	mad.lo.s32 	%r69, %r68, %r67, %r2;
	mad.lo.s32 	%r70, %r69, %r66, %r65;
	cvt.s64.s32 	%rd9, %r70;
	cvt.s64.s32 	%rd10, %r59;
	cvt.s64.s32 	%rd37, %r60;
	cvt.u64.u32 	%rd38, %r65;
	mul.lo.s64 	%rd39, %rd37, %rd38;
	mul.lo.s64 	%rd40, %rd70, %rd5;
	add.s64 	%rd41, %rd40, %rd39;
	shr.u64 	%rd11, %rd41, 2;
	shr.u32 	%r3, %r1, 5;
	and.b32  	%r4, %r1, 31;
	setp.lt.s32 	%p2, %r59, 1;
	mov.f32 	%f174, 0fFF800000;
	@%p2 bra 	$L__BB23_10;

	add.s32 	%r72, %r59, -1;
	shr.u32 	%r5, %r72, 10;
	add.s32 	%r73, %r5, 1;
	and.b32  	%r199, %r73, 3;
	setp.lt.u32 	%p3, %r72, 3072;
	mov.f32 	%f174, 0fFF800000;
	mov.u32 	%r197, 0;
	@%p3 bra 	$L__BB23_7;

	mul.lo.s64 	%rd42, %rd10, %rd9;
	sub.s32 	%r195, %r5, %r199;
	cvt.s64.s32 	%rd43, %r1;
	add.s64 	%rd44, %rd42, %rd43;
	shl.b64 	%rd45, %rd44, 2;
	add.s64 	%rd72, %rd2, %rd45;
	add.s32 	%r75, %r1, 1024;
	mul.lo.s32 	%r194, %r61, %r75;
	shl.b32 	%r76, %r1, 2;
	mov.u32 	%r77, data_soft_max_f32;
	add.s32 	%r78, %r77, %r76;
	add.s32 	%r193, %r78, 8320;
	mul.lo.s32 	%r79, %r1, %r61;
	cvt.s64.s32 	%rd46, %r79;
	add.s64 	%rd47, %rd11, %rd46;
	shl.b64 	%rd48, %rd47, 2;
	add.s64 	%rd71, %rd1, %rd48;
	shl.b32 	%r10, %r61, 12;
	mul.wide.s32 	%rd14, %r10, 4;
	shl.b32 	%r80, %r61, 10;
	mul.wide.s32 	%rd15, %r80, 4;
	mov.f32 	%f174, 0fFF800000;
	mov.u32 	%r197, 0;

$L__BB23_6:
	.pragma "nounroll";
	ld.global.f32 	%f24, [%rd72];
	ld.global.f32 	%f25, [%rd71];
	fma.rn.f32 	%f26, %f24, %f19, %f25;
	st.shared.f32 	[%r193+-8192], %f26;
	max.f32 	%f27, %f174, %f26;
	ld.global.f32 	%f28, [%rd72+4096];
	cvt.s64.s32 	%rd49, %r194;
	add.s64 	%rd50, %rd11, %rd49;
	shl.b64 	%rd51, %rd50, 2;
	add.s64 	%rd52, %rd1, %rd51;
	ld.global.f32 	%f29, [%rd52];
	fma.rn.f32 	%f30, %f28, %f19, %f29;
	st.shared.f32 	[%r193+-4096], %f30;
	max.f32 	%f31, %f27, %f30;
	ld.global.f32 	%f32, [%rd72+8192];
	add.s64 	%rd53, %rd52, %rd15;
	ld.global.f32 	%f33, [%rd53];
	fma.rn.f32 	%f34, %f32, %f19, %f33;
	st.shared.f32 	[%r193], %f34;
	max.f32 	%f35, %f31, %f34;
	ld.global.f32 	%f36, [%rd72+12288];
	add.s64 	%rd54, %rd53, %rd15;
	ld.global.f32 	%f37, [%rd54];
	fma.rn.f32 	%f38, %f36, %f19, %f37;
	st.shared.f32 	[%r193+4096], %f38;
	max.f32 	%f174, %f35, %f38;
	add.s32 	%r197, %r197, 4096;
	add.s64 	%rd72, %rd72, 16384;
	add.s32 	%r194, %r194, %r10;
	add.s32 	%r193, %r193, 16384;
	add.s64 	%rd71, %rd71, %rd14;
	add.s32 	%r195, %r195, -4;
	setp.ne.s32 	%p4, %r195, -1;
	@%p4 bra 	$L__BB23_6;

$L__BB23_7:
	setp.eq.s32 	%p5, %r199, 0;
	@%p5 bra 	$L__BB23_10;

	add.s32 	%r81, %r1, %r197;
	shl.b32 	%r82, %r81, 2;
	mov.u32 	%r83, data_soft_max_f32;
	add.s32 	%r84, %r83, %r82;
	add.s32 	%r198, %r84, 128;
	mul.lo.s32 	%r85, %r61, %r81;
	cvt.s64.s32 	%rd55, %r85;
	add.s64 	%rd56, %rd11, %rd55;
	shl.b64 	%rd57, %rd56, 2;
	add.s64 	%rd74, %rd1, %rd57;
	shl.b32 	%r86, %r61, 10;
	mul.wide.s32 	%rd21, %r86, 4;
	cvt.s64.s32 	%rd58, %r81;
	mul.lo.s64 	%rd59, %rd10, %rd9;
	add.s64 	%rd60, %rd59, %rd58;
	shl.b64 	%rd61, %rd60, 2;
	add.s64 	%rd73, %rd2, %rd61;

$L__BB23_9:
	.pragma "nounroll";
	ld.global.f32 	%f39, [%rd73];
	ld.global.f32 	%f40, [%rd74];
	fma.rn.f32 	%f41, %f39, %f19, %f40;
	st.shared.f32 	[%r198], %f41;
	max.f32 	%f174, %f174, %f41;
	add.s32 	%r198, %r198, 4096;
	add.s64 	%rd74, %rd74, %rd21;
	add.s64 	%rd73, %rd73, 4096;
	add.s32 	%r199, %r199, -1;
	setp.ne.s32 	%p6, %r199, 0;
	@%p6 bra 	$L__BB23_9;

$L__BB23_10:
	mov.b32 	%r87, %f174;
	mov.u32 	%r88, 31;
	mov.u32 	%r89, 16;
	mov.u32 	%r90, -1;
	shfl.sync.bfly.b32 	%r91|%p7, %r87, %r89, %r88, %r90;
	mov.b32 	%f42, %r91;
	max.f32 	%f43, %f174, %f42;
	mov.b32 	%r92, %f43;
	mov.u32 	%r93, 8;
	shfl.sync.bfly.b32 	%r94|%p8, %r92, %r93, %r88, %r90;
	mov.b32 	%f44, %r94;
	max.f32 	%f45, %f43, %f44;
	mov.b32 	%r95, %f45;
	mov.u32 	%r96, 4;
	shfl.sync.bfly.b32 	%r97|%p9, %r95, %r96, %r88, %r90;
	mov.b32 	%f46, %r97;
	max.f32 	%f47, %f45, %f46;
	mov.b32 	%r98, %f47;
	mov.u32 	%r99, 2;
	shfl.sync.bfly.b32 	%r100|%p10, %r98, %r99, %r88, %r90;
	mov.b32 	%f48, %r100;
	max.f32 	%f49, %f47, %f48;
	mov.b32 	%r101, %f49;
	mov.u32 	%r102, 1;
	shfl.sync.bfly.b32 	%r103|%p11, %r101, %r102, %r88, %r90;
	mov.b32 	%f50, %r103;
	max.f32 	%f8, %f49, %f50;
	shl.b32 	%r104, %r4, 2;
	mov.u32 	%r105, data_soft_max_f32;
	add.s32 	%r25, %r105, %r104;
	setp.ne.s32 	%p12, %r3, 0;
	@%p12 bra 	$L__BB23_12;

	mov.u32 	%r106, -8388608;
	st.shared.u32 	[%r25], %r106;

$L__BB23_12:
	bar.sync 	0;
	shl.b32 	%r107, %r3, 2;
	add.s32 	%r26, %r105, %r107;
	setp.ne.s32 	%p13, %r4, 0;
	@%p13 bra 	$L__BB23_14;

	st.shared.f32 	[%r26], %f8;

$L__BB23_14:
	bar.sync 	0;
	ld.shared.f32 	%f52, [%r25];
	mov.b32 	%r109, %f52;
	mov.u32 	%r110, 31;
	mov.u32 	%r111, 16;
	mov.u32 	%r112, -1;
	shfl.sync.bfly.b32 	%r113|%p15, %r109, %r111, %r110, %r112;
	mov.b32 	%f53, %r113;
	max.f32 	%f54, %f52, %f53;
	mov.b32 	%r114, %f54;
	mov.u32 	%r115, 8;
	shfl.sync.bfly.b32 	%r116|%p16, %r114, %r115, %r110, %r112;
	mov.b32 	%f55, %r116;
	max.f32 	%f56, %f54, %f55;
	mov.b32 	%r117, %f56;
	mov.u32 	%r118, 4;
	shfl.sync.bfly.b32 	%r119|%p17, %r117, %r118, %r110, %r112;
	mov.b32 	%f57, %r119;
	max.f32 	%f58, %f56, %f57;
	mov.b32 	%r120, %f58;
	mov.u32 	%r121, 2;
	shfl.sync.bfly.b32 	%r122|%p18, %r120, %r121, %r110, %r112;
	mov.b32 	%f59, %r122;
	max.f32 	%f60, %f58, %f59;
	mov.b32 	%r123, %f60;
	mov.u32 	%r124, 1;
	shfl.sync.bfly.b32 	%r125|%p19, %r123, %r124, %r110, %r112;
	mov.b32 	%f61, %r125;
	max.f32 	%f9, %f60, %f61;
	mov.f32 	%f179, 0f00000000;
	@%p2 bra 	$L__BB23_21;

	add.s32 	%r127, %r59, -1;
	shr.u32 	%r27, %r127, 10;
	add.s32 	%r128, %r27, 1;
	and.b32  	%r205, %r128, 3;
	setp.lt.u32 	%p20, %r127, 3072;
	mov.f32 	%f179, 0f00000000;
	mov.u32 	%r203, 0;
	@%p20 bra 	$L__BB23_18;

	shl.b32 	%r130, %r1, 2;
	add.s32 	%r132, %r105, %r130;
	add.s32 	%r201, %r132, 8320;
	sub.s32 	%r200, %r27, %r205;
	mov.f32 	%f179, 0f00000000;
	mov.u32 	%r203, 0;

$L__BB23_17:
	.pragma "nounroll";
	ld.shared.f32 	%f65, [%r201+-8192];
	sub.f32 	%f66, %f65, %f9;
	mov.f32 	%f67, 0f3F000000;
	mov.f32 	%f68, 0f3BBB989D;
	fma.rn.f32 	%f69, %f66, %f68, %f67;
	cvt.sat.f32.f32 	%f70, %f69;
	mov.f32 	%f71, 0f4B400001;
	mov.f32 	%f72, 0f437C0000;
	fma.rm.f32 	%f73, %f70, %f72, %f71;
	add.f32 	%f74, %f73, 0fCB40007F;
	neg.f32 	%f75, %f74;
	mov.f32 	%f76, 0f3FB8AA3B;
	fma.rn.f32 	%f77, %f66, %f76, %f75;
	mov.f32 	%f78, 0f32A57060;
	fma.rn.f32 	%f79, %f66, %f78, %f77;
	mov.b32 	%r133, %f73;
	shl.b32 	%r134, %r133, 23;
	mov.b32 	%f80, %r134;
	ex2.approx.ftz.f32 	%f81, %f79;
	mul.f32 	%f82, %f81, %f80;
	add.f32 	%f83, %f179, %f82;
	st.shared.f32 	[%r201+-8192], %f82;
	ld.shared.f32 	%f84, [%r201+-4096];
	sub.f32 	%f85, %f84, %f9;
	fma.rn.f32 	%f86, %f85, %f68, %f67;
	cvt.sat.f32.f32 	%f87, %f86;
	fma.rm.f32 	%f88, %f87, %f72, %f71;
	add.f32 	%f89, %f88, 0fCB40007F;
	neg.f32 	%f90, %f89;
	fma.rn.f32 	%f91, %f85, %f76, %f90;
	fma.rn.f32 	%f92, %f85, %f78, %f91;
	mov.b32 	%r135, %f88;
	shl.b32 	%r136, %r135, 23;
	mov.b32 	%f93, %r136;
	ex2.approx.ftz.f32 	%f94, %f92;
	mul.f32 	%f95, %f94, %f93;
	add.f32 	%f96, %f83, %f95;
	st.shared.f32 	[%r201+-4096], %f95;
	ld.shared.f32 	%f97, [%r201];
	sub.f32 	%f98, %f97, %f9;
	fma.rn.f32 	%f99, %f98, %f68, %f67;
	cvt.sat.f32.f32 	%f100, %f99;
	fma.rm.f32 	%f101, %f100, %f72, %f71;
	add.f32 	%f102, %f101, 0fCB40007F;
	neg.f32 	%f103, %f102;
	fma.rn.f32 	%f104, %f98, %f76, %f103;
	fma.rn.f32 	%f105, %f98, %f78, %f104;
	mov.b32 	%r137, %f101;
	shl.b32 	%r138, %r137, 23;
	mov.b32 	%f106, %r138;
	ex2.approx.ftz.f32 	%f107, %f105;
	mul.f32 	%f108, %f107, %f106;
	add.f32 	%f109, %f96, %f108;
	st.shared.f32 	[%r201], %f108;
	ld.shared.f32 	%f110, [%r201+4096];
	sub.f32 	%f111, %f110, %f9;
	fma.rn.f32 	%f112, %f111, %f68, %f67;
	cvt.sat.f32.f32 	%f113, %f112;
	fma.rm.f32 	%f114, %f113, %f72, %f71;
	add.f32 	%f115, %f114, 0fCB40007F;
	neg.f32 	%f116, %f115;
	fma.rn.f32 	%f117, %f111, %f76, %f116;
	fma.rn.f32 	%f118, %f111, %f78, %f117;
	mov.b32 	%r139, %f114;
	shl.b32 	%r140, %r139, 23;
	mov.b32 	%f119, %r140;
	ex2.approx.ftz.f32 	%f120, %f118;
	mul.f32 	%f121, %f120, %f119;
	add.f32 	%f179, %f109, %f121;
	st.shared.f32 	[%r201+4096], %f121;
	add.s32 	%r203, %r203, 4096;
	add.s32 	%r201, %r201, 16384;
	add.s32 	%r200, %r200, -4;
	setp.ne.s32 	%p21, %r200, -1;
	@%p21 bra 	$L__BB23_17;

$L__BB23_18:
	setp.eq.s32 	%p22, %r205, 0;
	@%p22 bra 	$L__BB23_21;

	add.s32 	%r141, %r1, %r203;
	shl.b32 	%r142, %r141, 2;
	add.s32 	%r144, %r105, %r142;
	add.s32 	%r204, %r144, 128;

$L__BB23_20:
	.pragma "nounroll";
	ld.shared.f32 	%f122, [%r204];
	sub.f32 	%f123, %f122, %f9;
	mov.f32 	%f124, 0f3F000000;
	mov.f32 	%f125, 0f3BBB989D;
	fma.rn.f32 	%f126, %f123, %f125, %f124;
	cvt.sat.f32.f32 	%f127, %f126;
	mov.f32 	%f128, 0f4B400001;
	mov.f32 	%f129, 0f437C0000;
	fma.rm.f32 	%f130, %f127, %f129, %f128;
	add.f32 	%f131, %f130, 0fCB40007F;
	neg.f32 	%f132, %f131;
	mov.f32 	%f133, 0f3FB8AA3B;
	fma.rn.f32 	%f134, %f123, %f133, %f132;
	mov.f32 	%f135, 0f32A57060;
	fma.rn.f32 	%f136, %f123, %f135, %f134;
	mov.b32 	%r145, %f130;
	shl.b32 	%r146, %r145, 23;
	mov.b32 	%f137, %r146;
	ex2.approx.ftz.f32 	%f138, %f136;
	mul.f32 	%f139, %f138, %f137;
	add.f32 	%f179, %f179, %f139;
	st.shared.f32 	[%r204], %f139;
	add.s32 	%r204, %r204, 4096;
	add.s32 	%r205, %r205, -1;
	setp.ne.s32 	%p23, %r205, 0;
	@%p23 bra 	$L__BB23_20;

$L__BB23_21:
	mov.b32 	%r147, %f179;
	shfl.sync.bfly.b32 	%r151|%p24, %r147, %r111, %r110, %r112;
	mov.b32 	%f140, %r151;
	add.f32 	%f141, %f179, %f140;
	mov.b32 	%r152, %f141;
	shfl.sync.bfly.b32 	%r154|%p25, %r152, %r115, %r110, %r112;
	mov.b32 	%f142, %r154;
	add.f32 	%f143, %f141, %f142;
	mov.b32 	%r155, %f143;
	shfl.sync.bfly.b32 	%r157|%p26, %r155, %r118, %r110, %r112;
	mov.b32 	%f144, %r157;
	add.f32 	%f145, %f143, %f144;
	mov.b32 	%r158, %f145;
	shfl.sync.bfly.b32 	%r160|%p27, %r158, %r121, %r110, %r112;
	mov.b32 	%f146, %r160;
	add.f32 	%f147, %f145, %f146;
	mov.b32 	%r161, %f147;
	shfl.sync.bfly.b32 	%r163|%p28, %r161, %r124, %r110, %r112;
	mov.b32 	%f148, %r163;
	add.f32 	%f17, %f147, %f148;
	bar.sync 	0;
	@%p12 bra 	$L__BB23_23;

	mov.u32 	%r164, 0;
	st.shared.u32 	[%r25], %r164;

$L__BB23_23:
	bar.sync 	0;
	@%p13 bra 	$L__BB23_25;

	st.shared.f32 	[%r26], %f17;

$L__BB23_25:
	bar.sync 	0;
	ld.shared.f32 	%f149, [%r25];
	mov.b32 	%r165, %f149;
	mov.u32 	%r166, 31;
	mov.u32 	%r167, 16;
	mov.u32 	%r168, -1;
	shfl.sync.bfly.b32 	%r169|%p32, %r165, %r167, %r166, %r168;
	mov.b32 	%f150, %r169;
	add.f32 	%f151, %f149, %f150;
	mov.b32 	%r170, %f151;
	mov.u32 	%r171, 8;
	shfl.sync.bfly.b32 	%r172|%p33, %r170, %r171, %r166, %r168;
	mov.b32 	%f152, %r172;
	add.f32 	%f153, %f151, %f152;
	mov.b32 	%r173, %f153;
	mov.u32 	%r174, 4;
	shfl.sync.bfly.b32 	%r175|%p34, %r173, %r174, %r166, %r168;
	mov.b32 	%f154, %r175;
	add.f32 	%f155, %f153, %f154;
	mov.b32 	%r176, %f155;
	mov.u32 	%r177, 2;
	shfl.sync.bfly.b32 	%r178|%p35, %r176, %r177, %r166, %r168;
	mov.b32 	%f156, %r178;
	add.f32 	%f157, %f155, %f156;
	mov.b32 	%r179, %f157;
	mov.u32 	%r180, 1;
	shfl.sync.bfly.b32 	%r181|%p36, %r179, %r180, %r166, %r168;
	mov.b32 	%f158, %r181;
	add.f32 	%f159, %f157, %f158;
	rcp.rn.f32 	%f18, %f159;
	@%p2 bra 	$L__BB23_32;

	add.s32 	%r183, %r59, -1;
	shr.u32 	%r43, %r183, 10;
	add.s32 	%r184, %r43, 1;
	and.b32  	%r211, %r184, 3;
	setp.lt.u32 	%p37, %r183, 3072;
	mov.u32 	%r209, 0;
	@%p37 bra 	$L__BB23_29;

	sub.s32 	%r207, %r43, %r211;
	cvt.s64.s32 	%rd62, %r1;
	mul.lo.s64 	%rd63, %rd10, %rd9;
	add.s64 	%rd64, %rd63, %rd62;
	shl.b64 	%rd65, %rd64, 2;
	add.s64 	%rd75, %rd3, %rd65;
	shl.b32 	%r186, %r1, 2;
	add.s32 	%r188, %r105, %r186;
	add.s32 	%r206, %r188, 8320;
	mov.u32 	%r209, 0;

$L__BB23_28:
	.pragma "nounroll";
	ld.shared.f32 	%f160, [%r206+-8192];
	mul.f32 	%f161, %f18, %f160;
	st.global.f32 	[%rd75], %f161;
	ld.shared.f32 	%f162, [%r206+-4096];
	mul.f32 	%f163, %f18, %f162;
	st.global.f32 	[%rd75+4096], %f163;
	ld.shared.f32 	%f164, [%r206];
	mul.f32 	%f165, %f18, %f164;
	st.global.f32 	[%rd75+8192], %f165;
	ld.shared.f32 	%f166, [%r206+4096];
	mul.f32 	%f167, %f18, %f166;
	st.global.f32 	[%rd75+12288], %f167;
	add.s32 	%r209, %r209, 4096;
	add.s64 	%rd75, %rd75, 16384;
	add.s32 	%r206, %r206, 16384;
	add.s32 	%r207, %r207, -4;
	setp.ne.s32 	%p38, %r207, -1;
	@%p38 bra 	$L__BB23_28;

$L__BB23_29:
	setp.eq.s32 	%p39, %r211, 0;
	@%p39 bra 	$L__BB23_32;

	mul.lo.s64 	%rd66, %rd10, %rd9;
	add.s32 	%r189, %r1, %r209;
	cvt.s64.s32 	%rd67, %r189;
	add.s64 	%rd68, %rd66, %rd67;
	shl.b64 	%rd69, %rd68, 2;
	add.s64 	%rd76, %rd3, %rd69;
	shl.b32 	%r190, %r189, 2;
	add.s32 	%r192, %r105, %r190;
	add.s32 	%r210, %r192, 128;

$L__BB23_31:
	.pragma "nounroll";
	ld.shared.f32 	%f168, [%r210];
	mul.f32 	%f169, %f18, %f168;
	st.global.f32 	[%rd76], %f169;
	add.s64 	%rd76, %rd76, 4096;
	add.s32 	%r210, %r210, 4096;
	add.s32 	%r211, %r211, -1;
	setp.ne.s32 	%p40, %r211, 0;
	@%p40 bra 	$L__BB23_31;

$L__BB23_32:
	ret;

}
	// .globl	scaled_masked_softmax_0_f32
.visible .entry scaled_masked_softmax_0_f32(
	.param .u64 scaled_masked_softmax_0_f32_param_0,
	.param .u64 scaled_masked_softmax_0_f32_param_1,
	.param .f32 scaled_masked_softmax_0_f32_param_2,
	.param .u64 scaled_masked_softmax_0_f32_param_3,
	.param .u32 scaled_masked_softmax_0_f32_param_4,
	.param .u32 scaled_masked_softmax_0_f32_param_5,
	.param .u32 scaled_masked_softmax_0_f32_param_6,
	.param .u32 scaled_masked_softmax_0_f32_param_7,
	.param .u32 scaled_masked_softmax_0_f32_param_8,
	.param .u32 scaled_masked_softmax_0_f32_param_9,
	.param .u32 scaled_masked_softmax_0_f32_param_10,
	.param .u32 scaled_masked_softmax_0_f32_param_11,
	.param .u32 scaled_masked_softmax_0_f32_param_12,
	.param .u32 scaled_masked_softmax_0_f32_param_13,
	.param .u32 scaled_masked_softmax_0_f32_param_14,
	.param .u32 scaled_masked_softmax_0_f32_param_15
)
{
	.reg .pred 	%p<37>;
	.reg .f32 	%f<86>;
	.reg .b32 	%r<144>;
	.reg .b64 	%rd<34>;


	ld.param.u64 	%rd7, [scaled_masked_softmax_0_f32_param_0];
	ld.param.u64 	%rd8, [scaled_masked_softmax_0_f32_param_1];
	ld.param.f32 	%f14, [scaled_masked_softmax_0_f32_param_2];
	ld.param.u64 	%rd9, [scaled_masked_softmax_0_f32_param_3];
	ld.param.u32 	%r15, [scaled_masked_softmax_0_f32_param_6];
	ld.param.s32 	%rd1, [scaled_masked_softmax_0_f32_param_10];
	ld.param.u32 	%r16, [scaled_masked_softmax_0_f32_param_11];
	ld.param.u32 	%r17, [scaled_masked_softmax_0_f32_param_12];
	and.b64  	%rd10, %rd1, -4294967296;
	setp.eq.s64 	%p1, %rd10, 0;
	@%p1 bra 	$L__BB24_2;

	mov.u32 	%r18, %ctaid.y;
	cvt.u64.u32 	%rd11, %r18;
	rem.s64 	%rd33, %rd11, %rd1;
	bra.uni 	$L__BB24_3;

$L__BB24_2:
	cvt.u32.u64 	%r19, %rd1;
	mov.u32 	%r20, %ctaid.y;
	rem.u32 	%r21, %r20, %r19;
	cvt.u64.u32 	%rd33, %r21;

$L__BB24_3:
	mov.u32 	%r22, %ctaid.x;
	cvt.s64.s32 	%rd12, %r16;
	cvt.u64.u32 	%rd13, %r22;
	mul.lo.s64 	%rd14, %rd12, %rd13;
	mul.lo.s64 	%rd15, %rd33, %rd1;
	add.s64 	%rd5, %rd15, %rd14;
	setp.lt.s32 	%p2, %r15, 1;
	mov.f32 	%f81, 0fFF800000;
	@%p2 bra 	$L__BB24_7;

	mov.u32 	%r1, %tid.x;
	shr.u64 	%rd6, %rd5, 2;
	mov.f32 	%f81, 0fFF800000;
	mov.u32 	%r141, 0;
	cvta.to.global.u64 	%rd19, %rd7;
	cvta.to.global.u64 	%rd24, %rd8;

$L__BB24_5:
	add.s32 	%r3, %r141, %r1;
	setp.ge.s32 	%p3, %r3, %r15;
	@%p3 bra 	$L__BB24_7;

	cvt.s64.s32 	%rd16, %r3;
	mov.u32 	%r24, %ctaid.z;
	mov.u32 	%r25, %nctaid.y;
	mov.u32 	%r26, %ctaid.y;
	mad.lo.s32 	%r27, %r25, %r24, %r26;
	mov.u32 	%r28, %nctaid.x;
	mad.lo.s32 	%r30, %r27, %r28, %r22;
	mul.wide.s32 	%rd17, %r15, %r30;
	add.s64 	%rd18, %rd17, %rd16;
	shl.b64 	%rd20, %rd18, 2;
	add.s64 	%rd21, %rd19, %rd20;
	ld.global.f32 	%f17, [%rd21];
	mul.lo.s32 	%r31, %r3, %r17;
	cvt.s64.s32 	%rd22, %r31;
	add.s64 	%rd23, %rd6, %rd22;
	shl.b64 	%rd25, %rd23, 2;
	add.s64 	%rd26, %rd24, %rd25;
	ld.global.f32 	%f18, [%rd26];
	fma.rn.f32 	%f19, %f17, %f14, %f18;
	shl.b32 	%r32, %r3, 2;
	mov.u32 	%r33, data_soft_max_f32;
	add.s32 	%r34, %r33, %r32;
	st.shared.f32 	[%r34+128], %f19;
	max.f32 	%f81, %f81, %f19;
	mov.u32 	%r35, %ntid.x;
	add.s32 	%r141, %r141, %r35;
	setp.lt.s32 	%p4, %r141, %r15;
	@%p4 bra 	$L__BB24_5;

$L__BB24_7:
	mov.b32 	%r36, %f81;
	mov.u32 	%r37, 31;
	mov.u32 	%r38, 16;
	mov.u32 	%r39, -1;
	shfl.sync.bfly.b32 	%r40|%p5, %r36, %r38, %r37, %r39;
	mov.b32 	%f20, %r40;
	max.f32 	%f21, %f81, %f20;
	mov.b32 	%r41, %f21;
	mov.u32 	%r42, 8;
	shfl.sync.bfly.b32 	%r43|%p6, %r41, %r42, %r37, %r39;
	mov.b32 	%f22, %r43;
	max.f32 	%f23, %f21, %f22;
	mov.b32 	%r44, %f23;
	mov.u32 	%r45, 4;
	shfl.sync.bfly.b32 	%r46|%p7, %r44, %r45, %r37, %r39;
	mov.b32 	%f24, %r46;
	max.f32 	%f25, %f23, %f24;
	mov.b32 	%r47, %f25;
	mov.u32 	%r48, 2;
	shfl.sync.bfly.b32 	%r49|%p8, %r47, %r48, %r37, %r39;
	mov.b32 	%f26, %r49;
	max.f32 	%f27, %f25, %f26;
	mov.b32 	%r50, %f27;
	mov.u32 	%r51, 1;
	shfl.sync.bfly.b32 	%r52|%p9, %r50, %r51, %r37, %r39;
	mov.b32 	%f28, %r52;
	max.f32 	%f82, %f27, %f28;
	mov.u32 	%r53, %ntid.x;
	setp.lt.s32 	%p10, %r53, 33;
	mov.u32 	%r54, %tid.x;
	shl.b32 	%r55, %r54, 2;
	and.b32  	%r56, %r55, 124;
	mov.u32 	%r57, data_soft_max_f32;
	add.s32 	%r5, %r57, %r56;
	shr.u32 	%r58, %r54, 3;
	and.b32  	%r59, %r58, 536870908;
	add.s32 	%r6, %r57, %r59;
	@%p10 bra 	$L__BB24_13;

	shr.u32 	%r61, %r54, 5;
	setp.ne.s32 	%p11, %r61, 0;
	@%p11 bra 	$L__BB24_10;

	mov.u32 	%r62, -8388608;
	st.shared.u32 	[%r5], %r62;

$L__BB24_10:
	bar.sync 	0;
	and.b32  	%r64, %r54, 31;
	setp.ne.s32 	%p12, %r64, 0;
	@%p12 bra 	$L__BB24_12;

	st.shared.f32 	[%r6], %f82;

$L__BB24_12:
	bar.sync 	0;
	ld.shared.f32 	%f29, [%r5];
	mov.b32 	%r65, %f29;
	mov.u32 	%r66, 31;
	mov.u32 	%r67, 16;
	mov.u32 	%r68, -1;
	shfl.sync.bfly.b32 	%r69|%p13, %r65, %r67, %r66, %r68;
	mov.b32 	%f30, %r69;
	max.f32 	%f31, %f29, %f30;
	mov.b32 	%r70, %f31;
	mov.u32 	%r71, 8;
	shfl.sync.bfly.b32 	%r72|%p14, %r70, %r71, %r66, %r68;
	mov.b32 	%f32, %r72;
	max.f32 	%f33, %f31, %f32;
	mov.b32 	%r73, %f33;
	mov.u32 	%r74, 4;
	shfl.sync.bfly.b32 	%r75|%p15, %r73, %r74, %r66, %r68;
	mov.b32 	%f34, %r75;
	max.f32 	%f35, %f33, %f34;
	mov.b32 	%r76, %f35;
	mov.u32 	%r77, 2;
	shfl.sync.bfly.b32 	%r78|%p16, %r76, %r77, %r66, %r68;
	mov.b32 	%f36, %r78;
	max.f32 	%f37, %f35, %f36;
	mov.b32 	%r79, %f37;
	mov.u32 	%r80, 1;
	shfl.sync.bfly.b32 	%r81|%p17, %r79, %r80, %r66, %r68;
	mov.b32 	%f38, %r81;
	max.f32 	%f82, %f37, %f38;

$L__BB24_13:
	mov.f32 	%f84, 0f00000000;
	@%p2 bra 	$L__BB24_17;

	mov.f32 	%f84, 0f00000000;
	mov.u32 	%r142, 0;

$L__BB24_15:
	add.s32 	%r9, %r142, %r54;
	setp.ge.s32 	%p19, %r9, %r15;
	@%p19 bra 	$L__BB24_17;

	shl.b32 	%r83, %r9, 2;
	add.s32 	%r85, %r57, %r83;
	ld.shared.f32 	%f41, [%r85+128];
	sub.f32 	%f42, %f41, %f82;
	mov.f32 	%f43, 0f3F000000;
	mov.f32 	%f44, 0f3BBB989D;
	fma.rn.f32 	%f45, %f42, %f44, %f43;
	cvt.sat.f32.f32 	%f46, %f45;
	mov.f32 	%f47, 0f4B400001;
	mov.f32 	%f48, 0f437C0000;
	fma.rm.f32 	%f49, %f46, %f48, %f47;
	add.f32 	%f50, %f49, 0fCB40007F;
	neg.f32 	%f51, %f50;
	mov.f32 	%f52, 0f3FB8AA3B;
	fma.rn.f32 	%f53, %f42, %f52, %f51;
	mov.f32 	%f54, 0f32A57060;
	fma.rn.f32 	%f55, %f42, %f54, %f53;
	mov.b32 	%r86, %f49;
	shl.b32 	%r87, %r86, 23;
	mov.b32 	%f56, %r87;
	ex2.approx.ftz.f32 	%f57, %f55;
	mul.f32 	%f58, %f57, %f56;
	add.f32 	%f84, %f84, %f58;
	st.shared.f32 	[%r85+128], %f58;
	add.s32 	%r142, %r142, %r53;
	setp.lt.s32 	%p20, %r142, %r15;
	@%p20 bra 	$L__BB24_15;

$L__BB24_17:
	mov.b32 	%r90, %f84;
	mov.u32 	%r91, 31;
	mov.u32 	%r92, 16;
	mov.u32 	%r93, -1;
	shfl.sync.bfly.b32 	%r94|%p22, %r90, %r92, %r91, %r93;
	mov.b32 	%f59, %r94;
	add.f32 	%f60, %f84, %f59;
	mov.b32 	%r95, %f60;
	mov.u32 	%r96, 8;
	shfl.sync.bfly.b32 	%r97|%p23, %r95, %r96, %r91, %r93;
	mov.b32 	%f61, %r97;
	add.f32 	%f62, %f60, %f61;
	mov.b32 	%r98, %f62;
	mov.u32 	%r99, 4;
	shfl.sync.bfly.b32 	%r100|%p24, %r98, %r99, %r91, %r93;
	mov.b32 	%f63, %r100;
	add.f32 	%f64, %f62, %f63;
	mov.b32 	%r101, %f64;
	mov.u32 	%r102, 2;
	shfl.sync.bfly.b32 	%r103|%p25, %r101, %r102, %r91, %r93;
	mov.b32 	%f65, %r103;
	add.f32 	%f66, %f64, %f65;
	mov.b32 	%r104, %f66;
	mov.u32 	%r105, 1;
	shfl.sync.bfly.b32 	%r106|%p26, %r104, %r105, %r91, %r93;
	mov.b32 	%f67, %r106;
	add.f32 	%f85, %f66, %f67;
	@%p10 bra 	$L__BB24_23;

	bar.sync 	0;
	shr.u32 	%r108, %r54, 5;
	setp.ne.s32 	%p27, %r108, 0;
	@%p27 bra 	$L__BB24_20;

	mov.u32 	%r109, 0;
	st.shared.u32 	[%r5], %r109;

$L__BB24_20:
	bar.sync 	0;
	and.b32  	%r111, %r54, 31;
	setp.ne.s32 	%p28, %r111, 0;
	@%p28 bra 	$L__BB24_22;

	st.shared.f32 	[%r6], %f85;

$L__BB24_22:
	bar.sync 	0;
	ld.shared.f32 	%f68, [%r5];
	mov.b32 	%r112, %f68;
	mov.u32 	%r113, 31;
	mov.u32 	%r114, 16;
	mov.u32 	%r115, -1;
	shfl.sync.bfly.b32 	%r116|%p29, %r112, %r114, %r113, %r115;
	mov.b32 	%f69, %r116;
	add.f32 	%f70, %f68, %f69;
	mov.b32 	%r117, %f70;
	mov.u32 	%r118, 8;
	shfl.sync.bfly.b32 	%r119|%p30, %r117, %r118, %r113, %r115;
	mov.b32 	%f71, %r119;
	add.f32 	%f72, %f70, %f71;
	mov.b32 	%r120, %f72;
	mov.u32 	%r121, 4;
	shfl.sync.bfly.b32 	%r122|%p31, %r120, %r121, %r113, %r115;
	mov.b32 	%f73, %r122;
	add.f32 	%f74, %f72, %f73;
	mov.b32 	%r123, %f74;
	mov.u32 	%r124, 2;
	shfl.sync.bfly.b32 	%r125|%p32, %r123, %r124, %r113, %r115;
	mov.b32 	%f75, %r125;
	add.f32 	%f76, %f74, %f75;
	mov.b32 	%r126, %f76;
	mov.u32 	%r127, 1;
	shfl.sync.bfly.b32 	%r128|%p33, %r126, %r127, %r113, %r115;
	mov.b32 	%f77, %r128;
	add.f32 	%f85, %f76, %f77;

$L__BB24_23:
	@%p2 bra 	$L__BB24_27;

	rcp.rn.f32 	%f13, %f85;
	mov.u32 	%r143, 0;
	cvta.to.global.u64 	%rd30, %rd9;

$L__BB24_25:
	add.s32 	%r13, %r143, %r54;
	setp.ge.s32 	%p35, %r13, %r15;
	@%p35 bra 	$L__BB24_27;

	shl.b32 	%r130, %r13, 2;
	add.s32 	%r132, %r57, %r130;
	ld.shared.f32 	%f78, [%r132+128];
	mul.f32 	%f79, %f13, %f78;
	mov.u32 	%r133, %ctaid.z;
	mov.u32 	%r134, %nctaid.y;
	mov.u32 	%r135, %ctaid.y;
	mad.lo.s32 	%r136, %r134, %r133, %r135;
	mov.u32 	%r137, %nctaid.x;
	mad.lo.s32 	%r139, %r136, %r137, %r22;
	mul.wide.s32 	%rd27, %r15, %r139;
	cvt.s64.s32 	%rd28, %r13;
	add.s64 	%rd29, %rd27, %rd28;
	shl.b64 	%rd31, %rd29, 2;
	add.s64 	%rd32, %rd30, %rd31;
	st.global.f32 	[%rd32], %f79;
	add.s32 	%r143, %r143, %r53;
	setp.lt.s32 	%p36, %r143, %r15;
	@%p36 bra 	$L__BB24_25;

$L__BB24_27:
	ret;

}
	// .globl	scaled_masked_softmax_32_f16
.visible .entry scaled_masked_softmax_32_f16(
	.param .u64 scaled_masked_softmax_32_f16_param_0,
	.param .u64 scaled_masked_softmax_32_f16_param_1,
	.param .align 2 .b8 scaled_masked_softmax_32_f16_param_2[2],
	.param .u64 scaled_masked_softmax_32_f16_param_3,
	.param .u32 scaled_masked_softmax_32_f16_param_4,
	.param .u32 scaled_masked_softmax_32_f16_param_5,
	.param .u32 scaled_masked_softmax_32_f16_param_6,
	.param .u32 scaled_masked_softmax_32_f16_param_7,
	.param .u32 scaled_masked_softmax_32_f16_param_8,
	.param .u32 scaled_masked_softmax_32_f16_param_9,
	.param .u32 scaled_masked_softmax_32_f16_param_10,
	.param .u32 scaled_masked_softmax_32_f16_param_11,
	.param .u32 scaled_masked_softmax_32_f16_param_12,
	.param .u32 scaled_masked_softmax_32_f16_param_13,
	.param .u32 scaled_masked_softmax_32_f16_param_14,
	.param .u32 scaled_masked_softmax_32_f16_param_15
)
{
	.reg .pred 	%p<27>;
	.reg .b16 	%rs<42>;
	.reg .f32 	%f<147>;
	.reg .b32 	%r<170>;
	.reg .b64 	%rd<66>;


	ld.param.u16 	%rs1, [scaled_masked_softmax_32_f16_param_2];
	ld.param.u64 	%rd25, [scaled_masked_softmax_32_f16_param_0];
	ld.param.u64 	%rd26, [scaled_masked_softmax_32_f16_param_1];
	ld.param.u64 	%rd27, [scaled_masked_softmax_32_f16_param_3];
	ld.param.u32 	%r59, [scaled_masked_softmax_32_f16_param_6];
	ld.param.s32 	%rd5, [scaled_masked_softmax_32_f16_param_10];
	ld.param.u32 	%r60, [scaled_masked_softmax_32_f16_param_11];
	ld.param.u32 	%r61, [scaled_masked_softmax_32_f16_param_12];
	cvta.to.global.u64 	%rd1, %rd26;
	cvta.to.global.u64 	%rd2, %rd25;
	cvta.to.global.u64 	%rd3, %rd27;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.y;
	cvt.u64.u32 	%rd4, %r2;
	and.b64  	%rd28, %rd5, -4294967296;
	setp.eq.s64 	%p1, %rd28, 0;
	@%p1 bra 	$L__BB25_2;

	rem.s64 	%rd61, %rd4, %rd5;
	bra.uni 	$L__BB25_3;

$L__BB25_2:
	cvt.u32.u64 	%r62, %rd5;
	cvt.u32.u64 	%r63, %rd4;
	rem.u32 	%r64, %r63, %r62;
	cvt.u64.u32 	%rd61, %r64;

$L__BB25_3:
	mov.u32 	%r65, %ctaid.x;
	mov.u32 	%r66, %nctaid.x;
	mov.u32 	%r67, %ctaid.z;
	mov.u32 	%r68, %nctaid.y;
	mad.lo.s32 	%r69, %r68, %r67, %r2;
	mad.lo.s32 	%r70, %r69, %r66, %r65;
	cvt.s64.s32 	%rd9, %r70;
	cvt.s64.s32 	%rd10, %r59;
	cvt.s64.s32 	%rd29, %r60;
	cvt.u64.u32 	%rd30, %r65;
	mul.lo.s64 	%rd31, %rd29, %rd30;
	mul.lo.s64 	%rd32, %rd61, %rd5;
	add.s64 	%rd33, %rd32, %rd31;
	shr.u64 	%rd11, %rd33, 1;
	setp.lt.s32 	%p2, %r59, 1;
	mov.f32 	%f141, 0fFF800000;
	@%p2 bra 	$L__BB25_10;

	add.s32 	%r72, %r59, -1;
	shr.u32 	%r3, %r72, 5;
	add.s32 	%r73, %r3, 1;
	and.b32  	%r157, %r73, 3;
	setp.lt.u32 	%p3, %r72, 96;
	mov.f32 	%f141, 0fFF800000;
	mov.u32 	%r154, 0;
	@%p3 bra 	$L__BB25_7;

	mul.lo.s64 	%rd34, %rd10, %rd9;
	shl.b32 	%r5, %r61, 7;
	mul.lo.s32 	%r152, %r1, %r61;
	add.s32 	%r75, %r157, -1;
	sub.s32 	%r151, %r75, %r3;
	cvt.s64.s32 	%rd35, %r1;
	add.s64 	%rd36, %rd34, %rd35;
	shl.b64 	%rd37, %rd36, 1;
	add.s64 	%rd62, %rd2, %rd37;
	shl.b32 	%r76, %r1, 2;
	mov.u32 	%r77, data_soft_max_f32;
	add.s32 	%r78, %r77, %r76;
	add.s32 	%r150, %r78, 256;
	shl.b32 	%r79, %r61, 5;
	mul.wide.s32 	%rd13, %r79, 2;
	mov.f32 	%f141, 0fFF800000;
	mov.u32 	%r154, 0;

$L__BB25_6:
	.pragma "nounroll";
	ld.global.u16 	%rs3, [%rd62];
	// begin inline asm
	{mul.f16 %rs2,%rs3,%rs1;
}
	// end inline asm
	cvt.s64.s32 	%rd38, %r152;
	add.s64 	%rd39, %rd11, %rd38;
	shl.b64 	%rd40, %rd39, 1;
	add.s64 	%rd41, %rd1, %rd40;
	ld.global.u16 	%rs7, [%rd41];
	// begin inline asm
	{add.f16 %rs5,%rs2,%rs7;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f21, %rs5;}

	// end inline asm
	st.shared.f32 	[%r150+-128], %f21;
	max.f32 	%f25, %f141, %f21;
	ld.global.u16 	%rs10, [%rd62+64];
	// begin inline asm
	{mul.f16 %rs9,%rs10,%rs1;
}
	// end inline asm
	add.s64 	%rd42, %rd41, %rd13;
	ld.global.u16 	%rs14, [%rd42];
	// begin inline asm
	{add.f16 %rs12,%rs9,%rs14;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f22, %rs12;}

	// end inline asm
	st.shared.f32 	[%r150], %f22;
	max.f32 	%f26, %f25, %f22;
	ld.global.u16 	%rs17, [%rd62+128];
	// begin inline asm
	{mul.f16 %rs16,%rs17,%rs1;
}
	// end inline asm
	add.s64 	%rd43, %rd42, %rd13;
	ld.global.u16 	%rs21, [%rd43];
	// begin inline asm
	{add.f16 %rs19,%rs16,%rs21;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f23, %rs19;}

	// end inline asm
	st.shared.f32 	[%r150+128], %f23;
	max.f32 	%f27, %f26, %f23;
	ld.global.u16 	%rs24, [%rd62+192];
	// begin inline asm
	{mul.f16 %rs23,%rs24,%rs1;
}
	// end inline asm
	add.s64 	%rd44, %rd43, %rd13;
	ld.global.u16 	%rs28, [%rd44];
	// begin inline asm
	{add.f16 %rs26,%rs23,%rs28;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f24, %rs26;}

	// end inline asm
	st.shared.f32 	[%r150+256], %f24;
	max.f32 	%f141, %f27, %f24;
	add.s32 	%r154, %r154, 128;
	add.s32 	%r152, %r152, %r5;
	add.s64 	%rd62, %rd62, 256;
	add.s32 	%r150, %r150, 512;
	add.s32 	%r151, %r151, 4;
	setp.ne.s32 	%p4, %r151, 0;
	@%p4 bra 	$L__BB25_6;

$L__BB25_7:
	setp.eq.s32 	%p5, %r157, 0;
	@%p5 bra 	$L__BB25_10;

	add.s32 	%r80, %r1, %r154;
	shl.b32 	%r81, %r80, 2;
	mov.u32 	%r82, data_soft_max_f32;
	add.s32 	%r83, %r82, %r81;
	add.s32 	%r156, %r83, 128;
	mul.lo.s32 	%r155, %r61, %r80;
	shl.b32 	%r20, %r61, 5;
	cvt.s64.s32 	%rd45, %r80;
	mul.lo.s64 	%rd46, %rd10, %rd9;
	add.s64 	%rd47, %rd46, %rd45;
	shl.b64 	%rd48, %rd47, 1;
	add.s64 	%rd63, %rd2, %rd48;

$L__BB25_9:
	.pragma "nounroll";
	ld.global.u16 	%rs31, [%rd63];
	// begin inline asm
	{mul.f16 %rs30,%rs31,%rs1;
}
	// end inline asm
	cvt.s64.s32 	%rd49, %r155;
	add.s64 	%rd50, %rd11, %rd49;
	shl.b64 	%rd51, %rd50, 1;
	add.s64 	%rd52, %rd1, %rd51;
	ld.global.u16 	%rs35, [%rd52];
	// begin inline asm
	{add.f16 %rs33,%rs30,%rs35;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f28, %rs33;}

	// end inline asm
	st.shared.f32 	[%r156], %f28;
	max.f32 	%f141, %f141, %f28;
	add.s32 	%r156, %r156, 128;
	add.s32 	%r155, %r155, %r20;
	add.s64 	%rd63, %rd63, 64;
	add.s32 	%r157, %r157, -1;
	setp.ne.s32 	%p6, %r157, 0;
	@%p6 bra 	$L__BB25_9;

$L__BB25_10:
	mov.b32 	%r84, %f141;
	mov.u32 	%r85, 31;
	mov.u32 	%r86, 16;
	mov.u32 	%r87, -1;
	shfl.sync.bfly.b32 	%r88|%p7, %r84, %r86, %r85, %r87;
	mov.b32 	%f30, %r88;
	max.f32 	%f31, %f141, %f30;
	mov.b32 	%r89, %f31;
	mov.u32 	%r90, 8;
	shfl.sync.bfly.b32 	%r91|%p8, %r89, %r90, %r85, %r87;
	mov.b32 	%f32, %r91;
	max.f32 	%f33, %f31, %f32;
	mov.b32 	%r92, %f33;
	mov.u32 	%r93, 4;
	shfl.sync.bfly.b32 	%r94|%p9, %r92, %r93, %r85, %r87;
	mov.b32 	%f34, %r94;
	max.f32 	%f35, %f33, %f34;
	mov.b32 	%r95, %f35;
	mov.u32 	%r96, 2;
	shfl.sync.bfly.b32 	%r97|%p10, %r95, %r96, %r85, %r87;
	mov.b32 	%f36, %r97;
	max.f32 	%f37, %f35, %f36;
	mov.b32 	%r98, %f37;
	mov.u32 	%r99, 1;
	shfl.sync.bfly.b32 	%r100|%p11, %r98, %r99, %r85, %r87;
	mov.b32 	%f38, %r100;
	max.f32 	%f8, %f37, %f38;
	mov.f32 	%f146, 0f00000000;
	@%p2 bra 	$L__BB25_17;

	add.s32 	%r102, %r59, -1;
	shr.u32 	%r27, %r102, 5;
	add.s32 	%r103, %r27, 1;
	and.b32  	%r163, %r103, 3;
	setp.lt.u32 	%p13, %r102, 96;
	mov.f32 	%f146, 0f00000000;
	mov.u32 	%r161, 0;
	@%p13 bra 	$L__BB25_14;

	shl.b32 	%r105, %r1, 2;
	mov.u32 	%r106, data_soft_max_f32;
	add.s32 	%r107, %r106, %r105;
	add.s32 	%r159, %r107, 512;
	sub.s32 	%r158, %r27, %r163;
	mov.f32 	%f146, 0f00000000;
	mov.u32 	%r161, 0;

$L__BB25_13:
	.pragma "nounroll";
	ld.shared.f32 	%f42, [%r159+-384];
	sub.f32 	%f43, %f42, %f8;
	mov.f32 	%f44, 0f3F000000;
	mov.f32 	%f45, 0f3BBB989D;
	fma.rn.f32 	%f46, %f43, %f45, %f44;
	cvt.sat.f32.f32 	%f47, %f46;
	mov.f32 	%f48, 0f4B400001;
	mov.f32 	%f49, 0f437C0000;
	fma.rm.f32 	%f50, %f47, %f49, %f48;
	add.f32 	%f51, %f50, 0fCB40007F;
	neg.f32 	%f52, %f51;
	mov.f32 	%f53, 0f3FB8AA3B;
	fma.rn.f32 	%f54, %f43, %f53, %f52;
	mov.f32 	%f55, 0f32A57060;
	fma.rn.f32 	%f56, %f43, %f55, %f54;
	mov.b32 	%r108, %f50;
	shl.b32 	%r109, %r108, 23;
	mov.b32 	%f57, %r109;
	ex2.approx.ftz.f32 	%f58, %f56;
	mul.f32 	%f59, %f58, %f57;
	add.f32 	%f60, %f146, %f59;
	st.shared.f32 	[%r159+-384], %f59;
	ld.shared.f32 	%f61, [%r159+-256];
	sub.f32 	%f62, %f61, %f8;
	fma.rn.f32 	%f63, %f62, %f45, %f44;
	cvt.sat.f32.f32 	%f64, %f63;
	fma.rm.f32 	%f65, %f64, %f49, %f48;
	add.f32 	%f66, %f65, 0fCB40007F;
	neg.f32 	%f67, %f66;
	fma.rn.f32 	%f68, %f62, %f53, %f67;
	fma.rn.f32 	%f69, %f62, %f55, %f68;
	mov.b32 	%r110, %f65;
	shl.b32 	%r111, %r110, 23;
	mov.b32 	%f70, %r111;
	ex2.approx.ftz.f32 	%f71, %f69;
	mul.f32 	%f72, %f71, %f70;
	add.f32 	%f73, %f60, %f72;
	st.shared.f32 	[%r159+-256], %f72;
	ld.shared.f32 	%f74, [%r159+-128];
	sub.f32 	%f75, %f74, %f8;
	fma.rn.f32 	%f76, %f75, %f45, %f44;
	cvt.sat.f32.f32 	%f77, %f76;
	fma.rm.f32 	%f78, %f77, %f49, %f48;
	add.f32 	%f79, %f78, 0fCB40007F;
	neg.f32 	%f80, %f79;
	fma.rn.f32 	%f81, %f75, %f53, %f80;
	fma.rn.f32 	%f82, %f75, %f55, %f81;
	mov.b32 	%r112, %f78;
	shl.b32 	%r113, %r112, 23;
	mov.b32 	%f83, %r113;
	ex2.approx.ftz.f32 	%f84, %f82;
	mul.f32 	%f85, %f84, %f83;
	add.f32 	%f86, %f73, %f85;
	st.shared.f32 	[%r159+-128], %f85;
	ld.shared.f32 	%f87, [%r159];
	sub.f32 	%f88, %f87, %f8;
	fma.rn.f32 	%f89, %f88, %f45, %f44;
	cvt.sat.f32.f32 	%f90, %f89;
	fma.rm.f32 	%f91, %f90, %f49, %f48;
	add.f32 	%f92, %f91, 0fCB40007F;
	neg.f32 	%f93, %f92;
	fma.rn.f32 	%f94, %f88, %f53, %f93;
	fma.rn.f32 	%f95, %f88, %f55, %f94;
	mov.b32 	%r114, %f91;
	shl.b32 	%r115, %r114, 23;
	mov.b32 	%f96, %r115;
	ex2.approx.ftz.f32 	%f97, %f95;
	mul.f32 	%f98, %f97, %f96;
	add.f32 	%f146, %f86, %f98;
	st.shared.f32 	[%r159], %f98;
	add.s32 	%r161, %r161, 128;
	add.s32 	%r159, %r159, 512;
	add.s32 	%r158, %r158, -4;
	setp.ne.s32 	%p14, %r158, -1;
	@%p14 bra 	$L__BB25_13;

$L__BB25_14:
	setp.eq.s32 	%p15, %r163, 0;
	@%p15 bra 	$L__BB25_17;

	add.s32 	%r116, %r1, %r161;
	shl.b32 	%r117, %r116, 2;
	mov.u32 	%r118, data_soft_max_f32;
	add.s32 	%r119, %r118, %r117;
	add.s32 	%r162, %r119, 128;

$L__BB25_16:
	.pragma "nounroll";
	ld.shared.f32 	%f99, [%r162];
	sub.f32 	%f100, %f99, %f8;
	mov.f32 	%f101, 0f3F000000;
	mov.f32 	%f102, 0f3BBB989D;
	fma.rn.f32 	%f103, %f100, %f102, %f101;
	cvt.sat.f32.f32 	%f104, %f103;
	mov.f32 	%f105, 0f4B400001;
	mov.f32 	%f106, 0f437C0000;
	fma.rm.f32 	%f107, %f104, %f106, %f105;
	add.f32 	%f108, %f107, 0fCB40007F;
	neg.f32 	%f109, %f108;
	mov.f32 	%f110, 0f3FB8AA3B;
	fma.rn.f32 	%f111, %f100, %f110, %f109;
	mov.f32 	%f112, 0f32A57060;
	fma.rn.f32 	%f113, %f100, %f112, %f111;
	mov.b32 	%r120, %f107;
	shl.b32 	%r121, %r120, 23;
	mov.b32 	%f114, %r121;
	ex2.approx.ftz.f32 	%f115, %f113;
	mul.f32 	%f116, %f115, %f114;
	add.f32 	%f146, %f146, %f116;
	st.shared.f32 	[%r162], %f116;
	add.s32 	%r162, %r162, 128;
	add.s32 	%r163, %r163, -1;
	setp.ne.s32 	%p16, %r163, 0;
	@%p16 bra 	$L__BB25_16;

$L__BB25_17:
	mov.b32 	%r122, %f146;
	shfl.sync.bfly.b32 	%r126|%p17, %r122, %r86, %r85, %r87;
	mov.b32 	%f117, %r126;
	add.f32 	%f118, %f146, %f117;
	mov.b32 	%r127, %f118;
	shfl.sync.bfly.b32 	%r129|%p18, %r127, %r90, %r85, %r87;
	mov.b32 	%f119, %r129;
	add.f32 	%f120, %f118, %f119;
	mov.b32 	%r130, %f120;
	shfl.sync.bfly.b32 	%r132|%p19, %r130, %r93, %r85, %r87;
	mov.b32 	%f121, %r132;
	add.f32 	%f122, %f120, %f121;
	mov.b32 	%r133, %f122;
	shfl.sync.bfly.b32 	%r135|%p20, %r133, %r96, %r85, %r87;
	mov.b32 	%f123, %r135;
	add.f32 	%f124, %f122, %f123;
	mov.b32 	%r136, %f124;
	shfl.sync.bfly.b32 	%r138|%p21, %r136, %r99, %r85, %r87;
	mov.b32 	%f125, %r138;
	add.f32 	%f126, %f124, %f125;
	rcp.rn.f32 	%f16, %f126;
	@%p2 bra 	$L__BB25_24;

	add.s32 	%r140, %r59, -1;
	shr.u32 	%r43, %r140, 5;
	add.s32 	%r141, %r43, 1;
	and.b32  	%r169, %r141, 3;
	setp.lt.u32 	%p23, %r140, 96;
	mov.u32 	%r167, 0;
	@%p23 bra 	$L__BB25_21;

	mul.lo.s64 	%rd53, %rd10, %rd9;
	sub.s32 	%r165, %r43, %r169;
	cvt.s64.s32 	%rd54, %r1;
	add.s64 	%rd55, %rd53, %rd54;
	shl.b64 	%rd56, %rd55, 1;
	add.s64 	%rd64, %rd3, %rd56;
	shl.b32 	%r143, %r1, 2;
	mov.u32 	%r144, data_soft_max_f32;
	add.s32 	%r145, %r144, %r143;
	add.s32 	%r164, %r145, 256;
	mov.u32 	%r167, 0;

$L__BB25_20:
	.pragma "nounroll";
	ld.shared.f32 	%f131, [%r164+-128];
	mul.f32 	%f127, %f16, %f131;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs37, %f127;}

	// end inline asm
	st.global.u16 	[%rd64], %rs37;
	ld.shared.f32 	%f132, [%r164];
	mul.f32 	%f128, %f16, %f132;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs38, %f128;}

	// end inline asm
	st.global.u16 	[%rd64+64], %rs38;
	ld.shared.f32 	%f133, [%r164+128];
	mul.f32 	%f129, %f16, %f133;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs39, %f129;}

	// end inline asm
	st.global.u16 	[%rd64+128], %rs39;
	ld.shared.f32 	%f134, [%r164+256];
	mul.f32 	%f130, %f16, %f134;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs40, %f130;}

	// end inline asm
	st.global.u16 	[%rd64+192], %rs40;
	add.s32 	%r167, %r167, 128;
	add.s64 	%rd64, %rd64, 256;
	add.s32 	%r164, %r164, 512;
	add.s32 	%r165, %r165, -4;
	setp.ne.s32 	%p24, %r165, -1;
	@%p24 bra 	$L__BB25_20;

$L__BB25_21:
	setp.eq.s32 	%p25, %r169, 0;
	@%p25 bra 	$L__BB25_24;

	add.s32 	%r146, %r1, %r167;
	shl.b32 	%r147, %r146, 2;
	mov.u32 	%r148, data_soft_max_f32;
	add.s32 	%r149, %r148, %r147;
	add.s32 	%r168, %r149, 128;
	cvt.s64.s32 	%rd57, %r146;
	mul.lo.s64 	%rd58, %rd10, %rd9;
	add.s64 	%rd59, %rd58, %rd57;
	shl.b64 	%rd60, %rd59, 1;
	add.s64 	%rd65, %rd3, %rd60;

$L__BB25_23:
	.pragma "nounroll";
	ld.shared.f32 	%f136, [%r168];
	mul.f32 	%f135, %f16, %f136;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs41, %f135;}

	// end inline asm
	st.global.u16 	[%rd65], %rs41;
	add.s32 	%r168, %r168, 128;
	add.s64 	%rd65, %rd65, 64;
	add.s32 	%r169, %r169, -1;
	setp.ne.s32 	%p26, %r169, 0;
	@%p26 bra 	$L__BB25_23;

$L__BB25_24:
	ret;

}
	// .globl	scaled_masked_softmax_64_f16
.visible .entry scaled_masked_softmax_64_f16(
	.param .u64 scaled_masked_softmax_64_f16_param_0,
	.param .u64 scaled_masked_softmax_64_f16_param_1,
	.param .align 2 .b8 scaled_masked_softmax_64_f16_param_2[2],
	.param .u64 scaled_masked_softmax_64_f16_param_3,
	.param .u32 scaled_masked_softmax_64_f16_param_4,
	.param .u32 scaled_masked_softmax_64_f16_param_5,
	.param .u32 scaled_masked_softmax_64_f16_param_6,
	.param .u32 scaled_masked_softmax_64_f16_param_7,
	.param .u32 scaled_masked_softmax_64_f16_param_8,
	.param .u32 scaled_masked_softmax_64_f16_param_9,
	.param .u32 scaled_masked_softmax_64_f16_param_10,
	.param .u32 scaled_masked_softmax_64_f16_param_11,
	.param .u32 scaled_masked_softmax_64_f16_param_12,
	.param .u32 scaled_masked_softmax_64_f16_param_13,
	.param .u32 scaled_masked_softmax_64_f16_param_14,
	.param .u32 scaled_masked_softmax_64_f16_param_15
)
{
	.reg .pred 	%p<41>;
	.reg .b16 	%rs<42>;
	.reg .f32 	%f<169>;
	.reg .b32 	%r<214>;
	.reg .b64 	%rd<66>;


	ld.param.u16 	%rs1, [scaled_masked_softmax_64_f16_param_2];
	ld.param.u64 	%rd25, [scaled_masked_softmax_64_f16_param_0];
	ld.param.u64 	%rd26, [scaled_masked_softmax_64_f16_param_1];
	ld.param.u64 	%rd27, [scaled_masked_softmax_64_f16_param_3];
	ld.param.u32 	%r63, [scaled_masked_softmax_64_f16_param_6];
	ld.param.s32 	%rd5, [scaled_masked_softmax_64_f16_param_10];
	ld.param.u32 	%r64, [scaled_masked_softmax_64_f16_param_11];
	ld.param.u32 	%r65, [scaled_masked_softmax_64_f16_param_12];
	cvta.to.global.u64 	%rd1, %rd26;
	cvta.to.global.u64 	%rd2, %rd25;
	cvta.to.global.u64 	%rd3, %rd27;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.y;
	cvt.u64.u32 	%rd4, %r2;
	and.b64  	%rd28, %rd5, -4294967296;
	setp.eq.s64 	%p1, %rd28, 0;
	@%p1 bra 	$L__BB26_2;

	rem.s64 	%rd61, %rd4, %rd5;
	bra.uni 	$L__BB26_3;

$L__BB26_2:
	cvt.u32.u64 	%r66, %rd5;
	cvt.u32.u64 	%r67, %rd4;
	rem.u32 	%r68, %r67, %r66;
	cvt.u64.u32 	%rd61, %r68;

$L__BB26_3:
	mov.u32 	%r69, %ctaid.x;
	mov.u32 	%r70, %nctaid.x;
	mov.u32 	%r71, %ctaid.z;
	mov.u32 	%r72, %nctaid.y;
	mad.lo.s32 	%r73, %r72, %r71, %r2;
	mad.lo.s32 	%r74, %r73, %r70, %r69;
	cvt.s64.s32 	%rd9, %r74;
	cvt.s64.s32 	%rd10, %r63;
	cvt.s64.s32 	%rd29, %r64;
	cvt.u64.u32 	%rd30, %r69;
	mul.lo.s64 	%rd31, %rd29, %rd30;
	mul.lo.s64 	%rd32, %rd61, %rd5;
	add.s64 	%rd33, %rd32, %rd31;
	shr.u64 	%rd11, %rd33, 1;
	shr.u32 	%r3, %r1, 5;
	and.b32  	%r4, %r1, 31;
	setp.lt.s32 	%p2, %r63, 1;
	mov.f32 	%f163, 0fFF800000;
	@%p2 bra 	$L__BB26_10;

	add.s32 	%r76, %r63, -1;
	shr.u32 	%r5, %r76, 6;
	add.s32 	%r77, %r5, 1;
	and.b32  	%r201, %r77, 3;
	setp.lt.u32 	%p3, %r76, 192;
	mov.f32 	%f163, 0fFF800000;
	mov.u32 	%r198, 0;
	@%p3 bra 	$L__BB26_7;

	mul.lo.s64 	%rd34, %rd10, %rd9;
	shl.b32 	%r7, %r65, 8;
	add.s32 	%r79, %r201, -1;
	sub.s32 	%r196, %r79, %r5;
	shl.b32 	%r80, %r1, 2;
	mov.u32 	%r81, data_soft_max_f32;
	add.s32 	%r82, %r81, %r80;
	add.s32 	%r195, %r82, 640;
	cvt.s64.s32 	%rd35, %r1;
	add.s64 	%rd36, %rd34, %rd35;
	shl.b64 	%rd37, %rd36, 1;
	add.s64 	%rd62, %rd2, %rd37;
	mul.lo.s32 	%r194, %r1, %r65;
	shl.b32 	%r83, %r65, 6;
	mul.wide.s32 	%rd13, %r83, 2;
	mov.f32 	%f163, 0fFF800000;
	mov.u32 	%r198, 0;

$L__BB26_6:
	.pragma "nounroll";
	ld.global.u16 	%rs3, [%rd62];
	// begin inline asm
	{mul.f16 %rs2,%rs3,%rs1;
}
	// end inline asm
	cvt.s64.s32 	%rd38, %r194;
	add.s64 	%rd39, %rd11, %rd38;
	shl.b64 	%rd40, %rd39, 1;
	add.s64 	%rd41, %rd1, %rd40;
	ld.global.u16 	%rs7, [%rd41];
	// begin inline asm
	{add.f16 %rs5,%rs2,%rs7;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f23, %rs5;}

	// end inline asm
	st.shared.f32 	[%r195+-512], %f23;
	max.f32 	%f27, %f163, %f23;
	ld.global.u16 	%rs10, [%rd62+128];
	// begin inline asm
	{mul.f16 %rs9,%rs10,%rs1;
}
	// end inline asm
	add.s64 	%rd42, %rd41, %rd13;
	ld.global.u16 	%rs14, [%rd42];
	// begin inline asm
	{add.f16 %rs12,%rs9,%rs14;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f24, %rs12;}

	// end inline asm
	st.shared.f32 	[%r195+-256], %f24;
	max.f32 	%f28, %f27, %f24;
	ld.global.u16 	%rs17, [%rd62+256];
	// begin inline asm
	{mul.f16 %rs16,%rs17,%rs1;
}
	// end inline asm
	add.s64 	%rd43, %rd42, %rd13;
	ld.global.u16 	%rs21, [%rd43];
	// begin inline asm
	{add.f16 %rs19,%rs16,%rs21;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f25, %rs19;}

	// end inline asm
	st.shared.f32 	[%r195], %f25;
	max.f32 	%f29, %f28, %f25;
	ld.global.u16 	%rs24, [%rd62+384];
	// begin inline asm
	{mul.f16 %rs23,%rs24,%rs1;
}
	// end inline asm
	add.s64 	%rd44, %rd43, %rd13;
	ld.global.u16 	%rs28, [%rd44];
	// begin inline asm
	{add.f16 %rs26,%rs23,%rs28;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f26, %rs26;}

	// end inline asm
	st.shared.f32 	[%r195+256], %f26;
	max.f32 	%f163, %f29, %f26;
	add.s32 	%r198, %r198, 256;
	add.s32 	%r195, %r195, 1024;
	add.s64 	%rd62, %rd62, 512;
	add.s32 	%r194, %r194, %r7;
	add.s32 	%r196, %r196, 4;
	setp.ne.s32 	%p4, %r196, 0;
	@%p4 bra 	$L__BB26_6;

$L__BB26_7:
	setp.eq.s32 	%p5, %r201, 0;
	@%p5 bra 	$L__BB26_10;

	add.s32 	%r84, %r1, %r198;
	shl.b32 	%r85, %r84, 2;
	mov.u32 	%r86, data_soft_max_f32;
	add.s32 	%r87, %r86, %r85;
	add.s32 	%r200, %r87, 128;
	mul.lo.s32 	%r199, %r65, %r84;
	shl.b32 	%r22, %r65, 6;
	cvt.s64.s32 	%rd45, %r84;
	mul.lo.s64 	%rd46, %rd10, %rd9;
	add.s64 	%rd47, %rd46, %rd45;
	shl.b64 	%rd48, %rd47, 1;
	add.s64 	%rd63, %rd2, %rd48;

$L__BB26_9:
	.pragma "nounroll";
	ld.global.u16 	%rs31, [%rd63];
	// begin inline asm
	{mul.f16 %rs30,%rs31,%rs1;
}
	// end inline asm
	cvt.s64.s32 	%rd49, %r199;
	add.s64 	%rd50, %rd11, %rd49;
	shl.b64 	%rd51, %rd50, 1;
	add.s64 	%rd52, %rd1, %rd51;
	ld.global.u16 	%rs35, [%rd52];
	// begin inline asm
	{add.f16 %rs33,%rs30,%rs35;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f30, %rs33;}

	// end inline asm
	st.shared.f32 	[%r200], %f30;
	max.f32 	%f163, %f163, %f30;
	add.s32 	%r200, %r200, 256;
	add.s32 	%r199, %r199, %r22;
	add.s64 	%rd63, %rd63, 128;
	add.s32 	%r201, %r201, -1;
	setp.ne.s32 	%p6, %r201, 0;
	@%p6 bra 	$L__BB26_9;

$L__BB26_10:
	mov.b32 	%r88, %f163;
	mov.u32 	%r89, 31;
	mov.u32 	%r90, 16;
	mov.u32 	%r91, -1;
	shfl.sync.bfly.b32 	%r92|%p7, %r88, %r90, %r89, %r91;
	mov.b32 	%f31, %r92;
	max.f32 	%f32, %f163, %f31;
	mov.b32 	%r93, %f32;
	mov.u32 	%r94, 8;
	shfl.sync.bfly.b32 	%r95|%p8, %r93, %r94, %r89, %r91;
	mov.b32 	%f33, %r95;
	max.f32 	%f34, %f32, %f33;
	mov.b32 	%r96, %f34;
	mov.u32 	%r97, 4;
	shfl.sync.bfly.b32 	%r98|%p9, %r96, %r97, %r89, %r91;
	mov.b32 	%f35, %r98;
	max.f32 	%f36, %f34, %f35;
	mov.b32 	%r99, %f36;
	mov.u32 	%r100, 2;
	shfl.sync.bfly.b32 	%r101|%p10, %r99, %r100, %r89, %r91;
	mov.b32 	%f37, %r101;
	max.f32 	%f38, %f36, %f37;
	mov.b32 	%r102, %f38;
	mov.u32 	%r103, 1;
	shfl.sync.bfly.b32 	%r104|%p11, %r102, %r103, %r89, %r91;
	mov.b32 	%f39, %r104;
	max.f32 	%f8, %f38, %f39;
	shl.b32 	%r105, %r4, 2;
	mov.u32 	%r106, data_soft_max_f32;
	add.s32 	%r29, %r106, %r105;
	setp.ne.s32 	%p12, %r3, 0;
	@%p12 bra 	$L__BB26_12;

	mov.u32 	%r107, -8388608;
	st.shared.u32 	[%r29], %r107;

$L__BB26_12:
	bar.sync 	0;
	shl.b32 	%r108, %r3, 2;
	add.s32 	%r30, %r106, %r108;
	setp.ne.s32 	%p13, %r4, 0;
	@%p13 bra 	$L__BB26_14;

	st.shared.f32 	[%r30], %f8;

$L__BB26_14:
	bar.sync 	0;
	ld.shared.f32 	%f41, [%r29];
	mov.b32 	%r110, %f41;
	mov.u32 	%r111, 31;
	mov.u32 	%r112, 16;
	mov.u32 	%r113, -1;
	shfl.sync.bfly.b32 	%r114|%p15, %r110, %r112, %r111, %r113;
	mov.b32 	%f42, %r114;
	max.f32 	%f43, %f41, %f42;
	mov.b32 	%r115, %f43;
	mov.u32 	%r116, 8;
	shfl.sync.bfly.b32 	%r117|%p16, %r115, %r116, %r111, %r113;
	mov.b32 	%f44, %r117;
	max.f32 	%f45, %f43, %f44;
	mov.b32 	%r118, %f45;
	mov.u32 	%r119, 4;
	shfl.sync.bfly.b32 	%r120|%p17, %r118, %r119, %r111, %r113;
	mov.b32 	%f46, %r120;
	max.f32 	%f47, %f45, %f46;
	mov.b32 	%r121, %f47;
	mov.u32 	%r122, 2;
	shfl.sync.bfly.b32 	%r123|%p18, %r121, %r122, %r111, %r113;
	mov.b32 	%f48, %r123;
	max.f32 	%f49, %f47, %f48;
	mov.b32 	%r124, %f49;
	mov.u32 	%r125, 1;
	shfl.sync.bfly.b32 	%r126|%p19, %r124, %r125, %r111, %r113;
	mov.b32 	%f50, %r126;
	max.f32 	%f9, %f49, %f50;
	mov.f32 	%f168, 0f00000000;
	@%p2 bra 	$L__BB26_21;

	add.s32 	%r128, %r63, -1;
	shr.u32 	%r31, %r128, 6;
	add.s32 	%r129, %r31, 1;
	and.b32  	%r207, %r129, 3;
	setp.lt.u32 	%p20, %r128, 192;
	mov.f32 	%f168, 0f00000000;
	mov.u32 	%r205, 0;
	@%p20 bra 	$L__BB26_18;

	shl.b32 	%r131, %r1, 2;
	add.s32 	%r133, %r106, %r131;
	add.s32 	%r203, %r133, 640;
	sub.s32 	%r202, %r31, %r207;
	mov.f32 	%f168, 0f00000000;
	mov.u32 	%r205, 0;

$L__BB26_17:
	.pragma "nounroll";
	ld.shared.f32 	%f54, [%r203+-512];
	sub.f32 	%f55, %f54, %f9;
	mov.f32 	%f56, 0f3F000000;
	mov.f32 	%f57, 0f3BBB989D;
	fma.rn.f32 	%f58, %f55, %f57, %f56;
	cvt.sat.f32.f32 	%f59, %f58;
	mov.f32 	%f60, 0f4B400001;
	mov.f32 	%f61, 0f437C0000;
	fma.rm.f32 	%f62, %f59, %f61, %f60;
	add.f32 	%f63, %f62, 0fCB40007F;
	neg.f32 	%f64, %f63;
	mov.f32 	%f65, 0f3FB8AA3B;
	fma.rn.f32 	%f66, %f55, %f65, %f64;
	mov.f32 	%f67, 0f32A57060;
	fma.rn.f32 	%f68, %f55, %f67, %f66;
	mov.b32 	%r134, %f62;
	shl.b32 	%r135, %r134, 23;
	mov.b32 	%f69, %r135;
	ex2.approx.ftz.f32 	%f70, %f68;
	mul.f32 	%f71, %f70, %f69;
	add.f32 	%f72, %f168, %f71;
	st.shared.f32 	[%r203+-512], %f71;
	ld.shared.f32 	%f73, [%r203+-256];
	sub.f32 	%f74, %f73, %f9;
	fma.rn.f32 	%f75, %f74, %f57, %f56;
	cvt.sat.f32.f32 	%f76, %f75;
	fma.rm.f32 	%f77, %f76, %f61, %f60;
	add.f32 	%f78, %f77, 0fCB40007F;
	neg.f32 	%f79, %f78;
	fma.rn.f32 	%f80, %f74, %f65, %f79;
	fma.rn.f32 	%f81, %f74, %f67, %f80;
	mov.b32 	%r136, %f77;
	shl.b32 	%r137, %r136, 23;
	mov.b32 	%f82, %r137;
	ex2.approx.ftz.f32 	%f83, %f81;
	mul.f32 	%f84, %f83, %f82;
	add.f32 	%f85, %f72, %f84;
	st.shared.f32 	[%r203+-256], %f84;
	ld.shared.f32 	%f86, [%r203];
	sub.f32 	%f87, %f86, %f9;
	fma.rn.f32 	%f88, %f87, %f57, %f56;
	cvt.sat.f32.f32 	%f89, %f88;
	fma.rm.f32 	%f90, %f89, %f61, %f60;
	add.f32 	%f91, %f90, 0fCB40007F;
	neg.f32 	%f92, %f91;
	fma.rn.f32 	%f93, %f87, %f65, %f92;
	fma.rn.f32 	%f94, %f87, %f67, %f93;
	mov.b32 	%r138, %f90;
	shl.b32 	%r139, %r138, 23;
	mov.b32 	%f95, %r139;
	ex2.approx.ftz.f32 	%f96, %f94;
	mul.f32 	%f97, %f96, %f95;
	add.f32 	%f98, %f85, %f97;
	st.shared.f32 	[%r203], %f97;
	ld.shared.f32 	%f99, [%r203+256];
	sub.f32 	%f100, %f99, %f9;
	fma.rn.f32 	%f101, %f100, %f57, %f56;
	cvt.sat.f32.f32 	%f102, %f101;
	fma.rm.f32 	%f103, %f102, %f61, %f60;
	add.f32 	%f104, %f103, 0fCB40007F;
	neg.f32 	%f105, %f104;
	fma.rn.f32 	%f106, %f100, %f65, %f105;
	fma.rn.f32 	%f107, %f100, %f67, %f106;
	mov.b32 	%r140, %f103;
	shl.b32 	%r141, %r140, 23;
	mov.b32 	%f108, %r141;
	ex2.approx.ftz.f32 	%f109, %f107;
	mul.f32 	%f110, %f109, %f108;
	add.f32 	%f168, %f98, %f110;
	st.shared.f32 	[%r203+256], %f110;
	add.s32 	%r205, %r205, 256;
	add.s32 	%r203, %r203, 1024;
	add.s32 	%r202, %r202, -4;
	setp.ne.s32 	%p21, %r202, -1;
	@%p21 bra 	$L__BB26_17;

$L__BB26_18:
	setp.eq.s32 	%p22, %r207, 0;
	@%p22 bra 	$L__BB26_21;

	add.s32 	%r142, %r1, %r205;
	shl.b32 	%r143, %r142, 2;
	add.s32 	%r145, %r106, %r143;
	add.s32 	%r206, %r145, 128;

$L__BB26_20:
	.pragma "nounroll";
	ld.shared.f32 	%f111, [%r206];
	sub.f32 	%f112, %f111, %f9;
	mov.f32 	%f113, 0f3F000000;
	mov.f32 	%f114, 0f3BBB989D;
	fma.rn.f32 	%f115, %f112, %f114, %f113;
	cvt.sat.f32.f32 	%f116, %f115;
	mov.f32 	%f117, 0f4B400001;
	mov.f32 	%f118, 0f437C0000;
	fma.rm.f32 	%f119, %f116, %f118, %f117;
	add.f32 	%f120, %f119, 0fCB40007F;
	neg.f32 	%f121, %f120;
	mov.f32 	%f122, 0f3FB8AA3B;
	fma.rn.f32 	%f123, %f112, %f122, %f121;
	mov.f32 	%f124, 0f32A57060;
	fma.rn.f32 	%f125, %f112, %f124, %f123;
	mov.b32 	%r146, %f119;
	shl.b32 	%r147, %r146, 23;
	mov.b32 	%f126, %r147;
	ex2.approx.ftz.f32 	%f127, %f125;
	mul.f32 	%f128, %f127, %f126;
	add.f32 	%f168, %f168, %f128;
	st.shared.f32 	[%r206], %f128;
	add.s32 	%r206, %r206, 256;
	add.s32 	%r207, %r207, -1;
	setp.ne.s32 	%p23, %r207, 0;
	@%p23 bra 	$L__BB26_20;

$L__BB26_21:
	mov.b32 	%r148, %f168;
	shfl.sync.bfly.b32 	%r152|%p24, %r148, %r112, %r111, %r113;
	mov.b32 	%f129, %r152;
	add.f32 	%f130, %f168, %f129;
	mov.b32 	%r153, %f130;
	shfl.sync.bfly.b32 	%r155|%p25, %r153, %r116, %r111, %r113;
	mov.b32 	%f131, %r155;
	add.f32 	%f132, %f130, %f131;
	mov.b32 	%r156, %f132;
	shfl.sync.bfly.b32 	%r158|%p26, %r156, %r119, %r111, %r113;
	mov.b32 	%f133, %r158;
	add.f32 	%f134, %f132, %f133;
	mov.b32 	%r159, %f134;
	shfl.sync.bfly.b32 	%r161|%p27, %r159, %r122, %r111, %r113;
	mov.b32 	%f135, %r161;
	add.f32 	%f136, %f134, %f135;
	mov.b32 	%r162, %f136;
	shfl.sync.bfly.b32 	%r164|%p28, %r162, %r125, %r111, %r113;
	mov.b32 	%f137, %r164;
	add.f32 	%f17, %f136, %f137;
	bar.sync 	0;
	@%p12 bra 	$L__BB26_23;

	mov.u32 	%r165, 0;
	st.shared.u32 	[%r29], %r165;

$L__BB26_23:
	bar.sync 	0;
	@%p13 bra 	$L__BB26_25;

	st.shared.f32 	[%r30], %f17;

$L__BB26_25:
	bar.sync 	0;
	ld.shared.f32 	%f138, [%r29];
	mov.b32 	%r166, %f138;
	mov.u32 	%r167, 31;
	mov.u32 	%r168, 16;
	mov.u32 	%r169, -1;
	shfl.sync.bfly.b32 	%r170|%p32, %r166, %r168, %r167, %r169;
	mov.b32 	%f139, %r170;
	add.f32 	%f140, %f138, %f139;
	mov.b32 	%r171, %f140;
	mov.u32 	%r172, 8;
	shfl.sync.bfly.b32 	%r173|%p33, %r171, %r172, %r167, %r169;
	mov.b32 	%f141, %r173;
	add.f32 	%f142, %f140, %f141;
	mov.b32 	%r174, %f142;
	mov.u32 	%r175, 4;
	shfl.sync.bfly.b32 	%r176|%p34, %r174, %r175, %r167, %r169;
	mov.b32 	%f143, %r176;
	add.f32 	%f144, %f142, %f143;
	mov.b32 	%r177, %f144;
	mov.u32 	%r178, 2;
	shfl.sync.bfly.b32 	%r179|%p35, %r177, %r178, %r167, %r169;
	mov.b32 	%f145, %r179;
	add.f32 	%f146, %f144, %f145;
	mov.b32 	%r180, %f146;
	mov.u32 	%r181, 1;
	shfl.sync.bfly.b32 	%r182|%p36, %r180, %r181, %r167, %r169;
	mov.b32 	%f147, %r182;
	add.f32 	%f148, %f146, %f147;
	rcp.rn.f32 	%f18, %f148;
	@%p2 bra 	$L__BB26_32;

	add.s32 	%r184, %r63, -1;
	shr.u32 	%r47, %r184, 6;
	add.s32 	%r185, %r47, 1;
	and.b32  	%r213, %r185, 3;
	setp.lt.u32 	%p37, %r184, 192;
	mov.u32 	%r211, 0;
	@%p37 bra 	$L__BB26_29;

	mul.lo.s64 	%rd53, %rd10, %rd9;
	sub.s32 	%r209, %r47, %r213;
	shl.b32 	%r187, %r1, 2;
	add.s32 	%r189, %r106, %r187;
	add.s32 	%r208, %r189, 640;
	cvt.s64.s32 	%rd54, %r1;
	add.s64 	%rd55, %rd53, %rd54;
	shl.b64 	%rd56, %rd55, 1;
	add.s64 	%rd64, %rd3, %rd56;
	mov.u32 	%r211, 0;

$L__BB26_28:
	.pragma "nounroll";
	ld.shared.f32 	%f153, [%r208+-512];
	mul.f32 	%f149, %f18, %f153;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs37, %f149;}

	// end inline asm
	st.global.u16 	[%rd64], %rs37;
	ld.shared.f32 	%f154, [%r208+-256];
	mul.f32 	%f150, %f18, %f154;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs38, %f150;}

	// end inline asm
	st.global.u16 	[%rd64+128], %rs38;
	ld.shared.f32 	%f155, [%r208];
	mul.f32 	%f151, %f18, %f155;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs39, %f151;}

	// end inline asm
	st.global.u16 	[%rd64+256], %rs39;
	ld.shared.f32 	%f156, [%r208+256];
	mul.f32 	%f152, %f18, %f156;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs40, %f152;}

	// end inline asm
	st.global.u16 	[%rd64+384], %rs40;
	add.s32 	%r211, %r211, 256;
	add.s32 	%r208, %r208, 1024;
	add.s64 	%rd64, %rd64, 512;
	add.s32 	%r209, %r209, -4;
	setp.ne.s32 	%p38, %r209, -1;
	@%p38 bra 	$L__BB26_28;

$L__BB26_29:
	setp.eq.s32 	%p39, %r213, 0;
	@%p39 bra 	$L__BB26_32;

	add.s32 	%r190, %r1, %r211;
	shl.b32 	%r191, %r190, 2;
	add.s32 	%r193, %r106, %r191;
	add.s32 	%r212, %r193, 128;
	cvt.s64.s32 	%rd57, %r190;
	mul.lo.s64 	%rd58, %rd10, %rd9;
	add.s64 	%rd59, %rd58, %rd57;
	shl.b64 	%rd60, %rd59, 1;
	add.s64 	%rd65, %rd3, %rd60;

$L__BB26_31:
	.pragma "nounroll";
	ld.shared.f32 	%f158, [%r212];
	mul.f32 	%f157, %f18, %f158;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs41, %f157;}

	// end inline asm
	st.global.u16 	[%rd65], %rs41;
	add.s32 	%r212, %r212, 256;
	add.s64 	%rd65, %rd65, 128;
	add.s32 	%r213, %r213, -1;
	setp.ne.s32 	%p40, %r213, 0;
	@%p40 bra 	$L__BB26_31;

$L__BB26_32:
	ret;

}
	// .globl	scaled_masked_softmax_128_f16
.visible .entry scaled_masked_softmax_128_f16(
	.param .u64 scaled_masked_softmax_128_f16_param_0,
	.param .u64 scaled_masked_softmax_128_f16_param_1,
	.param .align 2 .b8 scaled_masked_softmax_128_f16_param_2[2],
	.param .u64 scaled_masked_softmax_128_f16_param_3,
	.param .u32 scaled_masked_softmax_128_f16_param_4,
	.param .u32 scaled_masked_softmax_128_f16_param_5,
	.param .u32 scaled_masked_softmax_128_f16_param_6,
	.param .u32 scaled_masked_softmax_128_f16_param_7,
	.param .u32 scaled_masked_softmax_128_f16_param_8,
	.param .u32 scaled_masked_softmax_128_f16_param_9,
	.param .u32 scaled_masked_softmax_128_f16_param_10,
	.param .u32 scaled_masked_softmax_128_f16_param_11,
	.param .u32 scaled_masked_softmax_128_f16_param_12,
	.param .u32 scaled_masked_softmax_128_f16_param_13,
	.param .u32 scaled_masked_softmax_128_f16_param_14,
	.param .u32 scaled_masked_softmax_128_f16_param_15
)
{
	.reg .pred 	%p<41>;
	.reg .b16 	%rs<42>;
	.reg .f32 	%f<169>;
	.reg .b32 	%r<214>;
	.reg .b64 	%rd<66>;


	ld.param.u16 	%rs1, [scaled_masked_softmax_128_f16_param_2];
	ld.param.u64 	%rd25, [scaled_masked_softmax_128_f16_param_0];
	ld.param.u64 	%rd26, [scaled_masked_softmax_128_f16_param_1];
	ld.param.u64 	%rd27, [scaled_masked_softmax_128_f16_param_3];
	ld.param.u32 	%r63, [scaled_masked_softmax_128_f16_param_6];
	ld.param.s32 	%rd5, [scaled_masked_softmax_128_f16_param_10];
	ld.param.u32 	%r64, [scaled_masked_softmax_128_f16_param_11];
	ld.param.u32 	%r65, [scaled_masked_softmax_128_f16_param_12];
	cvta.to.global.u64 	%rd1, %rd26;
	cvta.to.global.u64 	%rd2, %rd25;
	cvta.to.global.u64 	%rd3, %rd27;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.y;
	cvt.u64.u32 	%rd4, %r2;
	and.b64  	%rd28, %rd5, -4294967296;
	setp.eq.s64 	%p1, %rd28, 0;
	@%p1 bra 	$L__BB27_2;

	rem.s64 	%rd61, %rd4, %rd5;
	bra.uni 	$L__BB27_3;

$L__BB27_2:
	cvt.u32.u64 	%r66, %rd5;
	cvt.u32.u64 	%r67, %rd4;
	rem.u32 	%r68, %r67, %r66;
	cvt.u64.u32 	%rd61, %r68;

$L__BB27_3:
	mov.u32 	%r69, %ctaid.x;
	mov.u32 	%r70, %nctaid.x;
	mov.u32 	%r71, %ctaid.z;
	mov.u32 	%r72, %nctaid.y;
	mad.lo.s32 	%r73, %r72, %r71, %r2;
	mad.lo.s32 	%r74, %r73, %r70, %r69;
	cvt.s64.s32 	%rd9, %r74;
	cvt.s64.s32 	%rd10, %r63;
	cvt.s64.s32 	%rd29, %r64;
	cvt.u64.u32 	%rd30, %r69;
	mul.lo.s64 	%rd31, %rd29, %rd30;
	mul.lo.s64 	%rd32, %rd61, %rd5;
	add.s64 	%rd33, %rd32, %rd31;
	shr.u64 	%rd11, %rd33, 1;
	shr.u32 	%r3, %r1, 5;
	and.b32  	%r4, %r1, 31;
	setp.lt.s32 	%p2, %r63, 1;
	mov.f32 	%f163, 0fFF800000;
	@%p2 bra 	$L__BB27_10;

	add.s32 	%r76, %r63, -1;
	shr.u32 	%r5, %r76, 7;
	add.s32 	%r77, %r5, 1;
	and.b32  	%r201, %r77, 3;
	setp.lt.u32 	%p3, %r76, 384;
	mov.f32 	%f163, 0fFF800000;
	mov.u32 	%r198, 0;
	@%p3 bra 	$L__BB27_7;

	mul.lo.s64 	%rd34, %rd10, %rd9;
	shl.b32 	%r7, %r65, 9;
	add.s32 	%r79, %r201, -1;
	sub.s32 	%r196, %r79, %r5;
	shl.b32 	%r80, %r1, 2;
	mov.u32 	%r81, data_soft_max_f32;
	add.s32 	%r82, %r81, %r80;
	add.s32 	%r195, %r82, 1152;
	cvt.s64.s32 	%rd35, %r1;
	add.s64 	%rd36, %rd34, %rd35;
	shl.b64 	%rd37, %rd36, 1;
	add.s64 	%rd62, %rd2, %rd37;
	mul.lo.s32 	%r194, %r1, %r65;
	shl.b32 	%r83, %r65, 7;
	mul.wide.s32 	%rd13, %r83, 2;
	mov.f32 	%f163, 0fFF800000;
	mov.u32 	%r198, 0;

$L__BB27_6:
	.pragma "nounroll";
	ld.global.u16 	%rs3, [%rd62];
	// begin inline asm
	{mul.f16 %rs2,%rs3,%rs1;
}
	// end inline asm
	cvt.s64.s32 	%rd38, %r194;
	add.s64 	%rd39, %rd11, %rd38;
	shl.b64 	%rd40, %rd39, 1;
	add.s64 	%rd41, %rd1, %rd40;
	ld.global.u16 	%rs7, [%rd41];
	// begin inline asm
	{add.f16 %rs5,%rs2,%rs7;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f23, %rs5;}

	// end inline asm
	st.shared.f32 	[%r195+-1024], %f23;
	max.f32 	%f27, %f163, %f23;
	ld.global.u16 	%rs10, [%rd62+256];
	// begin inline asm
	{mul.f16 %rs9,%rs10,%rs1;
}
	// end inline asm
	add.s64 	%rd42, %rd41, %rd13;
	ld.global.u16 	%rs14, [%rd42];
	// begin inline asm
	{add.f16 %rs12,%rs9,%rs14;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f24, %rs12;}

	// end inline asm
	st.shared.f32 	[%r195+-512], %f24;
	max.f32 	%f28, %f27, %f24;
	ld.global.u16 	%rs17, [%rd62+512];
	// begin inline asm
	{mul.f16 %rs16,%rs17,%rs1;
}
	// end inline asm
	add.s64 	%rd43, %rd42, %rd13;
	ld.global.u16 	%rs21, [%rd43];
	// begin inline asm
	{add.f16 %rs19,%rs16,%rs21;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f25, %rs19;}

	// end inline asm
	st.shared.f32 	[%r195], %f25;
	max.f32 	%f29, %f28, %f25;
	ld.global.u16 	%rs24, [%rd62+768];
	// begin inline asm
	{mul.f16 %rs23,%rs24,%rs1;
}
	// end inline asm
	add.s64 	%rd44, %rd43, %rd13;
	ld.global.u16 	%rs28, [%rd44];
	// begin inline asm
	{add.f16 %rs26,%rs23,%rs28;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f26, %rs26;}

	// end inline asm
	st.shared.f32 	[%r195+512], %f26;
	max.f32 	%f163, %f29, %f26;
	add.s32 	%r198, %r198, 512;
	add.s32 	%r195, %r195, 2048;
	add.s64 	%rd62, %rd62, 1024;
	add.s32 	%r194, %r194, %r7;
	add.s32 	%r196, %r196, 4;
	setp.ne.s32 	%p4, %r196, 0;
	@%p4 bra 	$L__BB27_6;

$L__BB27_7:
	setp.eq.s32 	%p5, %r201, 0;
	@%p5 bra 	$L__BB27_10;

	add.s32 	%r84, %r1, %r198;
	shl.b32 	%r85, %r84, 2;
	mov.u32 	%r86, data_soft_max_f32;
	add.s32 	%r87, %r86, %r85;
	add.s32 	%r200, %r87, 128;
	mul.lo.s32 	%r199, %r65, %r84;
	shl.b32 	%r22, %r65, 7;
	cvt.s64.s32 	%rd45, %r84;
	mul.lo.s64 	%rd46, %rd10, %rd9;
	add.s64 	%rd47, %rd46, %rd45;
	shl.b64 	%rd48, %rd47, 1;
	add.s64 	%rd63, %rd2, %rd48;

$L__BB27_9:
	.pragma "nounroll";
	ld.global.u16 	%rs31, [%rd63];
	// begin inline asm
	{mul.f16 %rs30,%rs31,%rs1;
}
	// end inline asm
	cvt.s64.s32 	%rd49, %r199;
	add.s64 	%rd50, %rd11, %rd49;
	shl.b64 	%rd51, %rd50, 1;
	add.s64 	%rd52, %rd1, %rd51;
	ld.global.u16 	%rs35, [%rd52];
	// begin inline asm
	{add.f16 %rs33,%rs30,%rs35;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f30, %rs33;}

	// end inline asm
	st.shared.f32 	[%r200], %f30;
	max.f32 	%f163, %f163, %f30;
	add.s32 	%r200, %r200, 512;
	add.s32 	%r199, %r199, %r22;
	add.s64 	%rd63, %rd63, 256;
	add.s32 	%r201, %r201, -1;
	setp.ne.s32 	%p6, %r201, 0;
	@%p6 bra 	$L__BB27_9;

$L__BB27_10:
	mov.b32 	%r88, %f163;
	mov.u32 	%r89, 31;
	mov.u32 	%r90, 16;
	mov.u32 	%r91, -1;
	shfl.sync.bfly.b32 	%r92|%p7, %r88, %r90, %r89, %r91;
	mov.b32 	%f31, %r92;
	max.f32 	%f32, %f163, %f31;
	mov.b32 	%r93, %f32;
	mov.u32 	%r94, 8;
	shfl.sync.bfly.b32 	%r95|%p8, %r93, %r94, %r89, %r91;
	mov.b32 	%f33, %r95;
	max.f32 	%f34, %f32, %f33;
	mov.b32 	%r96, %f34;
	mov.u32 	%r97, 4;
	shfl.sync.bfly.b32 	%r98|%p9, %r96, %r97, %r89, %r91;
	mov.b32 	%f35, %r98;
	max.f32 	%f36, %f34, %f35;
	mov.b32 	%r99, %f36;
	mov.u32 	%r100, 2;
	shfl.sync.bfly.b32 	%r101|%p10, %r99, %r100, %r89, %r91;
	mov.b32 	%f37, %r101;
	max.f32 	%f38, %f36, %f37;
	mov.b32 	%r102, %f38;
	mov.u32 	%r103, 1;
	shfl.sync.bfly.b32 	%r104|%p11, %r102, %r103, %r89, %r91;
	mov.b32 	%f39, %r104;
	max.f32 	%f8, %f38, %f39;
	shl.b32 	%r105, %r4, 2;
	mov.u32 	%r106, data_soft_max_f32;
	add.s32 	%r29, %r106, %r105;
	setp.ne.s32 	%p12, %r3, 0;
	@%p12 bra 	$L__BB27_12;

	mov.u32 	%r107, -8388608;
	st.shared.u32 	[%r29], %r107;

$L__BB27_12:
	bar.sync 	0;
	shl.b32 	%r108, %r3, 2;
	add.s32 	%r30, %r106, %r108;
	setp.ne.s32 	%p13, %r4, 0;
	@%p13 bra 	$L__BB27_14;

	st.shared.f32 	[%r30], %f8;

$L__BB27_14:
	bar.sync 	0;
	ld.shared.f32 	%f41, [%r29];
	mov.b32 	%r110, %f41;
	mov.u32 	%r111, 31;
	mov.u32 	%r112, 16;
	mov.u32 	%r113, -1;
	shfl.sync.bfly.b32 	%r114|%p15, %r110, %r112, %r111, %r113;
	mov.b32 	%f42, %r114;
	max.f32 	%f43, %f41, %f42;
	mov.b32 	%r115, %f43;
	mov.u32 	%r116, 8;
	shfl.sync.bfly.b32 	%r117|%p16, %r115, %r116, %r111, %r113;
	mov.b32 	%f44, %r117;
	max.f32 	%f45, %f43, %f44;
	mov.b32 	%r118, %f45;
	mov.u32 	%r119, 4;
	shfl.sync.bfly.b32 	%r120|%p17, %r118, %r119, %r111, %r113;
	mov.b32 	%f46, %r120;
	max.f32 	%f47, %f45, %f46;
	mov.b32 	%r121, %f47;
	mov.u32 	%r122, 2;
	shfl.sync.bfly.b32 	%r123|%p18, %r121, %r122, %r111, %r113;
	mov.b32 	%f48, %r123;
	max.f32 	%f49, %f47, %f48;
	mov.b32 	%r124, %f49;
	mov.u32 	%r125, 1;
	shfl.sync.bfly.b32 	%r126|%p19, %r124, %r125, %r111, %r113;
	mov.b32 	%f50, %r126;
	max.f32 	%f9, %f49, %f50;
	mov.f32 	%f168, 0f00000000;
	@%p2 bra 	$L__BB27_21;

	add.s32 	%r128, %r63, -1;
	shr.u32 	%r31, %r128, 7;
	add.s32 	%r129, %r31, 1;
	and.b32  	%r207, %r129, 3;
	setp.lt.u32 	%p20, %r128, 384;
	mov.f32 	%f168, 0f00000000;
	mov.u32 	%r205, 0;
	@%p20 bra 	$L__BB27_18;

	shl.b32 	%r131, %r1, 2;
	add.s32 	%r133, %r106, %r131;
	add.s32 	%r203, %r133, 1152;
	sub.s32 	%r202, %r31, %r207;
	mov.f32 	%f168, 0f00000000;
	mov.u32 	%r205, 0;

$L__BB27_17:
	.pragma "nounroll";
	ld.shared.f32 	%f54, [%r203+-1024];
	sub.f32 	%f55, %f54, %f9;
	mov.f32 	%f56, 0f3F000000;
	mov.f32 	%f57, 0f3BBB989D;
	fma.rn.f32 	%f58, %f55, %f57, %f56;
	cvt.sat.f32.f32 	%f59, %f58;
	mov.f32 	%f60, 0f4B400001;
	mov.f32 	%f61, 0f437C0000;
	fma.rm.f32 	%f62, %f59, %f61, %f60;
	add.f32 	%f63, %f62, 0fCB40007F;
	neg.f32 	%f64, %f63;
	mov.f32 	%f65, 0f3FB8AA3B;
	fma.rn.f32 	%f66, %f55, %f65, %f64;
	mov.f32 	%f67, 0f32A57060;
	fma.rn.f32 	%f68, %f55, %f67, %f66;
	mov.b32 	%r134, %f62;
	shl.b32 	%r135, %r134, 23;
	mov.b32 	%f69, %r135;
	ex2.approx.ftz.f32 	%f70, %f68;
	mul.f32 	%f71, %f70, %f69;
	add.f32 	%f72, %f168, %f71;
	st.shared.f32 	[%r203+-1024], %f71;
	ld.shared.f32 	%f73, [%r203+-512];
	sub.f32 	%f74, %f73, %f9;
	fma.rn.f32 	%f75, %f74, %f57, %f56;
	cvt.sat.f32.f32 	%f76, %f75;
	fma.rm.f32 	%f77, %f76, %f61, %f60;
	add.f32 	%f78, %f77, 0fCB40007F;
	neg.f32 	%f79, %f78;
	fma.rn.f32 	%f80, %f74, %f65, %f79;
	fma.rn.f32 	%f81, %f74, %f67, %f80;
	mov.b32 	%r136, %f77;
	shl.b32 	%r137, %r136, 23;
	mov.b32 	%f82, %r137;
	ex2.approx.ftz.f32 	%f83, %f81;
	mul.f32 	%f84, %f83, %f82;
	add.f32 	%f85, %f72, %f84;
	st.shared.f32 	[%r203+-512], %f84;
	ld.shared.f32 	%f86, [%r203];
	sub.f32 	%f87, %f86, %f9;
	fma.rn.f32 	%f88, %f87, %f57, %f56;
	cvt.sat.f32.f32 	%f89, %f88;
	fma.rm.f32 	%f90, %f89, %f61, %f60;
	add.f32 	%f91, %f90, 0fCB40007F;
	neg.f32 	%f92, %f91;
	fma.rn.f32 	%f93, %f87, %f65, %f92;
	fma.rn.f32 	%f94, %f87, %f67, %f93;
	mov.b32 	%r138, %f90;
	shl.b32 	%r139, %r138, 23;
	mov.b32 	%f95, %r139;
	ex2.approx.ftz.f32 	%f96, %f94;
	mul.f32 	%f97, %f96, %f95;
	add.f32 	%f98, %f85, %f97;
	st.shared.f32 	[%r203], %f97;
	ld.shared.f32 	%f99, [%r203+512];
	sub.f32 	%f100, %f99, %f9;
	fma.rn.f32 	%f101, %f100, %f57, %f56;
	cvt.sat.f32.f32 	%f102, %f101;
	fma.rm.f32 	%f103, %f102, %f61, %f60;
	add.f32 	%f104, %f103, 0fCB40007F;
	neg.f32 	%f105, %f104;
	fma.rn.f32 	%f106, %f100, %f65, %f105;
	fma.rn.f32 	%f107, %f100, %f67, %f106;
	mov.b32 	%r140, %f103;
	shl.b32 	%r141, %r140, 23;
	mov.b32 	%f108, %r141;
	ex2.approx.ftz.f32 	%f109, %f107;
	mul.f32 	%f110, %f109, %f108;
	add.f32 	%f168, %f98, %f110;
	st.shared.f32 	[%r203+512], %f110;
	add.s32 	%r205, %r205, 512;
	add.s32 	%r203, %r203, 2048;
	add.s32 	%r202, %r202, -4;
	setp.ne.s32 	%p21, %r202, -1;
	@%p21 bra 	$L__BB27_17;

$L__BB27_18:
	setp.eq.s32 	%p22, %r207, 0;
	@%p22 bra 	$L__BB27_21;

	add.s32 	%r142, %r1, %r205;
	shl.b32 	%r143, %r142, 2;
	add.s32 	%r145, %r106, %r143;
	add.s32 	%r206, %r145, 128;

$L__BB27_20:
	.pragma "nounroll";
	ld.shared.f32 	%f111, [%r206];
	sub.f32 	%f112, %f111, %f9;
	mov.f32 	%f113, 0f3F000000;
	mov.f32 	%f114, 0f3BBB989D;
	fma.rn.f32 	%f115, %f112, %f114, %f113;
	cvt.sat.f32.f32 	%f116, %f115;
	mov.f32 	%f117, 0f4B400001;
	mov.f32 	%f118, 0f437C0000;
	fma.rm.f32 	%f119, %f116, %f118, %f117;
	add.f32 	%f120, %f119, 0fCB40007F;
	neg.f32 	%f121, %f120;
	mov.f32 	%f122, 0f3FB8AA3B;
	fma.rn.f32 	%f123, %f112, %f122, %f121;
	mov.f32 	%f124, 0f32A57060;
	fma.rn.f32 	%f125, %f112, %f124, %f123;
	mov.b32 	%r146, %f119;
	shl.b32 	%r147, %r146, 23;
	mov.b32 	%f126, %r147;
	ex2.approx.ftz.f32 	%f127, %f125;
	mul.f32 	%f128, %f127, %f126;
	add.f32 	%f168, %f168, %f128;
	st.shared.f32 	[%r206], %f128;
	add.s32 	%r206, %r206, 512;
	add.s32 	%r207, %r207, -1;
	setp.ne.s32 	%p23, %r207, 0;
	@%p23 bra 	$L__BB27_20;

$L__BB27_21:
	mov.b32 	%r148, %f168;
	shfl.sync.bfly.b32 	%r152|%p24, %r148, %r112, %r111, %r113;
	mov.b32 	%f129, %r152;
	add.f32 	%f130, %f168, %f129;
	mov.b32 	%r153, %f130;
	shfl.sync.bfly.b32 	%r155|%p25, %r153, %r116, %r111, %r113;
	mov.b32 	%f131, %r155;
	add.f32 	%f132, %f130, %f131;
	mov.b32 	%r156, %f132;
	shfl.sync.bfly.b32 	%r158|%p26, %r156, %r119, %r111, %r113;
	mov.b32 	%f133, %r158;
	add.f32 	%f134, %f132, %f133;
	mov.b32 	%r159, %f134;
	shfl.sync.bfly.b32 	%r161|%p27, %r159, %r122, %r111, %r113;
	mov.b32 	%f135, %r161;
	add.f32 	%f136, %f134, %f135;
	mov.b32 	%r162, %f136;
	shfl.sync.bfly.b32 	%r164|%p28, %r162, %r125, %r111, %r113;
	mov.b32 	%f137, %r164;
	add.f32 	%f17, %f136, %f137;
	bar.sync 	0;
	@%p12 bra 	$L__BB27_23;

	mov.u32 	%r165, 0;
	st.shared.u32 	[%r29], %r165;

$L__BB27_23:
	bar.sync 	0;
	@%p13 bra 	$L__BB27_25;

	st.shared.f32 	[%r30], %f17;

$L__BB27_25:
	bar.sync 	0;
	ld.shared.f32 	%f138, [%r29];
	mov.b32 	%r166, %f138;
	mov.u32 	%r167, 31;
	mov.u32 	%r168, 16;
	mov.u32 	%r169, -1;
	shfl.sync.bfly.b32 	%r170|%p32, %r166, %r168, %r167, %r169;
	mov.b32 	%f139, %r170;
	add.f32 	%f140, %f138, %f139;
	mov.b32 	%r171, %f140;
	mov.u32 	%r172, 8;
	shfl.sync.bfly.b32 	%r173|%p33, %r171, %r172, %r167, %r169;
	mov.b32 	%f141, %r173;
	add.f32 	%f142, %f140, %f141;
	mov.b32 	%r174, %f142;
	mov.u32 	%r175, 4;
	shfl.sync.bfly.b32 	%r176|%p34, %r174, %r175, %r167, %r169;
	mov.b32 	%f143, %r176;
	add.f32 	%f144, %f142, %f143;
	mov.b32 	%r177, %f144;
	mov.u32 	%r178, 2;
	shfl.sync.bfly.b32 	%r179|%p35, %r177, %r178, %r167, %r169;
	mov.b32 	%f145, %r179;
	add.f32 	%f146, %f144, %f145;
	mov.b32 	%r180, %f146;
	mov.u32 	%r181, 1;
	shfl.sync.bfly.b32 	%r182|%p36, %r180, %r181, %r167, %r169;
	mov.b32 	%f147, %r182;
	add.f32 	%f148, %f146, %f147;
	rcp.rn.f32 	%f18, %f148;
	@%p2 bra 	$L__BB27_32;

	add.s32 	%r184, %r63, -1;
	shr.u32 	%r47, %r184, 7;
	add.s32 	%r185, %r47, 1;
	and.b32  	%r213, %r185, 3;
	setp.lt.u32 	%p37, %r184, 384;
	mov.u32 	%r211, 0;
	@%p37 bra 	$L__BB27_29;

	mul.lo.s64 	%rd53, %rd10, %rd9;
	sub.s32 	%r209, %r47, %r213;
	shl.b32 	%r187, %r1, 2;
	add.s32 	%r189, %r106, %r187;
	add.s32 	%r208, %r189, 1152;
	cvt.s64.s32 	%rd54, %r1;
	add.s64 	%rd55, %rd53, %rd54;
	shl.b64 	%rd56, %rd55, 1;
	add.s64 	%rd64, %rd3, %rd56;
	mov.u32 	%r211, 0;

$L__BB27_28:
	.pragma "nounroll";
	ld.shared.f32 	%f153, [%r208+-1024];
	mul.f32 	%f149, %f18, %f153;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs37, %f149;}

	// end inline asm
	st.global.u16 	[%rd64], %rs37;
	ld.shared.f32 	%f154, [%r208+-512];
	mul.f32 	%f150, %f18, %f154;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs38, %f150;}

	// end inline asm
	st.global.u16 	[%rd64+256], %rs38;
	ld.shared.f32 	%f155, [%r208];
	mul.f32 	%f151, %f18, %f155;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs39, %f151;}

	// end inline asm
	st.global.u16 	[%rd64+512], %rs39;
	ld.shared.f32 	%f156, [%r208+512];
	mul.f32 	%f152, %f18, %f156;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs40, %f152;}

	// end inline asm
	st.global.u16 	[%rd64+768], %rs40;
	add.s32 	%r211, %r211, 512;
	add.s32 	%r208, %r208, 2048;
	add.s64 	%rd64, %rd64, 1024;
	add.s32 	%r209, %r209, -4;
	setp.ne.s32 	%p38, %r209, -1;
	@%p38 bra 	$L__BB27_28;

$L__BB27_29:
	setp.eq.s32 	%p39, %r213, 0;
	@%p39 bra 	$L__BB27_32;

	add.s32 	%r190, %r1, %r211;
	shl.b32 	%r191, %r190, 2;
	add.s32 	%r193, %r106, %r191;
	add.s32 	%r212, %r193, 128;
	cvt.s64.s32 	%rd57, %r190;
	mul.lo.s64 	%rd58, %rd10, %rd9;
	add.s64 	%rd59, %rd58, %rd57;
	shl.b64 	%rd60, %rd59, 1;
	add.s64 	%rd65, %rd3, %rd60;

$L__BB27_31:
	.pragma "nounroll";
	ld.shared.f32 	%f158, [%r212];
	mul.f32 	%f157, %f18, %f158;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs41, %f157;}

	// end inline asm
	st.global.u16 	[%rd65], %rs41;
	add.s32 	%r212, %r212, 512;
	add.s64 	%rd65, %rd65, 256;
	add.s32 	%r213, %r213, -1;
	setp.ne.s32 	%p40, %r213, 0;
	@%p40 bra 	$L__BB27_31;

$L__BB27_32:
	ret;

}
	// .globl	scaled_masked_softmax_256_f16
.visible .entry scaled_masked_softmax_256_f16(
	.param .u64 scaled_masked_softmax_256_f16_param_0,
	.param .u64 scaled_masked_softmax_256_f16_param_1,
	.param .align 2 .b8 scaled_masked_softmax_256_f16_param_2[2],
	.param .u64 scaled_masked_softmax_256_f16_param_3,
	.param .u32 scaled_masked_softmax_256_f16_param_4,
	.param .u32 scaled_masked_softmax_256_f16_param_5,
	.param .u32 scaled_masked_softmax_256_f16_param_6,
	.param .u32 scaled_masked_softmax_256_f16_param_7,
	.param .u32 scaled_masked_softmax_256_f16_param_8,
	.param .u32 scaled_masked_softmax_256_f16_param_9,
	.param .u32 scaled_masked_softmax_256_f16_param_10,
	.param .u32 scaled_masked_softmax_256_f16_param_11,
	.param .u32 scaled_masked_softmax_256_f16_param_12,
	.param .u32 scaled_masked_softmax_256_f16_param_13,
	.param .u32 scaled_masked_softmax_256_f16_param_14,
	.param .u32 scaled_masked_softmax_256_f16_param_15
)
{
	.reg .pred 	%p<41>;
	.reg .b16 	%rs<42>;
	.reg .f32 	%f<169>;
	.reg .b32 	%r<214>;
	.reg .b64 	%rd<66>;


	ld.param.u16 	%rs1, [scaled_masked_softmax_256_f16_param_2];
	ld.param.u64 	%rd25, [scaled_masked_softmax_256_f16_param_0];
	ld.param.u64 	%rd26, [scaled_masked_softmax_256_f16_param_1];
	ld.param.u64 	%rd27, [scaled_masked_softmax_256_f16_param_3];
	ld.param.u32 	%r63, [scaled_masked_softmax_256_f16_param_6];
	ld.param.s32 	%rd5, [scaled_masked_softmax_256_f16_param_10];
	ld.param.u32 	%r64, [scaled_masked_softmax_256_f16_param_11];
	ld.param.u32 	%r65, [scaled_masked_softmax_256_f16_param_12];
	cvta.to.global.u64 	%rd1, %rd26;
	cvta.to.global.u64 	%rd2, %rd25;
	cvta.to.global.u64 	%rd3, %rd27;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.y;
	cvt.u64.u32 	%rd4, %r2;
	and.b64  	%rd28, %rd5, -4294967296;
	setp.eq.s64 	%p1, %rd28, 0;
	@%p1 bra 	$L__BB28_2;

	rem.s64 	%rd61, %rd4, %rd5;
	bra.uni 	$L__BB28_3;

$L__BB28_2:
	cvt.u32.u64 	%r66, %rd5;
	cvt.u32.u64 	%r67, %rd4;
	rem.u32 	%r68, %r67, %r66;
	cvt.u64.u32 	%rd61, %r68;

$L__BB28_3:
	mov.u32 	%r69, %ctaid.x;
	mov.u32 	%r70, %nctaid.x;
	mov.u32 	%r71, %ctaid.z;
	mov.u32 	%r72, %nctaid.y;
	mad.lo.s32 	%r73, %r72, %r71, %r2;
	mad.lo.s32 	%r74, %r73, %r70, %r69;
	cvt.s64.s32 	%rd9, %r74;
	cvt.s64.s32 	%rd10, %r63;
	cvt.s64.s32 	%rd29, %r64;
	cvt.u64.u32 	%rd30, %r69;
	mul.lo.s64 	%rd31, %rd29, %rd30;
	mul.lo.s64 	%rd32, %rd61, %rd5;
	add.s64 	%rd33, %rd32, %rd31;
	shr.u64 	%rd11, %rd33, 1;
	shr.u32 	%r3, %r1, 5;
	and.b32  	%r4, %r1, 31;
	setp.lt.s32 	%p2, %r63, 1;
	mov.f32 	%f163, 0fFF800000;
	@%p2 bra 	$L__BB28_10;

	add.s32 	%r76, %r63, -1;
	shr.u32 	%r5, %r76, 8;
	add.s32 	%r77, %r5, 1;
	and.b32  	%r201, %r77, 3;
	setp.lt.u32 	%p3, %r76, 768;
	mov.f32 	%f163, 0fFF800000;
	mov.u32 	%r198, 0;
	@%p3 bra 	$L__BB28_7;

	mul.lo.s64 	%rd34, %rd10, %rd9;
	shl.b32 	%r7, %r65, 10;
	add.s32 	%r79, %r201, -1;
	sub.s32 	%r196, %r79, %r5;
	shl.b32 	%r80, %r1, 2;
	mov.u32 	%r81, data_soft_max_f32;
	add.s32 	%r82, %r81, %r80;
	add.s32 	%r195, %r82, 2176;
	cvt.s64.s32 	%rd35, %r1;
	add.s64 	%rd36, %rd34, %rd35;
	shl.b64 	%rd37, %rd36, 1;
	add.s64 	%rd62, %rd2, %rd37;
	mul.lo.s32 	%r194, %r1, %r65;
	shl.b32 	%r83, %r65, 8;
	mul.wide.s32 	%rd13, %r83, 2;
	mov.f32 	%f163, 0fFF800000;
	mov.u32 	%r198, 0;

$L__BB28_6:
	.pragma "nounroll";
	ld.global.u16 	%rs3, [%rd62];
	// begin inline asm
	{mul.f16 %rs2,%rs3,%rs1;
}
	// end inline asm
	cvt.s64.s32 	%rd38, %r194;
	add.s64 	%rd39, %rd11, %rd38;
	shl.b64 	%rd40, %rd39, 1;
	add.s64 	%rd41, %rd1, %rd40;
	ld.global.u16 	%rs7, [%rd41];
	// begin inline asm
	{add.f16 %rs5,%rs2,%rs7;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f23, %rs5;}

	// end inline asm
	st.shared.f32 	[%r195+-2048], %f23;
	max.f32 	%f27, %f163, %f23;
	ld.global.u16 	%rs10, [%rd62+512];
	// begin inline asm
	{mul.f16 %rs9,%rs10,%rs1;
}
	// end inline asm
	add.s64 	%rd42, %rd41, %rd13;
	ld.global.u16 	%rs14, [%rd42];
	// begin inline asm
	{add.f16 %rs12,%rs9,%rs14;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f24, %rs12;}

	// end inline asm
	st.shared.f32 	[%r195+-1024], %f24;
	max.f32 	%f28, %f27, %f24;
	ld.global.u16 	%rs17, [%rd62+1024];
	// begin inline asm
	{mul.f16 %rs16,%rs17,%rs1;
}
	// end inline asm
	add.s64 	%rd43, %rd42, %rd13;
	ld.global.u16 	%rs21, [%rd43];
	// begin inline asm
	{add.f16 %rs19,%rs16,%rs21;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f25, %rs19;}

	// end inline asm
	st.shared.f32 	[%r195], %f25;
	max.f32 	%f29, %f28, %f25;
	ld.global.u16 	%rs24, [%rd62+1536];
	// begin inline asm
	{mul.f16 %rs23,%rs24,%rs1;
}
	// end inline asm
	add.s64 	%rd44, %rd43, %rd13;
	ld.global.u16 	%rs28, [%rd44];
	// begin inline asm
	{add.f16 %rs26,%rs23,%rs28;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f26, %rs26;}

	// end inline asm
	st.shared.f32 	[%r195+1024], %f26;
	max.f32 	%f163, %f29, %f26;
	add.s32 	%r198, %r198, 1024;
	add.s32 	%r195, %r195, 4096;
	add.s64 	%rd62, %rd62, 2048;
	add.s32 	%r194, %r194, %r7;
	add.s32 	%r196, %r196, 4;
	setp.ne.s32 	%p4, %r196, 0;
	@%p4 bra 	$L__BB28_6;

$L__BB28_7:
	setp.eq.s32 	%p5, %r201, 0;
	@%p5 bra 	$L__BB28_10;

	add.s32 	%r84, %r1, %r198;
	shl.b32 	%r85, %r84, 2;
	mov.u32 	%r86, data_soft_max_f32;
	add.s32 	%r87, %r86, %r85;
	add.s32 	%r200, %r87, 128;
	mul.lo.s32 	%r199, %r65, %r84;
	shl.b32 	%r22, %r65, 8;
	cvt.s64.s32 	%rd45, %r84;
	mul.lo.s64 	%rd46, %rd10, %rd9;
	add.s64 	%rd47, %rd46, %rd45;
	shl.b64 	%rd48, %rd47, 1;
	add.s64 	%rd63, %rd2, %rd48;

$L__BB28_9:
	.pragma "nounroll";
	ld.global.u16 	%rs31, [%rd63];
	// begin inline asm
	{mul.f16 %rs30,%rs31,%rs1;
}
	// end inline asm
	cvt.s64.s32 	%rd49, %r199;
	add.s64 	%rd50, %rd11, %rd49;
	shl.b64 	%rd51, %rd50, 1;
	add.s64 	%rd52, %rd1, %rd51;
	ld.global.u16 	%rs35, [%rd52];
	// begin inline asm
	{add.f16 %rs33,%rs30,%rs35;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f30, %rs33;}

	// end inline asm
	st.shared.f32 	[%r200], %f30;
	max.f32 	%f163, %f163, %f30;
	add.s32 	%r200, %r200, 1024;
	add.s32 	%r199, %r199, %r22;
	add.s64 	%rd63, %rd63, 512;
	add.s32 	%r201, %r201, -1;
	setp.ne.s32 	%p6, %r201, 0;
	@%p6 bra 	$L__BB28_9;

$L__BB28_10:
	mov.b32 	%r88, %f163;
	mov.u32 	%r89, 31;
	mov.u32 	%r90, 16;
	mov.u32 	%r91, -1;
	shfl.sync.bfly.b32 	%r92|%p7, %r88, %r90, %r89, %r91;
	mov.b32 	%f31, %r92;
	max.f32 	%f32, %f163, %f31;
	mov.b32 	%r93, %f32;
	mov.u32 	%r94, 8;
	shfl.sync.bfly.b32 	%r95|%p8, %r93, %r94, %r89, %r91;
	mov.b32 	%f33, %r95;
	max.f32 	%f34, %f32, %f33;
	mov.b32 	%r96, %f34;
	mov.u32 	%r97, 4;
	shfl.sync.bfly.b32 	%r98|%p9, %r96, %r97, %r89, %r91;
	mov.b32 	%f35, %r98;
	max.f32 	%f36, %f34, %f35;
	mov.b32 	%r99, %f36;
	mov.u32 	%r100, 2;
	shfl.sync.bfly.b32 	%r101|%p10, %r99, %r100, %r89, %r91;
	mov.b32 	%f37, %r101;
	max.f32 	%f38, %f36, %f37;
	mov.b32 	%r102, %f38;
	mov.u32 	%r103, 1;
	shfl.sync.bfly.b32 	%r104|%p11, %r102, %r103, %r89, %r91;
	mov.b32 	%f39, %r104;
	max.f32 	%f8, %f38, %f39;
	shl.b32 	%r105, %r4, 2;
	mov.u32 	%r106, data_soft_max_f32;
	add.s32 	%r29, %r106, %r105;
	setp.ne.s32 	%p12, %r3, 0;
	@%p12 bra 	$L__BB28_12;

	mov.u32 	%r107, -8388608;
	st.shared.u32 	[%r29], %r107;

$L__BB28_12:
	bar.sync 	0;
	shl.b32 	%r108, %r3, 2;
	add.s32 	%r30, %r106, %r108;
	setp.ne.s32 	%p13, %r4, 0;
	@%p13 bra 	$L__BB28_14;

	st.shared.f32 	[%r30], %f8;

$L__BB28_14:
	bar.sync 	0;
	ld.shared.f32 	%f41, [%r29];
	mov.b32 	%r110, %f41;
	mov.u32 	%r111, 31;
	mov.u32 	%r112, 16;
	mov.u32 	%r113, -1;
	shfl.sync.bfly.b32 	%r114|%p15, %r110, %r112, %r111, %r113;
	mov.b32 	%f42, %r114;
	max.f32 	%f43, %f41, %f42;
	mov.b32 	%r115, %f43;
	mov.u32 	%r116, 8;
	shfl.sync.bfly.b32 	%r117|%p16, %r115, %r116, %r111, %r113;
	mov.b32 	%f44, %r117;
	max.f32 	%f45, %f43, %f44;
	mov.b32 	%r118, %f45;
	mov.u32 	%r119, 4;
	shfl.sync.bfly.b32 	%r120|%p17, %r118, %r119, %r111, %r113;
	mov.b32 	%f46, %r120;
	max.f32 	%f47, %f45, %f46;
	mov.b32 	%r121, %f47;
	mov.u32 	%r122, 2;
	shfl.sync.bfly.b32 	%r123|%p18, %r121, %r122, %r111, %r113;
	mov.b32 	%f48, %r123;
	max.f32 	%f49, %f47, %f48;
	mov.b32 	%r124, %f49;
	mov.u32 	%r125, 1;
	shfl.sync.bfly.b32 	%r126|%p19, %r124, %r125, %r111, %r113;
	mov.b32 	%f50, %r126;
	max.f32 	%f9, %f49, %f50;
	mov.f32 	%f168, 0f00000000;
	@%p2 bra 	$L__BB28_21;

	add.s32 	%r128, %r63, -1;
	shr.u32 	%r31, %r128, 8;
	add.s32 	%r129, %r31, 1;
	and.b32  	%r207, %r129, 3;
	setp.lt.u32 	%p20, %r128, 768;
	mov.f32 	%f168, 0f00000000;
	mov.u32 	%r205, 0;
	@%p20 bra 	$L__BB28_18;

	shl.b32 	%r131, %r1, 2;
	add.s32 	%r133, %r106, %r131;
	add.s32 	%r203, %r133, 2176;
	sub.s32 	%r202, %r31, %r207;
	mov.f32 	%f168, 0f00000000;
	mov.u32 	%r205, 0;

$L__BB28_17:
	.pragma "nounroll";
	ld.shared.f32 	%f54, [%r203+-2048];
	sub.f32 	%f55, %f54, %f9;
	mov.f32 	%f56, 0f3F000000;
	mov.f32 	%f57, 0f3BBB989D;
	fma.rn.f32 	%f58, %f55, %f57, %f56;
	cvt.sat.f32.f32 	%f59, %f58;
	mov.f32 	%f60, 0f4B400001;
	mov.f32 	%f61, 0f437C0000;
	fma.rm.f32 	%f62, %f59, %f61, %f60;
	add.f32 	%f63, %f62, 0fCB40007F;
	neg.f32 	%f64, %f63;
	mov.f32 	%f65, 0f3FB8AA3B;
	fma.rn.f32 	%f66, %f55, %f65, %f64;
	mov.f32 	%f67, 0f32A57060;
	fma.rn.f32 	%f68, %f55, %f67, %f66;
	mov.b32 	%r134, %f62;
	shl.b32 	%r135, %r134, 23;
	mov.b32 	%f69, %r135;
	ex2.approx.ftz.f32 	%f70, %f68;
	mul.f32 	%f71, %f70, %f69;
	add.f32 	%f72, %f168, %f71;
	st.shared.f32 	[%r203+-2048], %f71;
	ld.shared.f32 	%f73, [%r203+-1024];
	sub.f32 	%f74, %f73, %f9;
	fma.rn.f32 	%f75, %f74, %f57, %f56;
	cvt.sat.f32.f32 	%f76, %f75;
	fma.rm.f32 	%f77, %f76, %f61, %f60;
	add.f32 	%f78, %f77, 0fCB40007F;
	neg.f32 	%f79, %f78;
	fma.rn.f32 	%f80, %f74, %f65, %f79;
	fma.rn.f32 	%f81, %f74, %f67, %f80;
	mov.b32 	%r136, %f77;
	shl.b32 	%r137, %r136, 23;
	mov.b32 	%f82, %r137;
	ex2.approx.ftz.f32 	%f83, %f81;
	mul.f32 	%f84, %f83, %f82;
	add.f32 	%f85, %f72, %f84;
	st.shared.f32 	[%r203+-1024], %f84;
	ld.shared.f32 	%f86, [%r203];
	sub.f32 	%f87, %f86, %f9;
	fma.rn.f32 	%f88, %f87, %f57, %f56;
	cvt.sat.f32.f32 	%f89, %f88;
	fma.rm.f32 	%f90, %f89, %f61, %f60;
	add.f32 	%f91, %f90, 0fCB40007F;
	neg.f32 	%f92, %f91;
	fma.rn.f32 	%f93, %f87, %f65, %f92;
	fma.rn.f32 	%f94, %f87, %f67, %f93;
	mov.b32 	%r138, %f90;
	shl.b32 	%r139, %r138, 23;
	mov.b32 	%f95, %r139;
	ex2.approx.ftz.f32 	%f96, %f94;
	mul.f32 	%f97, %f96, %f95;
	add.f32 	%f98, %f85, %f97;
	st.shared.f32 	[%r203], %f97;
	ld.shared.f32 	%f99, [%r203+1024];
	sub.f32 	%f100, %f99, %f9;
	fma.rn.f32 	%f101, %f100, %f57, %f56;
	cvt.sat.f32.f32 	%f102, %f101;
	fma.rm.f32 	%f103, %f102, %f61, %f60;
	add.f32 	%f104, %f103, 0fCB40007F;
	neg.f32 	%f105, %f104;
	fma.rn.f32 	%f106, %f100, %f65, %f105;
	fma.rn.f32 	%f107, %f100, %f67, %f106;
	mov.b32 	%r140, %f103;
	shl.b32 	%r141, %r140, 23;
	mov.b32 	%f108, %r141;
	ex2.approx.ftz.f32 	%f109, %f107;
	mul.f32 	%f110, %f109, %f108;
	add.f32 	%f168, %f98, %f110;
	st.shared.f32 	[%r203+1024], %f110;
	add.s32 	%r205, %r205, 1024;
	add.s32 	%r203, %r203, 4096;
	add.s32 	%r202, %r202, -4;
	setp.ne.s32 	%p21, %r202, -1;
	@%p21 bra 	$L__BB28_17;

$L__BB28_18:
	setp.eq.s32 	%p22, %r207, 0;
	@%p22 bra 	$L__BB28_21;

	add.s32 	%r142, %r1, %r205;
	shl.b32 	%r143, %r142, 2;
	add.s32 	%r145, %r106, %r143;
	add.s32 	%r206, %r145, 128;

$L__BB28_20:
	.pragma "nounroll";
	ld.shared.f32 	%f111, [%r206];
	sub.f32 	%f112, %f111, %f9;
	mov.f32 	%f113, 0f3F000000;
	mov.f32 	%f114, 0f3BBB989D;
	fma.rn.f32 	%f115, %f112, %f114, %f113;
	cvt.sat.f32.f32 	%f116, %f115;
	mov.f32 	%f117, 0f4B400001;
	mov.f32 	%f118, 0f437C0000;
	fma.rm.f32 	%f119, %f116, %f118, %f117;
	add.f32 	%f120, %f119, 0fCB40007F;
	neg.f32 	%f121, %f120;
	mov.f32 	%f122, 0f3FB8AA3B;
	fma.rn.f32 	%f123, %f112, %f122, %f121;
	mov.f32 	%f124, 0f32A57060;
	fma.rn.f32 	%f125, %f112, %f124, %f123;
	mov.b32 	%r146, %f119;
	shl.b32 	%r147, %r146, 23;
	mov.b32 	%f126, %r147;
	ex2.approx.ftz.f32 	%f127, %f125;
	mul.f32 	%f128, %f127, %f126;
	add.f32 	%f168, %f168, %f128;
	st.shared.f32 	[%r206], %f128;
	add.s32 	%r206, %r206, 1024;
	add.s32 	%r207, %r207, -1;
	setp.ne.s32 	%p23, %r207, 0;
	@%p23 bra 	$L__BB28_20;

$L__BB28_21:
	mov.b32 	%r148, %f168;
	shfl.sync.bfly.b32 	%r152|%p24, %r148, %r112, %r111, %r113;
	mov.b32 	%f129, %r152;
	add.f32 	%f130, %f168, %f129;
	mov.b32 	%r153, %f130;
	shfl.sync.bfly.b32 	%r155|%p25, %r153, %r116, %r111, %r113;
	mov.b32 	%f131, %r155;
	add.f32 	%f132, %f130, %f131;
	mov.b32 	%r156, %f132;
	shfl.sync.bfly.b32 	%r158|%p26, %r156, %r119, %r111, %r113;
	mov.b32 	%f133, %r158;
	add.f32 	%f134, %f132, %f133;
	mov.b32 	%r159, %f134;
	shfl.sync.bfly.b32 	%r161|%p27, %r159, %r122, %r111, %r113;
	mov.b32 	%f135, %r161;
	add.f32 	%f136, %f134, %f135;
	mov.b32 	%r162, %f136;
	shfl.sync.bfly.b32 	%r164|%p28, %r162, %r125, %r111, %r113;
	mov.b32 	%f137, %r164;
	add.f32 	%f17, %f136, %f137;
	bar.sync 	0;
	@%p12 bra 	$L__BB28_23;

	mov.u32 	%r165, 0;
	st.shared.u32 	[%r29], %r165;

$L__BB28_23:
	bar.sync 	0;
	@%p13 bra 	$L__BB28_25;

	st.shared.f32 	[%r30], %f17;

$L__BB28_25:
	bar.sync 	0;
	ld.shared.f32 	%f138, [%r29];
	mov.b32 	%r166, %f138;
	mov.u32 	%r167, 31;
	mov.u32 	%r168, 16;
	mov.u32 	%r169, -1;
	shfl.sync.bfly.b32 	%r170|%p32, %r166, %r168, %r167, %r169;
	mov.b32 	%f139, %r170;
	add.f32 	%f140, %f138, %f139;
	mov.b32 	%r171, %f140;
	mov.u32 	%r172, 8;
	shfl.sync.bfly.b32 	%r173|%p33, %r171, %r172, %r167, %r169;
	mov.b32 	%f141, %r173;
	add.f32 	%f142, %f140, %f141;
	mov.b32 	%r174, %f142;
	mov.u32 	%r175, 4;
	shfl.sync.bfly.b32 	%r176|%p34, %r174, %r175, %r167, %r169;
	mov.b32 	%f143, %r176;
	add.f32 	%f144, %f142, %f143;
	mov.b32 	%r177, %f144;
	mov.u32 	%r178, 2;
	shfl.sync.bfly.b32 	%r179|%p35, %r177, %r178, %r167, %r169;
	mov.b32 	%f145, %r179;
	add.f32 	%f146, %f144, %f145;
	mov.b32 	%r180, %f146;
	mov.u32 	%r181, 1;
	shfl.sync.bfly.b32 	%r182|%p36, %r180, %r181, %r167, %r169;
	mov.b32 	%f147, %r182;
	add.f32 	%f148, %f146, %f147;
	rcp.rn.f32 	%f18, %f148;
	@%p2 bra 	$L__BB28_32;

	add.s32 	%r184, %r63, -1;
	shr.u32 	%r47, %r184, 8;
	add.s32 	%r185, %r47, 1;
	and.b32  	%r213, %r185, 3;
	setp.lt.u32 	%p37, %r184, 768;
	mov.u32 	%r211, 0;
	@%p37 bra 	$L__BB28_29;

	mul.lo.s64 	%rd53, %rd10, %rd9;
	sub.s32 	%r209, %r47, %r213;
	shl.b32 	%r187, %r1, 2;
	add.s32 	%r189, %r106, %r187;
	add.s32 	%r208, %r189, 2176;
	cvt.s64.s32 	%rd54, %r1;
	add.s64 	%rd55, %rd53, %rd54;
	shl.b64 	%rd56, %rd55, 1;
	add.s64 	%rd64, %rd3, %rd56;
	mov.u32 	%r211, 0;

$L__BB28_28:
	.pragma "nounroll";
	ld.shared.f32 	%f153, [%r208+-2048];
	mul.f32 	%f149, %f18, %f153;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs37, %f149;}

	// end inline asm
	st.global.u16 	[%rd64], %rs37;
	ld.shared.f32 	%f154, [%r208+-1024];
	mul.f32 	%f150, %f18, %f154;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs38, %f150;}

	// end inline asm
	st.global.u16 	[%rd64+512], %rs38;
	ld.shared.f32 	%f155, [%r208];
	mul.f32 	%f151, %f18, %f155;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs39, %f151;}

	// end inline asm
	st.global.u16 	[%rd64+1024], %rs39;
	ld.shared.f32 	%f156, [%r208+1024];
	mul.f32 	%f152, %f18, %f156;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs40, %f152;}

	// end inline asm
	st.global.u16 	[%rd64+1536], %rs40;
	add.s32 	%r211, %r211, 1024;
	add.s32 	%r208, %r208, 4096;
	add.s64 	%rd64, %rd64, 2048;
	add.s32 	%r209, %r209, -4;
	setp.ne.s32 	%p38, %r209, -1;
	@%p38 bra 	$L__BB28_28;

$L__BB28_29:
	setp.eq.s32 	%p39, %r213, 0;
	@%p39 bra 	$L__BB28_32;

	add.s32 	%r190, %r1, %r211;
	shl.b32 	%r191, %r190, 2;
	add.s32 	%r193, %r106, %r191;
	add.s32 	%r212, %r193, 128;
	cvt.s64.s32 	%rd57, %r190;
	mul.lo.s64 	%rd58, %rd10, %rd9;
	add.s64 	%rd59, %rd58, %rd57;
	shl.b64 	%rd60, %rd59, 1;
	add.s64 	%rd65, %rd3, %rd60;

$L__BB28_31:
	.pragma "nounroll";
	ld.shared.f32 	%f158, [%r212];
	mul.f32 	%f157, %f18, %f158;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs41, %f157;}

	// end inline asm
	st.global.u16 	[%rd65], %rs41;
	add.s32 	%r212, %r212, 1024;
	add.s64 	%rd65, %rd65, 512;
	add.s32 	%r213, %r213, -1;
	setp.ne.s32 	%p40, %r213, 0;
	@%p40 bra 	$L__BB28_31;

$L__BB28_32:
	ret;

}
	// .globl	scaled_masked_softmax_512_f16
.visible .entry scaled_masked_softmax_512_f16(
	.param .u64 scaled_masked_softmax_512_f16_param_0,
	.param .u64 scaled_masked_softmax_512_f16_param_1,
	.param .align 2 .b8 scaled_masked_softmax_512_f16_param_2[2],
	.param .u64 scaled_masked_softmax_512_f16_param_3,
	.param .u32 scaled_masked_softmax_512_f16_param_4,
	.param .u32 scaled_masked_softmax_512_f16_param_5,
	.param .u32 scaled_masked_softmax_512_f16_param_6,
	.param .u32 scaled_masked_softmax_512_f16_param_7,
	.param .u32 scaled_masked_softmax_512_f16_param_8,
	.param .u32 scaled_masked_softmax_512_f16_param_9,
	.param .u32 scaled_masked_softmax_512_f16_param_10,
	.param .u32 scaled_masked_softmax_512_f16_param_11,
	.param .u32 scaled_masked_softmax_512_f16_param_12,
	.param .u32 scaled_masked_softmax_512_f16_param_13,
	.param .u32 scaled_masked_softmax_512_f16_param_14,
	.param .u32 scaled_masked_softmax_512_f16_param_15
)
{
	.reg .pred 	%p<41>;
	.reg .b16 	%rs<42>;
	.reg .f32 	%f<169>;
	.reg .b32 	%r<214>;
	.reg .b64 	%rd<66>;


	ld.param.u16 	%rs1, [scaled_masked_softmax_512_f16_param_2];
	ld.param.u64 	%rd25, [scaled_masked_softmax_512_f16_param_0];
	ld.param.u64 	%rd26, [scaled_masked_softmax_512_f16_param_1];
	ld.param.u64 	%rd27, [scaled_masked_softmax_512_f16_param_3];
	ld.param.u32 	%r63, [scaled_masked_softmax_512_f16_param_6];
	ld.param.s32 	%rd5, [scaled_masked_softmax_512_f16_param_10];
	ld.param.u32 	%r64, [scaled_masked_softmax_512_f16_param_11];
	ld.param.u32 	%r65, [scaled_masked_softmax_512_f16_param_12];
	cvta.to.global.u64 	%rd1, %rd26;
	cvta.to.global.u64 	%rd2, %rd25;
	cvta.to.global.u64 	%rd3, %rd27;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.y;
	cvt.u64.u32 	%rd4, %r2;
	and.b64  	%rd28, %rd5, -4294967296;
	setp.eq.s64 	%p1, %rd28, 0;
	@%p1 bra 	$L__BB29_2;

	rem.s64 	%rd61, %rd4, %rd5;
	bra.uni 	$L__BB29_3;

$L__BB29_2:
	cvt.u32.u64 	%r66, %rd5;
	cvt.u32.u64 	%r67, %rd4;
	rem.u32 	%r68, %r67, %r66;
	cvt.u64.u32 	%rd61, %r68;

$L__BB29_3:
	mov.u32 	%r69, %ctaid.x;
	mov.u32 	%r70, %nctaid.x;
	mov.u32 	%r71, %ctaid.z;
	mov.u32 	%r72, %nctaid.y;
	mad.lo.s32 	%r73, %r72, %r71, %r2;
	mad.lo.s32 	%r74, %r73, %r70, %r69;
	cvt.s64.s32 	%rd9, %r74;
	cvt.s64.s32 	%rd10, %r63;
	cvt.s64.s32 	%rd29, %r64;
	cvt.u64.u32 	%rd30, %r69;
	mul.lo.s64 	%rd31, %rd29, %rd30;
	mul.lo.s64 	%rd32, %rd61, %rd5;
	add.s64 	%rd33, %rd32, %rd31;
	shr.u64 	%rd11, %rd33, 1;
	shr.u32 	%r3, %r1, 5;
	and.b32  	%r4, %r1, 31;
	setp.lt.s32 	%p2, %r63, 1;
	mov.f32 	%f163, 0fFF800000;
	@%p2 bra 	$L__BB29_10;

	add.s32 	%r76, %r63, -1;
	shr.u32 	%r5, %r76, 9;
	add.s32 	%r77, %r5, 1;
	and.b32  	%r201, %r77, 3;
	setp.lt.u32 	%p3, %r76, 1536;
	mov.f32 	%f163, 0fFF800000;
	mov.u32 	%r198, 0;
	@%p3 bra 	$L__BB29_7;

	mul.lo.s64 	%rd34, %rd10, %rd9;
	shl.b32 	%r7, %r65, 11;
	add.s32 	%r79, %r201, -1;
	sub.s32 	%r196, %r79, %r5;
	shl.b32 	%r80, %r1, 2;
	mov.u32 	%r81, data_soft_max_f32;
	add.s32 	%r82, %r81, %r80;
	add.s32 	%r195, %r82, 4224;
	cvt.s64.s32 	%rd35, %r1;
	add.s64 	%rd36, %rd34, %rd35;
	shl.b64 	%rd37, %rd36, 1;
	add.s64 	%rd62, %rd2, %rd37;
	mul.lo.s32 	%r194, %r1, %r65;
	shl.b32 	%r83, %r65, 9;
	mul.wide.s32 	%rd13, %r83, 2;
	mov.f32 	%f163, 0fFF800000;
	mov.u32 	%r198, 0;

$L__BB29_6:
	.pragma "nounroll";
	ld.global.u16 	%rs3, [%rd62];
	// begin inline asm
	{mul.f16 %rs2,%rs3,%rs1;
}
	// end inline asm
	cvt.s64.s32 	%rd38, %r194;
	add.s64 	%rd39, %rd11, %rd38;
	shl.b64 	%rd40, %rd39, 1;
	add.s64 	%rd41, %rd1, %rd40;
	ld.global.u16 	%rs7, [%rd41];
	// begin inline asm
	{add.f16 %rs5,%rs2,%rs7;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f23, %rs5;}

	// end inline asm
	st.shared.f32 	[%r195+-4096], %f23;
	max.f32 	%f27, %f163, %f23;
	ld.global.u16 	%rs10, [%rd62+1024];
	// begin inline asm
	{mul.f16 %rs9,%rs10,%rs1;
}
	// end inline asm
	add.s64 	%rd42, %rd41, %rd13;
	ld.global.u16 	%rs14, [%rd42];
	// begin inline asm
	{add.f16 %rs12,%rs9,%rs14;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f24, %rs12;}

	// end inline asm
	st.shared.f32 	[%r195+-2048], %f24;
	max.f32 	%f28, %f27, %f24;
	ld.global.u16 	%rs17, [%rd62+2048];
	// begin inline asm
	{mul.f16 %rs16,%rs17,%rs1;
}
	// end inline asm
	add.s64 	%rd43, %rd42, %rd13;
	ld.global.u16 	%rs21, [%rd43];
	// begin inline asm
	{add.f16 %rs19,%rs16,%rs21;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f25, %rs19;}

	// end inline asm
	st.shared.f32 	[%r195], %f25;
	max.f32 	%f29, %f28, %f25;
	ld.global.u16 	%rs24, [%rd62+3072];
	// begin inline asm
	{mul.f16 %rs23,%rs24,%rs1;
}
	// end inline asm
	add.s64 	%rd44, %rd43, %rd13;
	ld.global.u16 	%rs28, [%rd44];
	// begin inline asm
	{add.f16 %rs26,%rs23,%rs28;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f26, %rs26;}

	// end inline asm
	st.shared.f32 	[%r195+2048], %f26;
	max.f32 	%f163, %f29, %f26;
	add.s32 	%r198, %r198, 2048;
	add.s32 	%r195, %r195, 8192;
	add.s64 	%rd62, %rd62, 4096;
	add.s32 	%r194, %r194, %r7;
	add.s32 	%r196, %r196, 4;
	setp.ne.s32 	%p4, %r196, 0;
	@%p4 bra 	$L__BB29_6;

$L__BB29_7:
	setp.eq.s32 	%p5, %r201, 0;
	@%p5 bra 	$L__BB29_10;

	add.s32 	%r84, %r1, %r198;
	shl.b32 	%r85, %r84, 2;
	mov.u32 	%r86, data_soft_max_f32;
	add.s32 	%r87, %r86, %r85;
	add.s32 	%r200, %r87, 128;
	mul.lo.s32 	%r199, %r65, %r84;
	shl.b32 	%r22, %r65, 9;
	cvt.s64.s32 	%rd45, %r84;
	mul.lo.s64 	%rd46, %rd10, %rd9;
	add.s64 	%rd47, %rd46, %rd45;
	shl.b64 	%rd48, %rd47, 1;
	add.s64 	%rd63, %rd2, %rd48;

$L__BB29_9:
	.pragma "nounroll";
	ld.global.u16 	%rs31, [%rd63];
	// begin inline asm
	{mul.f16 %rs30,%rs31,%rs1;
}
	// end inline asm
	cvt.s64.s32 	%rd49, %r199;
	add.s64 	%rd50, %rd11, %rd49;
	shl.b64 	%rd51, %rd50, 1;
	add.s64 	%rd52, %rd1, %rd51;
	ld.global.u16 	%rs35, [%rd52];
	// begin inline asm
	{add.f16 %rs33,%rs30,%rs35;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f30, %rs33;}

	// end inline asm
	st.shared.f32 	[%r200], %f30;
	max.f32 	%f163, %f163, %f30;
	add.s32 	%r200, %r200, 2048;
	add.s32 	%r199, %r199, %r22;
	add.s64 	%rd63, %rd63, 1024;
	add.s32 	%r201, %r201, -1;
	setp.ne.s32 	%p6, %r201, 0;
	@%p6 bra 	$L__BB29_9;

$L__BB29_10:
	mov.b32 	%r88, %f163;
	mov.u32 	%r89, 31;
	mov.u32 	%r90, 16;
	mov.u32 	%r91, -1;
	shfl.sync.bfly.b32 	%r92|%p7, %r88, %r90, %r89, %r91;
	mov.b32 	%f31, %r92;
	max.f32 	%f32, %f163, %f31;
	mov.b32 	%r93, %f32;
	mov.u32 	%r94, 8;
	shfl.sync.bfly.b32 	%r95|%p8, %r93, %r94, %r89, %r91;
	mov.b32 	%f33, %r95;
	max.f32 	%f34, %f32, %f33;
	mov.b32 	%r96, %f34;
	mov.u32 	%r97, 4;
	shfl.sync.bfly.b32 	%r98|%p9, %r96, %r97, %r89, %r91;
	mov.b32 	%f35, %r98;
	max.f32 	%f36, %f34, %f35;
	mov.b32 	%r99, %f36;
	mov.u32 	%r100, 2;
	shfl.sync.bfly.b32 	%r101|%p10, %r99, %r100, %r89, %r91;
	mov.b32 	%f37, %r101;
	max.f32 	%f38, %f36, %f37;
	mov.b32 	%r102, %f38;
	mov.u32 	%r103, 1;
	shfl.sync.bfly.b32 	%r104|%p11, %r102, %r103, %r89, %r91;
	mov.b32 	%f39, %r104;
	max.f32 	%f8, %f38, %f39;
	shl.b32 	%r105, %r4, 2;
	mov.u32 	%r106, data_soft_max_f32;
	add.s32 	%r29, %r106, %r105;
	setp.ne.s32 	%p12, %r3, 0;
	@%p12 bra 	$L__BB29_12;

	mov.u32 	%r107, -8388608;
	st.shared.u32 	[%r29], %r107;

$L__BB29_12:
	bar.sync 	0;
	shl.b32 	%r108, %r3, 2;
	add.s32 	%r30, %r106, %r108;
	setp.ne.s32 	%p13, %r4, 0;
	@%p13 bra 	$L__BB29_14;

	st.shared.f32 	[%r30], %f8;

$L__BB29_14:
	bar.sync 	0;
	ld.shared.f32 	%f41, [%r29];
	mov.b32 	%r110, %f41;
	mov.u32 	%r111, 31;
	mov.u32 	%r112, 16;
	mov.u32 	%r113, -1;
	shfl.sync.bfly.b32 	%r114|%p15, %r110, %r112, %r111, %r113;
	mov.b32 	%f42, %r114;
	max.f32 	%f43, %f41, %f42;
	mov.b32 	%r115, %f43;
	mov.u32 	%r116, 8;
	shfl.sync.bfly.b32 	%r117|%p16, %r115, %r116, %r111, %r113;
	mov.b32 	%f44, %r117;
	max.f32 	%f45, %f43, %f44;
	mov.b32 	%r118, %f45;
	mov.u32 	%r119, 4;
	shfl.sync.bfly.b32 	%r120|%p17, %r118, %r119, %r111, %r113;
	mov.b32 	%f46, %r120;
	max.f32 	%f47, %f45, %f46;
	mov.b32 	%r121, %f47;
	mov.u32 	%r122, 2;
	shfl.sync.bfly.b32 	%r123|%p18, %r121, %r122, %r111, %r113;
	mov.b32 	%f48, %r123;
	max.f32 	%f49, %f47, %f48;
	mov.b32 	%r124, %f49;
	mov.u32 	%r125, 1;
	shfl.sync.bfly.b32 	%r126|%p19, %r124, %r125, %r111, %r113;
	mov.b32 	%f50, %r126;
	max.f32 	%f9, %f49, %f50;
	mov.f32 	%f168, 0f00000000;
	@%p2 bra 	$L__BB29_21;

	add.s32 	%r128, %r63, -1;
	shr.u32 	%r31, %r128, 9;
	add.s32 	%r129, %r31, 1;
	and.b32  	%r207, %r129, 3;
	setp.lt.u32 	%p20, %r128, 1536;
	mov.f32 	%f168, 0f00000000;
	mov.u32 	%r205, 0;
	@%p20 bra 	$L__BB29_18;

	shl.b32 	%r131, %r1, 2;
	add.s32 	%r133, %r106, %r131;
	add.s32 	%r203, %r133, 4224;
	sub.s32 	%r202, %r31, %r207;
	mov.f32 	%f168, 0f00000000;
	mov.u32 	%r205, 0;

$L__BB29_17:
	.pragma "nounroll";
	ld.shared.f32 	%f54, [%r203+-4096];
	sub.f32 	%f55, %f54, %f9;
	mov.f32 	%f56, 0f3F000000;
	mov.f32 	%f57, 0f3BBB989D;
	fma.rn.f32 	%f58, %f55, %f57, %f56;
	cvt.sat.f32.f32 	%f59, %f58;
	mov.f32 	%f60, 0f4B400001;
	mov.f32 	%f61, 0f437C0000;
	fma.rm.f32 	%f62, %f59, %f61, %f60;
	add.f32 	%f63, %f62, 0fCB40007F;
	neg.f32 	%f64, %f63;
	mov.f32 	%f65, 0f3FB8AA3B;
	fma.rn.f32 	%f66, %f55, %f65, %f64;
	mov.f32 	%f67, 0f32A57060;
	fma.rn.f32 	%f68, %f55, %f67, %f66;
	mov.b32 	%r134, %f62;
	shl.b32 	%r135, %r134, 23;
	mov.b32 	%f69, %r135;
	ex2.approx.ftz.f32 	%f70, %f68;
	mul.f32 	%f71, %f70, %f69;
	add.f32 	%f72, %f168, %f71;
	st.shared.f32 	[%r203+-4096], %f71;
	ld.shared.f32 	%f73, [%r203+-2048];
	sub.f32 	%f74, %f73, %f9;
	fma.rn.f32 	%f75, %f74, %f57, %f56;
	cvt.sat.f32.f32 	%f76, %f75;
	fma.rm.f32 	%f77, %f76, %f61, %f60;
	add.f32 	%f78, %f77, 0fCB40007F;
	neg.f32 	%f79, %f78;
	fma.rn.f32 	%f80, %f74, %f65, %f79;
	fma.rn.f32 	%f81, %f74, %f67, %f80;
	mov.b32 	%r136, %f77;
	shl.b32 	%r137, %r136, 23;
	mov.b32 	%f82, %r137;
	ex2.approx.ftz.f32 	%f83, %f81;
	mul.f32 	%f84, %f83, %f82;
	add.f32 	%f85, %f72, %f84;
	st.shared.f32 	[%r203+-2048], %f84;
	ld.shared.f32 	%f86, [%r203];
	sub.f32 	%f87, %f86, %f9;
	fma.rn.f32 	%f88, %f87, %f57, %f56;
	cvt.sat.f32.f32 	%f89, %f88;
	fma.rm.f32 	%f90, %f89, %f61, %f60;
	add.f32 	%f91, %f90, 0fCB40007F;
	neg.f32 	%f92, %f91;
	fma.rn.f32 	%f93, %f87, %f65, %f92;
	fma.rn.f32 	%f94, %f87, %f67, %f93;
	mov.b32 	%r138, %f90;
	shl.b32 	%r139, %r138, 23;
	mov.b32 	%f95, %r139;
	ex2.approx.ftz.f32 	%f96, %f94;
	mul.f32 	%f97, %f96, %f95;
	add.f32 	%f98, %f85, %f97;
	st.shared.f32 	[%r203], %f97;
	ld.shared.f32 	%f99, [%r203+2048];
	sub.f32 	%f100, %f99, %f9;
	fma.rn.f32 	%f101, %f100, %f57, %f56;
	cvt.sat.f32.f32 	%f102, %f101;
	fma.rm.f32 	%f103, %f102, %f61, %f60;
	add.f32 	%f104, %f103, 0fCB40007F;
	neg.f32 	%f105, %f104;
	fma.rn.f32 	%f106, %f100, %f65, %f105;
	fma.rn.f32 	%f107, %f100, %f67, %f106;
	mov.b32 	%r140, %f103;
	shl.b32 	%r141, %r140, 23;
	mov.b32 	%f108, %r141;
	ex2.approx.ftz.f32 	%f109, %f107;
	mul.f32 	%f110, %f109, %f108;
	add.f32 	%f168, %f98, %f110;
	st.shared.f32 	[%r203+2048], %f110;
	add.s32 	%r205, %r205, 2048;
	add.s32 	%r203, %r203, 8192;
	add.s32 	%r202, %r202, -4;
	setp.ne.s32 	%p21, %r202, -1;
	@%p21 bra 	$L__BB29_17;

$L__BB29_18:
	setp.eq.s32 	%p22, %r207, 0;
	@%p22 bra 	$L__BB29_21;

	add.s32 	%r142, %r1, %r205;
	shl.b32 	%r143, %r142, 2;
	add.s32 	%r145, %r106, %r143;
	add.s32 	%r206, %r145, 128;

$L__BB29_20:
	.pragma "nounroll";
	ld.shared.f32 	%f111, [%r206];
	sub.f32 	%f112, %f111, %f9;
	mov.f32 	%f113, 0f3F000000;
	mov.f32 	%f114, 0f3BBB989D;
	fma.rn.f32 	%f115, %f112, %f114, %f113;
	cvt.sat.f32.f32 	%f116, %f115;
	mov.f32 	%f117, 0f4B400001;
	mov.f32 	%f118, 0f437C0000;
	fma.rm.f32 	%f119, %f116, %f118, %f117;
	add.f32 	%f120, %f119, 0fCB40007F;
	neg.f32 	%f121, %f120;
	mov.f32 	%f122, 0f3FB8AA3B;
	fma.rn.f32 	%f123, %f112, %f122, %f121;
	mov.f32 	%f124, 0f32A57060;
	fma.rn.f32 	%f125, %f112, %f124, %f123;
	mov.b32 	%r146, %f119;
	shl.b32 	%r147, %r146, 23;
	mov.b32 	%f126, %r147;
	ex2.approx.ftz.f32 	%f127, %f125;
	mul.f32 	%f128, %f127, %f126;
	add.f32 	%f168, %f168, %f128;
	st.shared.f32 	[%r206], %f128;
	add.s32 	%r206, %r206, 2048;
	add.s32 	%r207, %r207, -1;
	setp.ne.s32 	%p23, %r207, 0;
	@%p23 bra 	$L__BB29_20;

$L__BB29_21:
	mov.b32 	%r148, %f168;
	shfl.sync.bfly.b32 	%r152|%p24, %r148, %r112, %r111, %r113;
	mov.b32 	%f129, %r152;
	add.f32 	%f130, %f168, %f129;
	mov.b32 	%r153, %f130;
	shfl.sync.bfly.b32 	%r155|%p25, %r153, %r116, %r111, %r113;
	mov.b32 	%f131, %r155;
	add.f32 	%f132, %f130, %f131;
	mov.b32 	%r156, %f132;
	shfl.sync.bfly.b32 	%r158|%p26, %r156, %r119, %r111, %r113;
	mov.b32 	%f133, %r158;
	add.f32 	%f134, %f132, %f133;
	mov.b32 	%r159, %f134;
	shfl.sync.bfly.b32 	%r161|%p27, %r159, %r122, %r111, %r113;
	mov.b32 	%f135, %r161;
	add.f32 	%f136, %f134, %f135;
	mov.b32 	%r162, %f136;
	shfl.sync.bfly.b32 	%r164|%p28, %r162, %r125, %r111, %r113;
	mov.b32 	%f137, %r164;
	add.f32 	%f17, %f136, %f137;
	bar.sync 	0;
	@%p12 bra 	$L__BB29_23;

	mov.u32 	%r165, 0;
	st.shared.u32 	[%r29], %r165;

$L__BB29_23:
	bar.sync 	0;
	@%p13 bra 	$L__BB29_25;

	st.shared.f32 	[%r30], %f17;

$L__BB29_25:
	bar.sync 	0;
	ld.shared.f32 	%f138, [%r29];
	mov.b32 	%r166, %f138;
	mov.u32 	%r167, 31;
	mov.u32 	%r168, 16;
	mov.u32 	%r169, -1;
	shfl.sync.bfly.b32 	%r170|%p32, %r166, %r168, %r167, %r169;
	mov.b32 	%f139, %r170;
	add.f32 	%f140, %f138, %f139;
	mov.b32 	%r171, %f140;
	mov.u32 	%r172, 8;
	shfl.sync.bfly.b32 	%r173|%p33, %r171, %r172, %r167, %r169;
	mov.b32 	%f141, %r173;
	add.f32 	%f142, %f140, %f141;
	mov.b32 	%r174, %f142;
	mov.u32 	%r175, 4;
	shfl.sync.bfly.b32 	%r176|%p34, %r174, %r175, %r167, %r169;
	mov.b32 	%f143, %r176;
	add.f32 	%f144, %f142, %f143;
	mov.b32 	%r177, %f144;
	mov.u32 	%r178, 2;
	shfl.sync.bfly.b32 	%r179|%p35, %r177, %r178, %r167, %r169;
	mov.b32 	%f145, %r179;
	add.f32 	%f146, %f144, %f145;
	mov.b32 	%r180, %f146;
	mov.u32 	%r181, 1;
	shfl.sync.bfly.b32 	%r182|%p36, %r180, %r181, %r167, %r169;
	mov.b32 	%f147, %r182;
	add.f32 	%f148, %f146, %f147;
	rcp.rn.f32 	%f18, %f148;
	@%p2 bra 	$L__BB29_32;

	add.s32 	%r184, %r63, -1;
	shr.u32 	%r47, %r184, 9;
	add.s32 	%r185, %r47, 1;
	and.b32  	%r213, %r185, 3;
	setp.lt.u32 	%p37, %r184, 1536;
	mov.u32 	%r211, 0;
	@%p37 bra 	$L__BB29_29;

	mul.lo.s64 	%rd53, %rd10, %rd9;
	sub.s32 	%r209, %r47, %r213;
	shl.b32 	%r187, %r1, 2;
	add.s32 	%r189, %r106, %r187;
	add.s32 	%r208, %r189, 4224;
	cvt.s64.s32 	%rd54, %r1;
	add.s64 	%rd55, %rd53, %rd54;
	shl.b64 	%rd56, %rd55, 1;
	add.s64 	%rd64, %rd3, %rd56;
	mov.u32 	%r211, 0;

$L__BB29_28:
	.pragma "nounroll";
	ld.shared.f32 	%f153, [%r208+-4096];
	mul.f32 	%f149, %f18, %f153;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs37, %f149;}

	// end inline asm
	st.global.u16 	[%rd64], %rs37;
	ld.shared.f32 	%f154, [%r208+-2048];
	mul.f32 	%f150, %f18, %f154;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs38, %f150;}

	// end inline asm
	st.global.u16 	[%rd64+1024], %rs38;
	ld.shared.f32 	%f155, [%r208];
	mul.f32 	%f151, %f18, %f155;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs39, %f151;}

	// end inline asm
	st.global.u16 	[%rd64+2048], %rs39;
	ld.shared.f32 	%f156, [%r208+2048];
	mul.f32 	%f152, %f18, %f156;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs40, %f152;}

	// end inline asm
	st.global.u16 	[%rd64+3072], %rs40;
	add.s32 	%r211, %r211, 2048;
	add.s32 	%r208, %r208, 8192;
	add.s64 	%rd64, %rd64, 4096;
	add.s32 	%r209, %r209, -4;
	setp.ne.s32 	%p38, %r209, -1;
	@%p38 bra 	$L__BB29_28;

$L__BB29_29:
	setp.eq.s32 	%p39, %r213, 0;
	@%p39 bra 	$L__BB29_32;

	add.s32 	%r190, %r1, %r211;
	shl.b32 	%r191, %r190, 2;
	add.s32 	%r193, %r106, %r191;
	add.s32 	%r212, %r193, 128;
	cvt.s64.s32 	%rd57, %r190;
	mul.lo.s64 	%rd58, %rd10, %rd9;
	add.s64 	%rd59, %rd58, %rd57;
	shl.b64 	%rd60, %rd59, 1;
	add.s64 	%rd65, %rd3, %rd60;

$L__BB29_31:
	.pragma "nounroll";
	ld.shared.f32 	%f158, [%r212];
	mul.f32 	%f157, %f18, %f158;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs41, %f157;}

	// end inline asm
	st.global.u16 	[%rd65], %rs41;
	add.s32 	%r212, %r212, 2048;
	add.s64 	%rd65, %rd65, 1024;
	add.s32 	%r213, %r213, -1;
	setp.ne.s32 	%p40, %r213, 0;
	@%p40 bra 	$L__BB29_31;

$L__BB29_32:
	ret;

}
	// .globl	scaled_masked_softmax_1024_f16
.visible .entry scaled_masked_softmax_1024_f16(
	.param .u64 scaled_masked_softmax_1024_f16_param_0,
	.param .u64 scaled_masked_softmax_1024_f16_param_1,
	.param .align 2 .b8 scaled_masked_softmax_1024_f16_param_2[2],
	.param .u64 scaled_masked_softmax_1024_f16_param_3,
	.param .u32 scaled_masked_softmax_1024_f16_param_4,
	.param .u32 scaled_masked_softmax_1024_f16_param_5,
	.param .u32 scaled_masked_softmax_1024_f16_param_6,
	.param .u32 scaled_masked_softmax_1024_f16_param_7,
	.param .u32 scaled_masked_softmax_1024_f16_param_8,
	.param .u32 scaled_masked_softmax_1024_f16_param_9,
	.param .u32 scaled_masked_softmax_1024_f16_param_10,
	.param .u32 scaled_masked_softmax_1024_f16_param_11,
	.param .u32 scaled_masked_softmax_1024_f16_param_12,
	.param .u32 scaled_masked_softmax_1024_f16_param_13,
	.param .u32 scaled_masked_softmax_1024_f16_param_14,
	.param .u32 scaled_masked_softmax_1024_f16_param_15
)
{
	.reg .pred 	%p<41>;
	.reg .b16 	%rs<42>;
	.reg .f32 	%f<169>;
	.reg .b32 	%r<214>;
	.reg .b64 	%rd<66>;


	ld.param.u16 	%rs1, [scaled_masked_softmax_1024_f16_param_2];
	ld.param.u64 	%rd25, [scaled_masked_softmax_1024_f16_param_0];
	ld.param.u64 	%rd26, [scaled_masked_softmax_1024_f16_param_1];
	ld.param.u64 	%rd27, [scaled_masked_softmax_1024_f16_param_3];
	ld.param.u32 	%r63, [scaled_masked_softmax_1024_f16_param_6];
	ld.param.s32 	%rd5, [scaled_masked_softmax_1024_f16_param_10];
	ld.param.u32 	%r64, [scaled_masked_softmax_1024_f16_param_11];
	ld.param.u32 	%r65, [scaled_masked_softmax_1024_f16_param_12];
	cvta.to.global.u64 	%rd1, %rd26;
	cvta.to.global.u64 	%rd2, %rd25;
	cvta.to.global.u64 	%rd3, %rd27;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.y;
	cvt.u64.u32 	%rd4, %r2;
	and.b64  	%rd28, %rd5, -4294967296;
	setp.eq.s64 	%p1, %rd28, 0;
	@%p1 bra 	$L__BB30_2;

	rem.s64 	%rd61, %rd4, %rd5;
	bra.uni 	$L__BB30_3;

$L__BB30_2:
	cvt.u32.u64 	%r66, %rd5;
	cvt.u32.u64 	%r67, %rd4;
	rem.u32 	%r68, %r67, %r66;
	cvt.u64.u32 	%rd61, %r68;

$L__BB30_3:
	mov.u32 	%r69, %ctaid.x;
	mov.u32 	%r70, %nctaid.x;
	mov.u32 	%r71, %ctaid.z;
	mov.u32 	%r72, %nctaid.y;
	mad.lo.s32 	%r73, %r72, %r71, %r2;
	mad.lo.s32 	%r74, %r73, %r70, %r69;
	cvt.s64.s32 	%rd9, %r74;
	cvt.s64.s32 	%rd10, %r63;
	cvt.s64.s32 	%rd29, %r64;
	cvt.u64.u32 	%rd30, %r69;
	mul.lo.s64 	%rd31, %rd29, %rd30;
	mul.lo.s64 	%rd32, %rd61, %rd5;
	add.s64 	%rd33, %rd32, %rd31;
	shr.u64 	%rd11, %rd33, 1;
	shr.u32 	%r3, %r1, 5;
	and.b32  	%r4, %r1, 31;
	setp.lt.s32 	%p2, %r63, 1;
	mov.f32 	%f163, 0fFF800000;
	@%p2 bra 	$L__BB30_10;

	add.s32 	%r76, %r63, -1;
	shr.u32 	%r5, %r76, 10;
	add.s32 	%r77, %r5, 1;
	and.b32  	%r201, %r77, 3;
	setp.lt.u32 	%p3, %r76, 3072;
	mov.f32 	%f163, 0fFF800000;
	mov.u32 	%r198, 0;
	@%p3 bra 	$L__BB30_7;

	mul.lo.s64 	%rd34, %rd10, %rd9;
	shl.b32 	%r7, %r65, 12;
	add.s32 	%r79, %r201, -1;
	sub.s32 	%r196, %r79, %r5;
	shl.b32 	%r80, %r1, 2;
	mov.u32 	%r81, data_soft_max_f32;
	add.s32 	%r82, %r81, %r80;
	add.s32 	%r195, %r82, 8320;
	cvt.s64.s32 	%rd35, %r1;
	add.s64 	%rd36, %rd34, %rd35;
	shl.b64 	%rd37, %rd36, 1;
	add.s64 	%rd62, %rd2, %rd37;
	mul.lo.s32 	%r194, %r1, %r65;
	shl.b32 	%r83, %r65, 10;
	mul.wide.s32 	%rd13, %r83, 2;
	mov.f32 	%f163, 0fFF800000;
	mov.u32 	%r198, 0;

$L__BB30_6:
	.pragma "nounroll";
	ld.global.u16 	%rs3, [%rd62];
	// begin inline asm
	{mul.f16 %rs2,%rs3,%rs1;
}
	// end inline asm
	cvt.s64.s32 	%rd38, %r194;
	add.s64 	%rd39, %rd11, %rd38;
	shl.b64 	%rd40, %rd39, 1;
	add.s64 	%rd41, %rd1, %rd40;
	ld.global.u16 	%rs7, [%rd41];
	// begin inline asm
	{add.f16 %rs5,%rs2,%rs7;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f23, %rs5;}

	// end inline asm
	st.shared.f32 	[%r195+-8192], %f23;
	max.f32 	%f27, %f163, %f23;
	ld.global.u16 	%rs10, [%rd62+2048];
	// begin inline asm
	{mul.f16 %rs9,%rs10,%rs1;
}
	// end inline asm
	add.s64 	%rd42, %rd41, %rd13;
	ld.global.u16 	%rs14, [%rd42];
	// begin inline asm
	{add.f16 %rs12,%rs9,%rs14;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f24, %rs12;}

	// end inline asm
	st.shared.f32 	[%r195+-4096], %f24;
	max.f32 	%f28, %f27, %f24;
	ld.global.u16 	%rs17, [%rd62+4096];
	// begin inline asm
	{mul.f16 %rs16,%rs17,%rs1;
}
	// end inline asm
	add.s64 	%rd43, %rd42, %rd13;
	ld.global.u16 	%rs21, [%rd43];
	// begin inline asm
	{add.f16 %rs19,%rs16,%rs21;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f25, %rs19;}

	// end inline asm
	st.shared.f32 	[%r195], %f25;
	max.f32 	%f29, %f28, %f25;
	ld.global.u16 	%rs24, [%rd62+6144];
	// begin inline asm
	{mul.f16 %rs23,%rs24,%rs1;
}
	// end inline asm
	add.s64 	%rd44, %rd43, %rd13;
	ld.global.u16 	%rs28, [%rd44];
	// begin inline asm
	{add.f16 %rs26,%rs23,%rs28;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f26, %rs26;}

	// end inline asm
	st.shared.f32 	[%r195+4096], %f26;
	max.f32 	%f163, %f29, %f26;
	add.s32 	%r198, %r198, 4096;
	add.s32 	%r195, %r195, 16384;
	add.s64 	%rd62, %rd62, 8192;
	add.s32 	%r194, %r194, %r7;
	add.s32 	%r196, %r196, 4;
	setp.ne.s32 	%p4, %r196, 0;
	@%p4 bra 	$L__BB30_6;

$L__BB30_7:
	setp.eq.s32 	%p5, %r201, 0;
	@%p5 bra 	$L__BB30_10;

	add.s32 	%r84, %r1, %r198;
	shl.b32 	%r85, %r84, 2;
	mov.u32 	%r86, data_soft_max_f32;
	add.s32 	%r87, %r86, %r85;
	add.s32 	%r200, %r87, 128;
	mul.lo.s32 	%r199, %r65, %r84;
	shl.b32 	%r22, %r65, 10;
	cvt.s64.s32 	%rd45, %r84;
	mul.lo.s64 	%rd46, %rd10, %rd9;
	add.s64 	%rd47, %rd46, %rd45;
	shl.b64 	%rd48, %rd47, 1;
	add.s64 	%rd63, %rd2, %rd48;

$L__BB30_9:
	.pragma "nounroll";
	ld.global.u16 	%rs31, [%rd63];
	// begin inline asm
	{mul.f16 %rs30,%rs31,%rs1;
}
	// end inline asm
	cvt.s64.s32 	%rd49, %r199;
	add.s64 	%rd50, %rd11, %rd49;
	shl.b64 	%rd51, %rd50, 1;
	add.s64 	%rd52, %rd1, %rd51;
	ld.global.u16 	%rs35, [%rd52];
	// begin inline asm
	{add.f16 %rs33,%rs30,%rs35;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f30, %rs33;}

	// end inline asm
	st.shared.f32 	[%r200], %f30;
	max.f32 	%f163, %f163, %f30;
	add.s32 	%r200, %r200, 4096;
	add.s32 	%r199, %r199, %r22;
	add.s64 	%rd63, %rd63, 2048;
	add.s32 	%r201, %r201, -1;
	setp.ne.s32 	%p6, %r201, 0;
	@%p6 bra 	$L__BB30_9;

$L__BB30_10:
	mov.b32 	%r88, %f163;
	mov.u32 	%r89, 31;
	mov.u32 	%r90, 16;
	mov.u32 	%r91, -1;
	shfl.sync.bfly.b32 	%r92|%p7, %r88, %r90, %r89, %r91;
	mov.b32 	%f31, %r92;
	max.f32 	%f32, %f163, %f31;
	mov.b32 	%r93, %f32;
	mov.u32 	%r94, 8;
	shfl.sync.bfly.b32 	%r95|%p8, %r93, %r94, %r89, %r91;
	mov.b32 	%f33, %r95;
	max.f32 	%f34, %f32, %f33;
	mov.b32 	%r96, %f34;
	mov.u32 	%r97, 4;
	shfl.sync.bfly.b32 	%r98|%p9, %r96, %r97, %r89, %r91;
	mov.b32 	%f35, %r98;
	max.f32 	%f36, %f34, %f35;
	mov.b32 	%r99, %f36;
	mov.u32 	%r100, 2;
	shfl.sync.bfly.b32 	%r101|%p10, %r99, %r100, %r89, %r91;
	mov.b32 	%f37, %r101;
	max.f32 	%f38, %f36, %f37;
	mov.b32 	%r102, %f38;
	mov.u32 	%r103, 1;
	shfl.sync.bfly.b32 	%r104|%p11, %r102, %r103, %r89, %r91;
	mov.b32 	%f39, %r104;
	max.f32 	%f8, %f38, %f39;
	shl.b32 	%r105, %r4, 2;
	mov.u32 	%r106, data_soft_max_f32;
	add.s32 	%r29, %r106, %r105;
	setp.ne.s32 	%p12, %r3, 0;
	@%p12 bra 	$L__BB30_12;

	mov.u32 	%r107, -8388608;
	st.shared.u32 	[%r29], %r107;

$L__BB30_12:
	bar.sync 	0;
	shl.b32 	%r108, %r3, 2;
	add.s32 	%r30, %r106, %r108;
	setp.ne.s32 	%p13, %r4, 0;
	@%p13 bra 	$L__BB30_14;

	st.shared.f32 	[%r30], %f8;

$L__BB30_14:
	bar.sync 	0;
	ld.shared.f32 	%f41, [%r29];
	mov.b32 	%r110, %f41;
	mov.u32 	%r111, 31;
	mov.u32 	%r112, 16;
	mov.u32 	%r113, -1;
	shfl.sync.bfly.b32 	%r114|%p15, %r110, %r112, %r111, %r113;
	mov.b32 	%f42, %r114;
	max.f32 	%f43, %f41, %f42;
	mov.b32 	%r115, %f43;
	mov.u32 	%r116, 8;
	shfl.sync.bfly.b32 	%r117|%p16, %r115, %r116, %r111, %r113;
	mov.b32 	%f44, %r117;
	max.f32 	%f45, %f43, %f44;
	mov.b32 	%r118, %f45;
	mov.u32 	%r119, 4;
	shfl.sync.bfly.b32 	%r120|%p17, %r118, %r119, %r111, %r113;
	mov.b32 	%f46, %r120;
	max.f32 	%f47, %f45, %f46;
	mov.b32 	%r121, %f47;
	mov.u32 	%r122, 2;
	shfl.sync.bfly.b32 	%r123|%p18, %r121, %r122, %r111, %r113;
	mov.b32 	%f48, %r123;
	max.f32 	%f49, %f47, %f48;
	mov.b32 	%r124, %f49;
	mov.u32 	%r125, 1;
	shfl.sync.bfly.b32 	%r126|%p19, %r124, %r125, %r111, %r113;
	mov.b32 	%f50, %r126;
	max.f32 	%f9, %f49, %f50;
	mov.f32 	%f168, 0f00000000;
	@%p2 bra 	$L__BB30_21;

	add.s32 	%r128, %r63, -1;
	shr.u32 	%r31, %r128, 10;
	add.s32 	%r129, %r31, 1;
	and.b32  	%r207, %r129, 3;
	setp.lt.u32 	%p20, %r128, 3072;
	mov.f32 	%f168, 0f00000000;
	mov.u32 	%r205, 0;
	@%p20 bra 	$L__BB30_18;

	shl.b32 	%r131, %r1, 2;
	add.s32 	%r133, %r106, %r131;
	add.s32 	%r203, %r133, 8320;
	sub.s32 	%r202, %r31, %r207;
	mov.f32 	%f168, 0f00000000;
	mov.u32 	%r205, 0;

$L__BB30_17:
	.pragma "nounroll";
	ld.shared.f32 	%f54, [%r203+-8192];
	sub.f32 	%f55, %f54, %f9;
	mov.f32 	%f56, 0f3F000000;
	mov.f32 	%f57, 0f3BBB989D;
	fma.rn.f32 	%f58, %f55, %f57, %f56;
	cvt.sat.f32.f32 	%f59, %f58;
	mov.f32 	%f60, 0f4B400001;
	mov.f32 	%f61, 0f437C0000;
	fma.rm.f32 	%f62, %f59, %f61, %f60;
	add.f32 	%f63, %f62, 0fCB40007F;
	neg.f32 	%f64, %f63;
	mov.f32 	%f65, 0f3FB8AA3B;
	fma.rn.f32 	%f66, %f55, %f65, %f64;
	mov.f32 	%f67, 0f32A57060;
	fma.rn.f32 	%f68, %f55, %f67, %f66;
	mov.b32 	%r134, %f62;
	shl.b32 	%r135, %r134, 23;
	mov.b32 	%f69, %r135;
	ex2.approx.ftz.f32 	%f70, %f68;
	mul.f32 	%f71, %f70, %f69;
	add.f32 	%f72, %f168, %f71;
	st.shared.f32 	[%r203+-8192], %f71;
	ld.shared.f32 	%f73, [%r203+-4096];
	sub.f32 	%f74, %f73, %f9;
	fma.rn.f32 	%f75, %f74, %f57, %f56;
	cvt.sat.f32.f32 	%f76, %f75;
	fma.rm.f32 	%f77, %f76, %f61, %f60;
	add.f32 	%f78, %f77, 0fCB40007F;
	neg.f32 	%f79, %f78;
	fma.rn.f32 	%f80, %f74, %f65, %f79;
	fma.rn.f32 	%f81, %f74, %f67, %f80;
	mov.b32 	%r136, %f77;
	shl.b32 	%r137, %r136, 23;
	mov.b32 	%f82, %r137;
	ex2.approx.ftz.f32 	%f83, %f81;
	mul.f32 	%f84, %f83, %f82;
	add.f32 	%f85, %f72, %f84;
	st.shared.f32 	[%r203+-4096], %f84;
	ld.shared.f32 	%f86, [%r203];
	sub.f32 	%f87, %f86, %f9;
	fma.rn.f32 	%f88, %f87, %f57, %f56;
	cvt.sat.f32.f32 	%f89, %f88;
	fma.rm.f32 	%f90, %f89, %f61, %f60;
	add.f32 	%f91, %f90, 0fCB40007F;
	neg.f32 	%f92, %f91;
	fma.rn.f32 	%f93, %f87, %f65, %f92;
	fma.rn.f32 	%f94, %f87, %f67, %f93;
	mov.b32 	%r138, %f90;
	shl.b32 	%r139, %r138, 23;
	mov.b32 	%f95, %r139;
	ex2.approx.ftz.f32 	%f96, %f94;
	mul.f32 	%f97, %f96, %f95;
	add.f32 	%f98, %f85, %f97;
	st.shared.f32 	[%r203], %f97;
	ld.shared.f32 	%f99, [%r203+4096];
	sub.f32 	%f100, %f99, %f9;
	fma.rn.f32 	%f101, %f100, %f57, %f56;
	cvt.sat.f32.f32 	%f102, %f101;
	fma.rm.f32 	%f103, %f102, %f61, %f60;
	add.f32 	%f104, %f103, 0fCB40007F;
	neg.f32 	%f105, %f104;
	fma.rn.f32 	%f106, %f100, %f65, %f105;
	fma.rn.f32 	%f107, %f100, %f67, %f106;
	mov.b32 	%r140, %f103;
	shl.b32 	%r141, %r140, 23;
	mov.b32 	%f108, %r141;
	ex2.approx.ftz.f32 	%f109, %f107;
	mul.f32 	%f110, %f109, %f108;
	add.f32 	%f168, %f98, %f110;
	st.shared.f32 	[%r203+4096], %f110;
	add.s32 	%r205, %r205, 4096;
	add.s32 	%r203, %r203, 16384;
	add.s32 	%r202, %r202, -4;
	setp.ne.s32 	%p21, %r202, -1;
	@%p21 bra 	$L__BB30_17;

$L__BB30_18:
	setp.eq.s32 	%p22, %r207, 0;
	@%p22 bra 	$L__BB30_21;

	add.s32 	%r142, %r1, %r205;
	shl.b32 	%r143, %r142, 2;
	add.s32 	%r145, %r106, %r143;
	add.s32 	%r206, %r145, 128;

$L__BB30_20:
	.pragma "nounroll";
	ld.shared.f32 	%f111, [%r206];
	sub.f32 	%f112, %f111, %f9;
	mov.f32 	%f113, 0f3F000000;
	mov.f32 	%f114, 0f3BBB989D;
	fma.rn.f32 	%f115, %f112, %f114, %f113;
	cvt.sat.f32.f32 	%f116, %f115;
	mov.f32 	%f117, 0f4B400001;
	mov.f32 	%f118, 0f437C0000;
	fma.rm.f32 	%f119, %f116, %f118, %f117;
	add.f32 	%f120, %f119, 0fCB40007F;
	neg.f32 	%f121, %f120;
	mov.f32 	%f122, 0f3FB8AA3B;
	fma.rn.f32 	%f123, %f112, %f122, %f121;
	mov.f32 	%f124, 0f32A57060;
	fma.rn.f32 	%f125, %f112, %f124, %f123;
	mov.b32 	%r146, %f119;
	shl.b32 	%r147, %r146, 23;
	mov.b32 	%f126, %r147;
	ex2.approx.ftz.f32 	%f127, %f125;
	mul.f32 	%f128, %f127, %f126;
	add.f32 	%f168, %f168, %f128;
	st.shared.f32 	[%r206], %f128;
	add.s32 	%r206, %r206, 4096;
	add.s32 	%r207, %r207, -1;
	setp.ne.s32 	%p23, %r207, 0;
	@%p23 bra 	$L__BB30_20;

$L__BB30_21:
	mov.b32 	%r148, %f168;
	shfl.sync.bfly.b32 	%r152|%p24, %r148, %r112, %r111, %r113;
	mov.b32 	%f129, %r152;
	add.f32 	%f130, %f168, %f129;
	mov.b32 	%r153, %f130;
	shfl.sync.bfly.b32 	%r155|%p25, %r153, %r116, %r111, %r113;
	mov.b32 	%f131, %r155;
	add.f32 	%f132, %f130, %f131;
	mov.b32 	%r156, %f132;
	shfl.sync.bfly.b32 	%r158|%p26, %r156, %r119, %r111, %r113;
	mov.b32 	%f133, %r158;
	add.f32 	%f134, %f132, %f133;
	mov.b32 	%r159, %f134;
	shfl.sync.bfly.b32 	%r161|%p27, %r159, %r122, %r111, %r113;
	mov.b32 	%f135, %r161;
	add.f32 	%f136, %f134, %f135;
	mov.b32 	%r162, %f136;
	shfl.sync.bfly.b32 	%r164|%p28, %r162, %r125, %r111, %r113;
	mov.b32 	%f137, %r164;
	add.f32 	%f17, %f136, %f137;
	bar.sync 	0;
	@%p12 bra 	$L__BB30_23;

	mov.u32 	%r165, 0;
	st.shared.u32 	[%r29], %r165;

$L__BB30_23:
	bar.sync 	0;
	@%p13 bra 	$L__BB30_25;

	st.shared.f32 	[%r30], %f17;

$L__BB30_25:
	bar.sync 	0;
	ld.shared.f32 	%f138, [%r29];
	mov.b32 	%r166, %f138;
	mov.u32 	%r167, 31;
	mov.u32 	%r168, 16;
	mov.u32 	%r169, -1;
	shfl.sync.bfly.b32 	%r170|%p32, %r166, %r168, %r167, %r169;
	mov.b32 	%f139, %r170;
	add.f32 	%f140, %f138, %f139;
	mov.b32 	%r171, %f140;
	mov.u32 	%r172, 8;
	shfl.sync.bfly.b32 	%r173|%p33, %r171, %r172, %r167, %r169;
	mov.b32 	%f141, %r173;
	add.f32 	%f142, %f140, %f141;
	mov.b32 	%r174, %f142;
	mov.u32 	%r175, 4;
	shfl.sync.bfly.b32 	%r176|%p34, %r174, %r175, %r167, %r169;
	mov.b32 	%f143, %r176;
	add.f32 	%f144, %f142, %f143;
	mov.b32 	%r177, %f144;
	mov.u32 	%r178, 2;
	shfl.sync.bfly.b32 	%r179|%p35, %r177, %r178, %r167, %r169;
	mov.b32 	%f145, %r179;
	add.f32 	%f146, %f144, %f145;
	mov.b32 	%r180, %f146;
	mov.u32 	%r181, 1;
	shfl.sync.bfly.b32 	%r182|%p36, %r180, %r181, %r167, %r169;
	mov.b32 	%f147, %r182;
	add.f32 	%f148, %f146, %f147;
	rcp.rn.f32 	%f18, %f148;
	@%p2 bra 	$L__BB30_32;

	add.s32 	%r184, %r63, -1;
	shr.u32 	%r47, %r184, 10;
	add.s32 	%r185, %r47, 1;
	and.b32  	%r213, %r185, 3;
	setp.lt.u32 	%p37, %r184, 3072;
	mov.u32 	%r211, 0;
	@%p37 bra 	$L__BB30_29;

	mul.lo.s64 	%rd53, %rd10, %rd9;
	sub.s32 	%r209, %r47, %r213;
	shl.b32 	%r187, %r1, 2;
	add.s32 	%r189, %r106, %r187;
	add.s32 	%r208, %r189, 8320;
	cvt.s64.s32 	%rd54, %r1;
	add.s64 	%rd55, %rd53, %rd54;
	shl.b64 	%rd56, %rd55, 1;
	add.s64 	%rd64, %rd3, %rd56;
	mov.u32 	%r211, 0;

$L__BB30_28:
	.pragma "nounroll";
	ld.shared.f32 	%f153, [%r208+-8192];
	mul.f32 	%f149, %f18, %f153;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs37, %f149;}

	// end inline asm
	st.global.u16 	[%rd64], %rs37;
	ld.shared.f32 	%f154, [%r208+-4096];
	mul.f32 	%f150, %f18, %f154;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs38, %f150;}

	// end inline asm
	st.global.u16 	[%rd64+2048], %rs38;
	ld.shared.f32 	%f155, [%r208];
	mul.f32 	%f151, %f18, %f155;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs39, %f151;}

	// end inline asm
	st.global.u16 	[%rd64+4096], %rs39;
	ld.shared.f32 	%f156, [%r208+4096];
	mul.f32 	%f152, %f18, %f156;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs40, %f152;}

	// end inline asm
	st.global.u16 	[%rd64+6144], %rs40;
	add.s32 	%r211, %r211, 4096;
	add.s32 	%r208, %r208, 16384;
	add.s64 	%rd64, %rd64, 8192;
	add.s32 	%r209, %r209, -4;
	setp.ne.s32 	%p38, %r209, -1;
	@%p38 bra 	$L__BB30_28;

$L__BB30_29:
	setp.eq.s32 	%p39, %r213, 0;
	@%p39 bra 	$L__BB30_32;

	add.s32 	%r190, %r1, %r211;
	shl.b32 	%r191, %r190, 2;
	add.s32 	%r193, %r106, %r191;
	add.s32 	%r212, %r193, 128;
	cvt.s64.s32 	%rd57, %r190;
	mul.lo.s64 	%rd58, %rd10, %rd9;
	add.s64 	%rd59, %rd58, %rd57;
	shl.b64 	%rd60, %rd59, 1;
	add.s64 	%rd65, %rd3, %rd60;

$L__BB30_31:
	.pragma "nounroll";
	ld.shared.f32 	%f158, [%r212];
	mul.f32 	%f157, %f18, %f158;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs41, %f157;}

	// end inline asm
	st.global.u16 	[%rd65], %rs41;
	add.s32 	%r212, %r212, 4096;
	add.s64 	%rd65, %rd65, 2048;
	add.s32 	%r213, %r213, -1;
	setp.ne.s32 	%p40, %r213, 0;
	@%p40 bra 	$L__BB30_31;

$L__BB30_32:
	ret;

}
	// .globl	scaled_masked_softmax_0_f16
.visible .entry scaled_masked_softmax_0_f16(
	.param .u64 scaled_masked_softmax_0_f16_param_0,
	.param .u64 scaled_masked_softmax_0_f16_param_1,
	.param .align 2 .b8 scaled_masked_softmax_0_f16_param_2[2],
	.param .u64 scaled_masked_softmax_0_f16_param_3,
	.param .u32 scaled_masked_softmax_0_f16_param_4,
	.param .u32 scaled_masked_softmax_0_f16_param_5,
	.param .u32 scaled_masked_softmax_0_f16_param_6,
	.param .u32 scaled_masked_softmax_0_f16_param_7,
	.param .u32 scaled_masked_softmax_0_f16_param_8,
	.param .u32 scaled_masked_softmax_0_f16_param_9,
	.param .u32 scaled_masked_softmax_0_f16_param_10,
	.param .u32 scaled_masked_softmax_0_f16_param_11,
	.param .u32 scaled_masked_softmax_0_f16_param_12,
	.param .u32 scaled_masked_softmax_0_f16_param_13,
	.param .u32 scaled_masked_softmax_0_f16_param_14,
	.param .u32 scaled_masked_softmax_0_f16_param_15
)
{
	.reg .pred 	%p<37>;
	.reg .b16 	%rs<11>;
	.reg .f32 	%f<83>;
	.reg .b32 	%r<144>;
	.reg .b64 	%rd<34>;


	ld.param.u16 	%rs2, [scaled_masked_softmax_0_f16_param_2];
	ld.param.u64 	%rd7, [scaled_masked_softmax_0_f16_param_0];
	ld.param.u64 	%rd8, [scaled_masked_softmax_0_f16_param_1];
	ld.param.u64 	%rd9, [scaled_masked_softmax_0_f16_param_3];
	ld.param.u32 	%r15, [scaled_masked_softmax_0_f16_param_6];
	ld.param.s32 	%rd1, [scaled_masked_softmax_0_f16_param_10];
	ld.param.u32 	%r16, [scaled_masked_softmax_0_f16_param_11];
	ld.param.u32 	%r17, [scaled_masked_softmax_0_f16_param_12];
	and.b64  	%rd10, %rd1, -4294967296;
	setp.eq.s64 	%p1, %rd10, 0;
	@%p1 bra 	$L__BB31_2;

	mov.u32 	%r18, %ctaid.y;
	cvt.u64.u32 	%rd11, %r18;
	rem.s64 	%rd33, %rd11, %rd1;
	bra.uni 	$L__BB31_3;

$L__BB31_2:
	cvt.u32.u64 	%r19, %rd1;
	mov.u32 	%r20, %ctaid.y;
	rem.u32 	%r21, %r20, %r19;
	cvt.u64.u32 	%rd33, %r21;

$L__BB31_3:
	mov.u32 	%r22, %ctaid.x;
	cvt.u64.u32 	%rd12, %r22;
	cvt.s64.s32 	%rd13, %r16;
	mul.lo.s64 	%rd14, %rd13, %rd12;
	mul.lo.s64 	%rd15, %rd33, %rd1;
	add.s64 	%rd5, %rd15, %rd14;
	setp.lt.s32 	%p2, %r15, 1;
	mov.f32 	%f78, 0fFF800000;
	@%p2 bra 	$L__BB31_7;

	mov.u32 	%r1, %tid.x;
	shr.u64 	%rd6, %rd5, 1;
	mov.f32 	%f78, 0fFF800000;
	mov.u32 	%r141, 0;
	cvta.to.global.u64 	%rd19, %rd7;
	cvta.to.global.u64 	%rd24, %rd8;

$L__BB31_5:
	add.s32 	%r3, %r141, %r1;
	setp.ge.s32 	%p3, %r3, %r15;
	@%p3 bra 	$L__BB31_7;

	cvt.s64.s32 	%rd16, %r3;
	mov.u32 	%r24, %ctaid.z;
	mov.u32 	%r25, %nctaid.y;
	mov.u32 	%r26, %ctaid.y;
	mad.lo.s32 	%r27, %r25, %r24, %r26;
	mov.u32 	%r28, %nctaid.x;
	mad.lo.s32 	%r30, %r27, %r28, %r22;
	mul.wide.s32 	%rd17, %r15, %r30;
	add.s64 	%rd18, %rd17, %rd16;
	shl.b64 	%rd20, %rd18, 1;
	add.s64 	%rd21, %rd19, %rd20;
	ld.global.u16 	%rs4, [%rd21];
	// begin inline asm
	{mul.f16 %rs3,%rs4,%rs2;
}
	// end inline asm
	mul.lo.s32 	%r31, %r3, %r17;
	cvt.s64.s32 	%rd22, %r31;
	add.s64 	%rd23, %rd6, %rd22;
	shl.b64 	%rd25, %rd23, 1;
	add.s64 	%rd26, %rd24, %rd25;
	ld.global.u16 	%rs8, [%rd26];
	// begin inline asm
	{add.f16 %rs6,%rs3,%rs8;
}
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f16, %rs6;}

	// end inline asm
	shl.b32 	%r32, %r3, 2;
	mov.u32 	%r33, data_soft_max_f32;
	add.s32 	%r34, %r33, %r32;
	st.shared.f32 	[%r34+128], %f16;
	max.f32 	%f78, %f78, %f16;
	mov.u32 	%r35, %ntid.x;
	add.s32 	%r141, %r141, %r35;
	setp.lt.s32 	%p4, %r141, %r15;
	@%p4 bra 	$L__BB31_5;

$L__BB31_7:
	mov.b32 	%r36, %f78;
	mov.u32 	%r37, 31;
	mov.u32 	%r38, 16;
	mov.u32 	%r39, -1;
	shfl.sync.bfly.b32 	%r40|%p5, %r36, %r38, %r37, %r39;
	mov.b32 	%f17, %r40;
	max.f32 	%f18, %f78, %f17;
	mov.b32 	%r41, %f18;
	mov.u32 	%r42, 8;
	shfl.sync.bfly.b32 	%r43|%p6, %r41, %r42, %r37, %r39;
	mov.b32 	%f19, %r43;
	max.f32 	%f20, %f18, %f19;
	mov.b32 	%r44, %f20;
	mov.u32 	%r45, 4;
	shfl.sync.bfly.b32 	%r46|%p7, %r44, %r45, %r37, %r39;
	mov.b32 	%f21, %r46;
	max.f32 	%f22, %f20, %f21;
	mov.b32 	%r47, %f22;
	mov.u32 	%r48, 2;
	shfl.sync.bfly.b32 	%r49|%p8, %r47, %r48, %r37, %r39;
	mov.b32 	%f23, %r49;
	max.f32 	%f24, %f22, %f23;
	mov.b32 	%r50, %f24;
	mov.u32 	%r51, 1;
	shfl.sync.bfly.b32 	%r52|%p9, %r50, %r51, %r37, %r39;
	mov.b32 	%f25, %r52;
	max.f32 	%f79, %f24, %f25;
	mov.u32 	%r53, %ntid.x;
	setp.lt.s32 	%p10, %r53, 33;
	mov.u32 	%r54, %tid.x;
	shl.b32 	%r55, %r54, 2;
	and.b32  	%r56, %r55, 124;
	mov.u32 	%r57, data_soft_max_f32;
	add.s32 	%r5, %r57, %r56;
	shr.u32 	%r58, %r54, 3;
	and.b32  	%r59, %r58, 536870908;
	add.s32 	%r6, %r57, %r59;
	@%p10 bra 	$L__BB31_13;

	shr.u32 	%r61, %r54, 5;
	setp.ne.s32 	%p11, %r61, 0;
	@%p11 bra 	$L__BB31_10;

	mov.u32 	%r62, -8388608;
	st.shared.u32 	[%r5], %r62;

$L__BB31_10:
	bar.sync 	0;
	and.b32  	%r64, %r54, 31;
	setp.ne.s32 	%p12, %r64, 0;
	@%p12 bra 	$L__BB31_12;

	st.shared.f32 	[%r6], %f79;

$L__BB31_12:
	bar.sync 	0;
	ld.shared.f32 	%f26, [%r5];
	mov.b32 	%r65, %f26;
	mov.u32 	%r66, 31;
	mov.u32 	%r67, 16;
	mov.u32 	%r68, -1;
	shfl.sync.bfly.b32 	%r69|%p13, %r65, %r67, %r66, %r68;
	mov.b32 	%f27, %r69;
	max.f32 	%f28, %f26, %f27;
	mov.b32 	%r70, %f28;
	mov.u32 	%r71, 8;
	shfl.sync.bfly.b32 	%r72|%p14, %r70, %r71, %r66, %r68;
	mov.b32 	%f29, %r72;
	max.f32 	%f30, %f28, %f29;
	mov.b32 	%r73, %f30;
	mov.u32 	%r74, 4;
	shfl.sync.bfly.b32 	%r75|%p15, %r73, %r74, %r66, %r68;
	mov.b32 	%f31, %r75;
	max.f32 	%f32, %f30, %f31;
	mov.b32 	%r76, %f32;
	mov.u32 	%r77, 2;
	shfl.sync.bfly.b32 	%r78|%p16, %r76, %r77, %r66, %r68;
	mov.b32 	%f33, %r78;
	max.f32 	%f34, %f32, %f33;
	mov.b32 	%r79, %f34;
	mov.u32 	%r80, 1;
	shfl.sync.bfly.b32 	%r81|%p17, %r79, %r80, %r66, %r68;
	mov.b32 	%f35, %r81;
	max.f32 	%f79, %f34, %f35;

$L__BB31_13:
	mov.f32 	%f81, 0f00000000;
	@%p2 bra 	$L__BB31_17;

	mov.f32 	%f81, 0f00000000;
	mov.u32 	%r142, 0;

$L__BB31_15:
	add.s32 	%r9, %r142, %r54;
	setp.ge.s32 	%p19, %r9, %r15;
	@%p19 bra 	$L__BB31_17;

	shl.b32 	%r83, %r9, 2;
	add.s32 	%r85, %r57, %r83;
	ld.shared.f32 	%f38, [%r85+128];
	sub.f32 	%f39, %f38, %f79;
	mov.f32 	%f40, 0f3F000000;
	mov.f32 	%f41, 0f3BBB989D;
	fma.rn.f32 	%f42, %f39, %f41, %f40;
	cvt.sat.f32.f32 	%f43, %f42;
	mov.f32 	%f44, 0f4B400001;
	mov.f32 	%f45, 0f437C0000;
	fma.rm.f32 	%f46, %f43, %f45, %f44;
	add.f32 	%f47, %f46, 0fCB40007F;
	neg.f32 	%f48, %f47;
	mov.f32 	%f49, 0f3FB8AA3B;
	fma.rn.f32 	%f50, %f39, %f49, %f48;
	mov.f32 	%f51, 0f32A57060;
	fma.rn.f32 	%f52, %f39, %f51, %f50;
	mov.b32 	%r86, %f46;
	shl.b32 	%r87, %r86, 23;
	mov.b32 	%f53, %r87;
	ex2.approx.ftz.f32 	%f54, %f52;
	mul.f32 	%f55, %f54, %f53;
	add.f32 	%f81, %f81, %f55;
	st.shared.f32 	[%r85+128], %f55;
	add.s32 	%r142, %r142, %r53;
	setp.lt.s32 	%p20, %r142, %r15;
	@%p20 bra 	$L__BB31_15;

$L__BB31_17:
	mov.b32 	%r90, %f81;
	mov.u32 	%r91, 31;
	mov.u32 	%r92, 16;
	mov.u32 	%r93, -1;
	shfl.sync.bfly.b32 	%r94|%p22, %r90, %r92, %r91, %r93;
	mov.b32 	%f56, %r94;
	add.f32 	%f57, %f81, %f56;
	mov.b32 	%r95, %f57;
	mov.u32 	%r96, 8;
	shfl.sync.bfly.b32 	%r97|%p23, %r95, %r96, %r91, %r93;
	mov.b32 	%f58, %r97;
	add.f32 	%f59, %f57, %f58;
	mov.b32 	%r98, %f59;
	mov.u32 	%r99, 4;
	shfl.sync.bfly.b32 	%r100|%p24, %r98, %r99, %r91, %r93;
	mov.b32 	%f60, %r100;
	add.f32 	%f61, %f59, %f60;
	mov.b32 	%r101, %f61;
	mov.u32 	%r102, 2;
	shfl.sync.bfly.b32 	%r103|%p25, %r101, %r102, %r91, %r93;
	mov.b32 	%f62, %r103;
	add.f32 	%f63, %f61, %f62;
	mov.b32 	%r104, %f63;
	mov.u32 	%r105, 1;
	shfl.sync.bfly.b32 	%r106|%p26, %r104, %r105, %r91, %r93;
	mov.b32 	%f64, %r106;
	add.f32 	%f82, %f63, %f64;
	@%p10 bra 	$L__BB31_23;

	bar.sync 	0;
	shr.u32 	%r108, %r54, 5;
	setp.ne.s32 	%p27, %r108, 0;
	@%p27 bra 	$L__BB31_20;

	mov.u32 	%r109, 0;
	st.shared.u32 	[%r5], %r109;

$L__BB31_20:
	bar.sync 	0;
	and.b32  	%r111, %r54, 31;
	setp.ne.s32 	%p28, %r111, 0;
	@%p28 bra 	$L__BB31_22;

	st.shared.f32 	[%r6], %f82;

$L__BB31_22:
	bar.sync 	0;
	ld.shared.f32 	%f65, [%r5];
	mov.b32 	%r112, %f65;
	mov.u32 	%r113, 31;
	mov.u32 	%r114, 16;
	mov.u32 	%r115, -1;
	shfl.sync.bfly.b32 	%r116|%p29, %r112, %r114, %r113, %r115;
	mov.b32 	%f66, %r116;
	add.f32 	%f67, %f65, %f66;
	mov.b32 	%r117, %f67;
	mov.u32 	%r118, 8;
	shfl.sync.bfly.b32 	%r119|%p30, %r117, %r118, %r113, %r115;
	mov.b32 	%f68, %r119;
	add.f32 	%f69, %f67, %f68;
	mov.b32 	%r120, %f69;
	mov.u32 	%r121, 4;
	shfl.sync.bfly.b32 	%r122|%p31, %r120, %r121, %r113, %r115;
	mov.b32 	%f70, %r122;
	add.f32 	%f71, %f69, %f70;
	mov.b32 	%r123, %f71;
	mov.u32 	%r124, 2;
	shfl.sync.bfly.b32 	%r125|%p32, %r123, %r124, %r113, %r115;
	mov.b32 	%f72, %r125;
	add.f32 	%f73, %f71, %f72;
	mov.b32 	%r126, %f73;
	mov.u32 	%r127, 1;
	shfl.sync.bfly.b32 	%r128|%p33, %r126, %r127, %r113, %r115;
	mov.b32 	%f74, %r128;
	add.f32 	%f82, %f73, %f74;

$L__BB31_23:
	@%p2 bra 	$L__BB31_27;

	rcp.rn.f32 	%f13, %f82;
	mov.u32 	%r143, 0;
	cvta.to.global.u64 	%rd30, %rd9;

$L__BB31_25:
	add.s32 	%r13, %r143, %r54;
	setp.ge.s32 	%p35, %r13, %r15;
	@%p35 bra 	$L__BB31_27;

	cvt.s64.s32 	%rd27, %r13;
	mov.u32 	%r130, %ctaid.z;
	mov.u32 	%r131, %nctaid.y;
	mov.u32 	%r132, %ctaid.y;
	mad.lo.s32 	%r133, %r131, %r130, %r132;
	mov.u32 	%r134, %nctaid.x;
	mad.lo.s32 	%r136, %r133, %r134, %r22;
	mul.wide.s32 	%rd28, %r15, %r136;
	add.s64 	%rd29, %rd28, %rd27;
	shl.b32 	%r137, %r13, 2;
	add.s32 	%r139, %r57, %r137;
	ld.shared.f32 	%f76, [%r139+128];
	mul.f32 	%f75, %f13, %f76;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs10, %f75;}

	// end inline asm
	shl.b64 	%rd31, %rd29, 1;
	add.s64 	%rd32, %rd30, %rd31;
	st.global.u16 	[%rd32], %rs10;
	add.s32 	%r143, %r143, %r53;
	setp.lt.s32 	%p36, %r143, %r15;
	@%p36 bra 	$L__BB31_25;

$L__BB31_27:
	ret;

}
	// .globl	reduce_max_small_f32
.visible .entry reduce_max_small_f32(
	.param .u64 reduce_max_small_f32_param_0,
	.param .u64 reduce_max_small_f32_param_1,
	.param .u32 reduce_max_small_f32_param_2,
	.param .u32 reduce_max_small_f32_param_3,
	.param .u32 reduce_max_small_f32_param_4,
	.param .u32 reduce_max_small_f32_param_5,
	.param .u32 reduce_max_small_f32_param_6,
	.param .u32 reduce_max_small_f32_param_7,
	.param .u32 reduce_max_small_f32_param_8,
	.param .u32 reduce_max_small_f32_param_9,
	.param .u32 reduce_max_small_f32_param_10
)
{
	.reg .pred 	%p<9>;
	.reg .f32 	%f<19>;
	.reg .b32 	%r<36>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd4, [reduce_max_small_f32_param_0];
	ld.param.u64 	%rd5, [reduce_max_small_f32_param_1];
	ld.param.u32 	%r7, [reduce_max_small_f32_param_3];
	ld.param.u32 	%r8, [reduce_max_small_f32_param_5];
	ld.param.u32 	%r9, [reduce_max_small_f32_param_6];
	ld.param.u32 	%r10, [reduce_max_small_f32_param_7];
	ld.param.u32 	%r11, [reduce_max_small_f32_param_8];
	ld.param.u32 	%r12, [reduce_max_small_f32_param_10];
	mov.u32 	%r1, %ctaid.z;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r13, %r1, %r11;
	mad.lo.s32 	%r14, %r2, %r12, %r13;
	cvta.to.global.u64 	%rd6, %rd5;
	mul.wide.u32 	%rd7, %r14, 4;
	add.s64 	%rd1, %rd6, %rd7;
	mov.u32 	%r3, %tid.x;
	setp.ge.s32 	%p1, %r3, %r7;
	mov.f32 	%f18, 0fFF800000;
	@%p1 bra 	$L__BB32_3;

	mov.u32 	%r4, %ntid.x;
	mul.lo.s32 	%r15, %r1, %r8;
	mad.lo.s32 	%r16, %r2, %r10, %r15;
	cvt.u64.u32 	%rd2, %r16;
	cvta.to.global.u64 	%rd3, %rd4;
	mov.f32 	%f18, 0fFF800000;
	mov.u32 	%r35, %r3;

$L__BB32_2:
	mul.lo.s32 	%r17, %r35, %r9;
	cvt.s64.s32 	%rd8, %r17;
	add.s64 	%rd9, %rd8, %rd2;
	shl.b64 	%rd10, %rd9, 2;
	add.s64 	%rd11, %rd3, %rd10;
	ld.global.f32 	%f7, [%rd11];
	max.f32 	%f18, %f18, %f7;
	add.s32 	%r35, %r35, %r4;
	setp.lt.s32 	%p2, %r35, %r7;
	@%p2 bra 	$L__BB32_2;

$L__BB32_3:
	mov.b32 	%r18, %f18;
	mov.u32 	%r19, 31;
	mov.u32 	%r20, 16;
	mov.u32 	%r21, -1;
	shfl.sync.bfly.b32 	%r22|%p3, %r18, %r20, %r19, %r21;
	mov.b32 	%f8, %r22;
	max.f32 	%f9, %f18, %f8;
	mov.b32 	%r23, %f9;
	mov.u32 	%r24, 8;
	shfl.sync.bfly.b32 	%r25|%p4, %r23, %r24, %r19, %r21;
	mov.b32 	%f10, %r25;
	max.f32 	%f11, %f9, %f10;
	mov.b32 	%r26, %f11;
	mov.u32 	%r27, 4;
	shfl.sync.bfly.b32 	%r28|%p5, %r26, %r27, %r19, %r21;
	mov.b32 	%f12, %r28;
	max.f32 	%f13, %f11, %f12;
	mov.b32 	%r29, %f13;
	mov.u32 	%r30, 2;
	shfl.sync.bfly.b32 	%r31|%p6, %r29, %r30, %r19, %r21;
	mov.b32 	%f14, %r31;
	max.f32 	%f15, %f13, %f14;
	mov.b32 	%r32, %f15;
	mov.u32 	%r33, 1;
	shfl.sync.bfly.b32 	%r34|%p7, %r32, %r33, %r19, %r21;
	mov.b32 	%f16, %r34;
	max.f32 	%f4, %f15, %f16;
	setp.ne.s32 	%p8, %r3, 0;
	@%p8 bra 	$L__BB32_5;

	st.global.f32 	[%rd1], %f4;

$L__BB32_5:
	ret;

}
	// .globl	reduce_min_small_f32
.visible .entry reduce_min_small_f32(
	.param .u64 reduce_min_small_f32_param_0,
	.param .u64 reduce_min_small_f32_param_1,
	.param .u32 reduce_min_small_f32_param_2,
	.param .u32 reduce_min_small_f32_param_3,
	.param .u32 reduce_min_small_f32_param_4,
	.param .u32 reduce_min_small_f32_param_5,
	.param .u32 reduce_min_small_f32_param_6,
	.param .u32 reduce_min_small_f32_param_7,
	.param .u32 reduce_min_small_f32_param_8,
	.param .u32 reduce_min_small_f32_param_9,
	.param .u32 reduce_min_small_f32_param_10
)
{
	.reg .pred 	%p<9>;
	.reg .f32 	%f<19>;
	.reg .b32 	%r<36>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd4, [reduce_min_small_f32_param_0];
	ld.param.u64 	%rd5, [reduce_min_small_f32_param_1];
	ld.param.u32 	%r7, [reduce_min_small_f32_param_3];
	ld.param.u32 	%r8, [reduce_min_small_f32_param_5];
	ld.param.u32 	%r9, [reduce_min_small_f32_param_6];
	ld.param.u32 	%r10, [reduce_min_small_f32_param_7];
	ld.param.u32 	%r11, [reduce_min_small_f32_param_8];
	ld.param.u32 	%r12, [reduce_min_small_f32_param_10];
	mov.u32 	%r1, %ctaid.z;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r13, %r1, %r11;
	mad.lo.s32 	%r14, %r2, %r12, %r13;
	cvta.to.global.u64 	%rd6, %rd5;
	mul.wide.u32 	%rd7, %r14, 4;
	add.s64 	%rd1, %rd6, %rd7;
	mov.u32 	%r3, %tid.x;
	setp.ge.s32 	%p1, %r3, %r7;
	mov.f32 	%f18, 0f7F800000;
	@%p1 bra 	$L__BB33_3;

	mov.u32 	%r4, %ntid.x;
	mul.lo.s32 	%r15, %r1, %r8;
	mad.lo.s32 	%r16, %r2, %r10, %r15;
	cvt.u64.u32 	%rd2, %r16;
	cvta.to.global.u64 	%rd3, %rd4;
	mov.f32 	%f18, 0f7F800000;
	mov.u32 	%r35, %r3;

$L__BB33_2:
	mul.lo.s32 	%r17, %r35, %r9;
	cvt.s64.s32 	%rd8, %r17;
	add.s64 	%rd9, %rd8, %rd2;
	shl.b64 	%rd10, %rd9, 2;
	add.s64 	%rd11, %rd3, %rd10;
	ld.global.f32 	%f7, [%rd11];
	min.f32 	%f18, %f18, %f7;
	add.s32 	%r35, %r35, %r4;
	setp.lt.s32 	%p2, %r35, %r7;
	@%p2 bra 	$L__BB33_2;

$L__BB33_3:
	mov.b32 	%r18, %f18;
	mov.u32 	%r19, 31;
	mov.u32 	%r20, 16;
	mov.u32 	%r21, -1;
	shfl.sync.bfly.b32 	%r22|%p3, %r18, %r20, %r19, %r21;
	mov.b32 	%f8, %r22;
	min.f32 	%f9, %f18, %f8;
	mov.b32 	%r23, %f9;
	mov.u32 	%r24, 8;
	shfl.sync.bfly.b32 	%r25|%p4, %r23, %r24, %r19, %r21;
	mov.b32 	%f10, %r25;
	min.f32 	%f11, %f9, %f10;
	mov.b32 	%r26, %f11;
	mov.u32 	%r27, 4;
	shfl.sync.bfly.b32 	%r28|%p5, %r26, %r27, %r19, %r21;
	mov.b32 	%f12, %r28;
	min.f32 	%f13, %f11, %f12;
	mov.b32 	%r29, %f13;
	mov.u32 	%r30, 2;
	shfl.sync.bfly.b32 	%r31|%p6, %r29, %r30, %r19, %r21;
	mov.b32 	%f14, %r31;
	min.f32 	%f15, %f13, %f14;
	mov.b32 	%r32, %f15;
	mov.u32 	%r33, 1;
	shfl.sync.bfly.b32 	%r34|%p7, %r32, %r33, %r19, %r21;
	mov.b32 	%f16, %r34;
	min.f32 	%f4, %f15, %f16;
	setp.ne.s32 	%p8, %r3, 0;
	@%p8 bra 	$L__BB33_5;

	st.global.f32 	[%rd1], %f4;

$L__BB33_5:
	ret;

}
	// .globl	reduce_sum_small_f32
.visible .entry reduce_sum_small_f32(
	.param .u64 reduce_sum_small_f32_param_0,
	.param .u64 reduce_sum_small_f32_param_1,
	.param .u32 reduce_sum_small_f32_param_2,
	.param .u32 reduce_sum_small_f32_param_3,
	.param .u32 reduce_sum_small_f32_param_4,
	.param .u32 reduce_sum_small_f32_param_5,
	.param .u32 reduce_sum_small_f32_param_6,
	.param .u32 reduce_sum_small_f32_param_7,
	.param .u32 reduce_sum_small_f32_param_8,
	.param .u32 reduce_sum_small_f32_param_9,
	.param .u32 reduce_sum_small_f32_param_10
)
{
	.reg .pred 	%p<9>;
	.reg .f32 	%f<19>;
	.reg .b32 	%r<36>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd4, [reduce_sum_small_f32_param_0];
	ld.param.u64 	%rd5, [reduce_sum_small_f32_param_1];
	ld.param.u32 	%r7, [reduce_sum_small_f32_param_3];
	ld.param.u32 	%r8, [reduce_sum_small_f32_param_5];
	ld.param.u32 	%r9, [reduce_sum_small_f32_param_6];
	ld.param.u32 	%r10, [reduce_sum_small_f32_param_7];
	ld.param.u32 	%r11, [reduce_sum_small_f32_param_8];
	ld.param.u32 	%r12, [reduce_sum_small_f32_param_10];
	mov.u32 	%r1, %ctaid.z;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r13, %r1, %r11;
	mad.lo.s32 	%r14, %r2, %r12, %r13;
	cvta.to.global.u64 	%rd6, %rd5;
	mul.wide.u32 	%rd7, %r14, 4;
	add.s64 	%rd1, %rd6, %rd7;
	mov.u32 	%r3, %tid.x;
	setp.ge.s32 	%p1, %r3, %r7;
	mov.f32 	%f18, 0f00000000;
	@%p1 bra 	$L__BB34_3;

	mov.u32 	%r4, %ntid.x;
	mul.lo.s32 	%r15, %r1, %r8;
	mad.lo.s32 	%r16, %r2, %r10, %r15;
	cvt.u64.u32 	%rd2, %r16;
	cvta.to.global.u64 	%rd3, %rd4;
	mov.f32 	%f18, 0f00000000;
	mov.u32 	%r35, %r3;

$L__BB34_2:
	mul.lo.s32 	%r17, %r35, %r9;
	cvt.s64.s32 	%rd8, %r17;
	add.s64 	%rd9, %rd8, %rd2;
	shl.b64 	%rd10, %rd9, 2;
	add.s64 	%rd11, %rd3, %rd10;
	ld.global.f32 	%f7, [%rd11];
	add.f32 	%f18, %f18, %f7;
	add.s32 	%r35, %r35, %r4;
	setp.lt.s32 	%p2, %r35, %r7;
	@%p2 bra 	$L__BB34_2;

$L__BB34_3:
	mov.b32 	%r18, %f18;
	mov.u32 	%r19, 31;
	mov.u32 	%r20, 16;
	mov.u32 	%r21, -1;
	shfl.sync.bfly.b32 	%r22|%p3, %r18, %r20, %r19, %r21;
	mov.b32 	%f8, %r22;
	add.f32 	%f9, %f18, %f8;
	mov.b32 	%r23, %f9;
	mov.u32 	%r24, 8;
	shfl.sync.bfly.b32 	%r25|%p4, %r23, %r24, %r19, %r21;
	mov.b32 	%f10, %r25;
	add.f32 	%f11, %f9, %f10;
	mov.b32 	%r26, %f11;
	mov.u32 	%r27, 4;
	shfl.sync.bfly.b32 	%r28|%p5, %r26, %r27, %r19, %r21;
	mov.b32 	%f12, %r28;
	add.f32 	%f13, %f11, %f12;
	mov.b32 	%r29, %f13;
	mov.u32 	%r30, 2;
	shfl.sync.bfly.b32 	%r31|%p6, %r29, %r30, %r19, %r21;
	mov.b32 	%f14, %r31;
	add.f32 	%f15, %f13, %f14;
	mov.b32 	%r32, %f15;
	mov.u32 	%r33, 1;
	shfl.sync.bfly.b32 	%r34|%p7, %r32, %r33, %r19, %r21;
	mov.b32 	%f16, %r34;
	add.f32 	%f4, %f15, %f16;
	setp.ne.s32 	%p8, %r3, 0;
	@%p8 bra 	$L__BB34_5;

	st.global.f32 	[%rd1], %f4;

$L__BB34_5:
	ret;

}
	// .globl	reduce_prod_small_f32
.visible .entry reduce_prod_small_f32(
	.param .u64 reduce_prod_small_f32_param_0,
	.param .u64 reduce_prod_small_f32_param_1,
	.param .u32 reduce_prod_small_f32_param_2,
	.param .u32 reduce_prod_small_f32_param_3,
	.param .u32 reduce_prod_small_f32_param_4,
	.param .u32 reduce_prod_small_f32_param_5,
	.param .u32 reduce_prod_small_f32_param_6,
	.param .u32 reduce_prod_small_f32_param_7,
	.param .u32 reduce_prod_small_f32_param_8,
	.param .u32 reduce_prod_small_f32_param_9,
	.param .u32 reduce_prod_small_f32_param_10
)
{
	.reg .pred 	%p<9>;
	.reg .f32 	%f<19>;
	.reg .b32 	%r<36>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd4, [reduce_prod_small_f32_param_0];
	ld.param.u64 	%rd5, [reduce_prod_small_f32_param_1];
	ld.param.u32 	%r7, [reduce_prod_small_f32_param_3];
	ld.param.u32 	%r8, [reduce_prod_small_f32_param_5];
	ld.param.u32 	%r9, [reduce_prod_small_f32_param_6];
	ld.param.u32 	%r10, [reduce_prod_small_f32_param_7];
	ld.param.u32 	%r11, [reduce_prod_small_f32_param_8];
	ld.param.u32 	%r12, [reduce_prod_small_f32_param_10];
	mov.u32 	%r1, %ctaid.z;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r13, %r1, %r11;
	mad.lo.s32 	%r14, %r2, %r12, %r13;
	cvta.to.global.u64 	%rd6, %rd5;
	mul.wide.u32 	%rd7, %r14, 4;
	add.s64 	%rd1, %rd6, %rd7;
	mov.u32 	%r3, %tid.x;
	setp.ge.s32 	%p1, %r3, %r7;
	mov.f32 	%f18, 0f3F800000;
	@%p1 bra 	$L__BB35_3;

	mov.u32 	%r4, %ntid.x;
	mul.lo.s32 	%r15, %r1, %r8;
	mad.lo.s32 	%r16, %r2, %r10, %r15;
	cvt.u64.u32 	%rd2, %r16;
	cvta.to.global.u64 	%rd3, %rd4;
	mov.f32 	%f18, 0f3F800000;
	mov.u32 	%r35, %r3;

$L__BB35_2:
	mul.lo.s32 	%r17, %r35, %r9;
	cvt.s64.s32 	%rd8, %r17;
	add.s64 	%rd9, %rd8, %rd2;
	shl.b64 	%rd10, %rd9, 2;
	add.s64 	%rd11, %rd3, %rd10;
	ld.global.f32 	%f7, [%rd11];
	mul.f32 	%f18, %f18, %f7;
	add.s32 	%r35, %r35, %r4;
	setp.lt.s32 	%p2, %r35, %r7;
	@%p2 bra 	$L__BB35_2;

$L__BB35_3:
	mov.b32 	%r18, %f18;
	mov.u32 	%r19, 31;
	mov.u32 	%r20, 16;
	mov.u32 	%r21, -1;
	shfl.sync.bfly.b32 	%r22|%p3, %r18, %r20, %r19, %r21;
	mov.b32 	%f8, %r22;
	mul.f32 	%f9, %f18, %f8;
	mov.b32 	%r23, %f9;
	mov.u32 	%r24, 8;
	shfl.sync.bfly.b32 	%r25|%p4, %r23, %r24, %r19, %r21;
	mov.b32 	%f10, %r25;
	mul.f32 	%f11, %f9, %f10;
	mov.b32 	%r26, %f11;
	mov.u32 	%r27, 4;
	shfl.sync.bfly.b32 	%r28|%p5, %r26, %r27, %r19, %r21;
	mov.b32 	%f12, %r28;
	mul.f32 	%f13, %f11, %f12;
	mov.b32 	%r29, %f13;
	mov.u32 	%r30, 2;
	shfl.sync.bfly.b32 	%r31|%p6, %r29, %r30, %r19, %r21;
	mov.b32 	%f14, %r31;
	mul.f32 	%f15, %f13, %f14;
	mov.b32 	%r32, %f15;
	mov.u32 	%r33, 1;
	shfl.sync.bfly.b32 	%r34|%p7, %r32, %r33, %r19, %r21;
	mov.b32 	%f16, %r34;
	mul.f32 	%f4, %f15, %f16;
	setp.ne.s32 	%p8, %r3, 0;
	@%p8 bra 	$L__BB35_5;

	st.global.f32 	[%rd1], %f4;

$L__BB35_5:
	ret;

}
	// .globl	reduce_mean_of_squares_small_f32
.visible .entry reduce_mean_of_squares_small_f32(
	.param .u64 reduce_mean_of_squares_small_f32_param_0,
	.param .u64 reduce_mean_of_squares_small_f32_param_1,
	.param .u32 reduce_mean_of_squares_small_f32_param_2,
	.param .u32 reduce_mean_of_squares_small_f32_param_3,
	.param .u32 reduce_mean_of_squares_small_f32_param_4,
	.param .u32 reduce_mean_of_squares_small_f32_param_5,
	.param .u32 reduce_mean_of_squares_small_f32_param_6,
	.param .u32 reduce_mean_of_squares_small_f32_param_7,
	.param .u32 reduce_mean_of_squares_small_f32_param_8,
	.param .u32 reduce_mean_of_squares_small_f32_param_9,
	.param .u32 reduce_mean_of_squares_small_f32_param_10
)
{
	.reg .pred 	%p<9>;
	.reg .f32 	%f<21>;
	.reg .b32 	%r<36>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd4, [reduce_mean_of_squares_small_f32_param_0];
	ld.param.u64 	%rd5, [reduce_mean_of_squares_small_f32_param_1];
	ld.param.u32 	%r7, [reduce_mean_of_squares_small_f32_param_3];
	ld.param.u32 	%r8, [reduce_mean_of_squares_small_f32_param_5];
	ld.param.u32 	%r9, [reduce_mean_of_squares_small_f32_param_6];
	ld.param.u32 	%r10, [reduce_mean_of_squares_small_f32_param_7];
	ld.param.u32 	%r11, [reduce_mean_of_squares_small_f32_param_8];
	ld.param.u32 	%r12, [reduce_mean_of_squares_small_f32_param_10];
	mov.u32 	%r1, %ctaid.z;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	setp.ge.s32 	%p1, %r3, %r7;
	mov.f32 	%f20, 0f00000000;
	@%p1 bra 	$L__BB36_3;

	mov.u32 	%r4, %ntid.x;
	mul.lo.s32 	%r13, %r1, %r8;
	mad.lo.s32 	%r14, %r2, %r10, %r13;
	cvt.u64.u32 	%rd1, %r14;
	cvta.to.global.u64 	%rd2, %rd4;
	mov.f32 	%f20, 0f00000000;
	mov.u32 	%r35, %r3;

$L__BB36_2:
	mul.lo.s32 	%r15, %r35, %r9;
	cvt.s64.s32 	%rd6, %r15;
	add.s64 	%rd7, %rd6, %rd1;
	shl.b64 	%rd8, %rd7, 2;
	add.s64 	%rd9, %rd2, %rd8;
	ld.global.f32 	%f7, [%rd9];
	fma.rn.f32 	%f20, %f7, %f7, %f20;
	add.s32 	%r35, %r35, %r4;
	setp.lt.s32 	%p2, %r35, %r7;
	@%p2 bra 	$L__BB36_2;

$L__BB36_3:
	mov.b32 	%r16, %f20;
	mov.u32 	%r17, 31;
	mov.u32 	%r18, 16;
	mov.u32 	%r19, -1;
	shfl.sync.bfly.b32 	%r20|%p3, %r16, %r18, %r17, %r19;
	mov.b32 	%f8, %r20;
	add.f32 	%f9, %f20, %f8;
	mov.b32 	%r21, %f9;
	mov.u32 	%r22, 8;
	shfl.sync.bfly.b32 	%r23|%p4, %r21, %r22, %r17, %r19;
	mov.b32 	%f10, %r23;
	add.f32 	%f11, %f9, %f10;
	mov.b32 	%r24, %f11;
	mov.u32 	%r25, 4;
	shfl.sync.bfly.b32 	%r26|%p5, %r24, %r25, %r17, %r19;
	mov.b32 	%f12, %r26;
	add.f32 	%f13, %f11, %f12;
	mov.b32 	%r27, %f13;
	mov.u32 	%r28, 2;
	shfl.sync.bfly.b32 	%r29|%p6, %r27, %r28, %r17, %r19;
	mov.b32 	%f14, %r29;
	add.f32 	%f15, %f13, %f14;
	mov.b32 	%r30, %f15;
	mov.u32 	%r31, 1;
	shfl.sync.bfly.b32 	%r32|%p7, %r30, %r31, %r17, %r19;
	mov.b32 	%f16, %r32;
	add.f32 	%f4, %f15, %f16;
	setp.ne.s32 	%p8, %r3, 0;
	cvta.to.global.u64 	%rd10, %rd5;
	mul.lo.s32 	%r33, %r1, %r11;
	mad.lo.s32 	%r34, %r2, %r12, %r33;
	mul.wide.u32 	%rd11, %r34, 4;
	add.s64 	%rd3, %rd10, %rd11;
	@%p8 bra 	$L__BB36_5;

	cvt.rn.f32.s32 	%f17, %r7;
	div.rn.f32 	%f18, %f4, %f17;
	st.global.f32 	[%rd3], %f18;

$L__BB36_5:
	ret;

}
	// .globl	reduce_max_f32
.visible .entry reduce_max_f32(
	.param .u64 reduce_max_f32_param_0,
	.param .u64 reduce_max_f32_param_1,
	.param .u32 reduce_max_f32_param_2,
	.param .u32 reduce_max_f32_param_3,
	.param .u32 reduce_max_f32_param_4,
	.param .u32 reduce_max_f32_param_5,
	.param .u32 reduce_max_f32_param_6,
	.param .u32 reduce_max_f32_param_7,
	.param .u32 reduce_max_f32_param_8,
	.param .u32 reduce_max_f32_param_9,
	.param .u32 reduce_max_f32_param_10
)
{
	.reg .pred 	%p<16>;
	.reg .f32 	%f<30>;
	.reg .b32 	%r<62>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 _ZZ14reduce_max_f32E5s_max[128];

	ld.param.u64 	%rd4, [reduce_max_f32_param_0];
	ld.param.u64 	%rd5, [reduce_max_f32_param_1];
	ld.param.u32 	%r10, [reduce_max_f32_param_3];
	ld.param.u32 	%r11, [reduce_max_f32_param_5];
	ld.param.u32 	%r12, [reduce_max_f32_param_6];
	ld.param.u32 	%r13, [reduce_max_f32_param_7];
	ld.param.u32 	%r14, [reduce_max_f32_param_8];
	ld.param.u32 	%r15, [reduce_max_f32_param_10];
	mov.u32 	%r1, %ctaid.z;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r16, %r1, %r14;
	mad.lo.s32 	%r17, %r2, %r15, %r16;
	cvta.to.global.u64 	%rd6, %rd5;
	mul.wide.u32 	%rd7, %r17, 4;
	add.s64 	%rd1, %rd6, %rd7;
	mov.u32 	%r3, %tid.x;
	shr.u32 	%r4, %r3, 5;
	and.b32  	%r5, %r3, 31;
	setp.ge.s32 	%p1, %r3, %r10;
	mov.f32 	%f29, 0fFF800000;
	@%p1 bra 	$L__BB37_3;

	mov.u32 	%r6, %ntid.x;
	mul.lo.s32 	%r18, %r1, %r11;
	mad.lo.s32 	%r19, %r2, %r13, %r18;
	cvt.u64.u32 	%rd2, %r19;
	cvta.to.global.u64 	%rd3, %rd4;
	mov.f32 	%f29, 0fFF800000;
	mov.u32 	%r61, %r3;

$L__BB37_2:
	mul.lo.s32 	%r20, %r61, %r12;
	cvt.s64.s32 	%rd8, %r20;
	add.s64 	%rd9, %rd8, %rd2;
	shl.b64 	%rd10, %rd9, 2;
	add.s64 	%rd11, %rd3, %rd10;
	ld.global.f32 	%f8, [%rd11];
	max.f32 	%f29, %f29, %f8;
	add.s32 	%r61, %r61, %r6;
	setp.lt.s32 	%p2, %r61, %r10;
	@%p2 bra 	$L__BB37_2;

$L__BB37_3:
	mov.b32 	%r21, %f29;
	mov.u32 	%r22, 31;
	mov.u32 	%r23, 16;
	mov.u32 	%r24, -1;
	shfl.sync.bfly.b32 	%r25|%p3, %r21, %r23, %r22, %r24;
	mov.b32 	%f9, %r25;
	max.f32 	%f10, %f29, %f9;
	mov.b32 	%r26, %f10;
	mov.u32 	%r27, 8;
	shfl.sync.bfly.b32 	%r28|%p4, %r26, %r27, %r22, %r24;
	mov.b32 	%f11, %r28;
	max.f32 	%f12, %f10, %f11;
	mov.b32 	%r29, %f12;
	mov.u32 	%r30, 4;
	shfl.sync.bfly.b32 	%r31|%p5, %r29, %r30, %r22, %r24;
	mov.b32 	%f13, %r31;
	max.f32 	%f14, %f12, %f13;
	mov.b32 	%r32, %f14;
	mov.u32 	%r33, 2;
	shfl.sync.bfly.b32 	%r34|%p6, %r32, %r33, %r22, %r24;
	mov.b32 	%f15, %r34;
	max.f32 	%f16, %f14, %f15;
	mov.b32 	%r35, %f16;
	mov.u32 	%r36, 1;
	shfl.sync.bfly.b32 	%r37|%p7, %r35, %r36, %r22, %r24;
	mov.b32 	%f17, %r37;
	max.f32 	%f4, %f16, %f17;
	shl.b32 	%r38, %r5, 2;
	mov.u32 	%r39, _ZZ14reduce_max_f32E5s_max;
	add.s32 	%r9, %r39, %r38;
	setp.ne.s32 	%p8, %r4, 0;
	@%p8 bra 	$L__BB37_5;

	mov.u32 	%r40, -8388608;
	st.shared.u32 	[%r9], %r40;

$L__BB37_5:
	bar.sync 	0;
	setp.ne.s32 	%p9, %r5, 0;
	@%p9 bra 	$L__BB37_7;

	shl.b32 	%r41, %r4, 2;
	add.s32 	%r43, %r39, %r41;
	st.shared.f32 	[%r43], %f4;

$L__BB37_7:
	bar.sync 	0;
	ld.shared.f32 	%f18, [%r9];
	mov.b32 	%r44, %f18;
	mov.u32 	%r45, 31;
	mov.u32 	%r46, 16;
	mov.u32 	%r47, -1;
	shfl.sync.bfly.b32 	%r48|%p10, %r44, %r46, %r45, %r47;
	mov.b32 	%f19, %r48;
	max.f32 	%f20, %f18, %f19;
	mov.b32 	%r49, %f20;
	mov.u32 	%r50, 8;
	shfl.sync.bfly.b32 	%r51|%p11, %r49, %r50, %r45, %r47;
	mov.b32 	%f21, %r51;
	max.f32 	%f22, %f20, %f21;
	mov.b32 	%r52, %f22;
	mov.u32 	%r53, 4;
	shfl.sync.bfly.b32 	%r54|%p12, %r52, %r53, %r45, %r47;
	mov.b32 	%f23, %r54;
	max.f32 	%f24, %f22, %f23;
	mov.b32 	%r55, %f24;
	mov.u32 	%r56, 2;
	shfl.sync.bfly.b32 	%r57|%p13, %r55, %r56, %r45, %r47;
	mov.b32 	%f25, %r57;
	max.f32 	%f26, %f24, %f25;
	mov.b32 	%r58, %f26;
	mov.u32 	%r59, 1;
	shfl.sync.bfly.b32 	%r60|%p14, %r58, %r59, %r45, %r47;
	mov.b32 	%f27, %r60;
	max.f32 	%f5, %f26, %f27;
	setp.ne.s32 	%p15, %r3, 0;
	@%p15 bra 	$L__BB37_9;

	st.global.f32 	[%rd1], %f5;

$L__BB37_9:
	ret;

}
	// .globl	reduce_min_f32
.visible .entry reduce_min_f32(
	.param .u64 reduce_min_f32_param_0,
	.param .u64 reduce_min_f32_param_1,
	.param .u32 reduce_min_f32_param_2,
	.param .u32 reduce_min_f32_param_3,
	.param .u32 reduce_min_f32_param_4,
	.param .u32 reduce_min_f32_param_5,
	.param .u32 reduce_min_f32_param_6,
	.param .u32 reduce_min_f32_param_7,
	.param .u32 reduce_min_f32_param_8,
	.param .u32 reduce_min_f32_param_9,
	.param .u32 reduce_min_f32_param_10
)
{
	.reg .pred 	%p<16>;
	.reg .f32 	%f<30>;
	.reg .b32 	%r<62>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 _ZZ14reduce_min_f32E5s_min[128];

	ld.param.u64 	%rd4, [reduce_min_f32_param_0];
	ld.param.u64 	%rd5, [reduce_min_f32_param_1];
	ld.param.u32 	%r10, [reduce_min_f32_param_3];
	ld.param.u32 	%r11, [reduce_min_f32_param_5];
	ld.param.u32 	%r12, [reduce_min_f32_param_6];
	ld.param.u32 	%r13, [reduce_min_f32_param_7];
	ld.param.u32 	%r14, [reduce_min_f32_param_8];
	ld.param.u32 	%r15, [reduce_min_f32_param_10];
	mov.u32 	%r1, %ctaid.z;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r16, %r1, %r14;
	mad.lo.s32 	%r17, %r2, %r15, %r16;
	cvta.to.global.u64 	%rd6, %rd5;
	mul.wide.u32 	%rd7, %r17, 4;
	add.s64 	%rd1, %rd6, %rd7;
	mov.u32 	%r3, %tid.x;
	shr.u32 	%r4, %r3, 5;
	and.b32  	%r5, %r3, 31;
	setp.ge.s32 	%p1, %r3, %r10;
	mov.f32 	%f29, 0f7F800000;
	@%p1 bra 	$L__BB38_3;

	mov.u32 	%r6, %ntid.x;
	mul.lo.s32 	%r18, %r1, %r11;
	mad.lo.s32 	%r19, %r2, %r13, %r18;
	cvt.u64.u32 	%rd2, %r19;
	cvta.to.global.u64 	%rd3, %rd4;
	mov.f32 	%f29, 0f7F800000;
	mov.u32 	%r61, %r3;

$L__BB38_2:
	mul.lo.s32 	%r20, %r61, %r12;
	cvt.s64.s32 	%rd8, %r20;
	add.s64 	%rd9, %rd8, %rd2;
	shl.b64 	%rd10, %rd9, 2;
	add.s64 	%rd11, %rd3, %rd10;
	ld.global.f32 	%f8, [%rd11];
	min.f32 	%f29, %f29, %f8;
	add.s32 	%r61, %r61, %r6;
	setp.lt.s32 	%p2, %r61, %r10;
	@%p2 bra 	$L__BB38_2;

$L__BB38_3:
	mov.b32 	%r21, %f29;
	mov.u32 	%r22, 31;
	mov.u32 	%r23, 16;
	mov.u32 	%r24, -1;
	shfl.sync.bfly.b32 	%r25|%p3, %r21, %r23, %r22, %r24;
	mov.b32 	%f9, %r25;
	min.f32 	%f10, %f29, %f9;
	mov.b32 	%r26, %f10;
	mov.u32 	%r27, 8;
	shfl.sync.bfly.b32 	%r28|%p4, %r26, %r27, %r22, %r24;
	mov.b32 	%f11, %r28;
	min.f32 	%f12, %f10, %f11;
	mov.b32 	%r29, %f12;
	mov.u32 	%r30, 4;
	shfl.sync.bfly.b32 	%r31|%p5, %r29, %r30, %r22, %r24;
	mov.b32 	%f13, %r31;
	min.f32 	%f14, %f12, %f13;
	mov.b32 	%r32, %f14;
	mov.u32 	%r33, 2;
	shfl.sync.bfly.b32 	%r34|%p6, %r32, %r33, %r22, %r24;
	mov.b32 	%f15, %r34;
	min.f32 	%f16, %f14, %f15;
	mov.b32 	%r35, %f16;
	mov.u32 	%r36, 1;
	shfl.sync.bfly.b32 	%r37|%p7, %r35, %r36, %r22, %r24;
	mov.b32 	%f17, %r37;
	min.f32 	%f4, %f16, %f17;
	shl.b32 	%r38, %r5, 2;
	mov.u32 	%r39, _ZZ14reduce_min_f32E5s_min;
	add.s32 	%r9, %r39, %r38;
	setp.ne.s32 	%p8, %r4, 0;
	@%p8 bra 	$L__BB38_5;

	mov.u32 	%r40, -8388608;
	st.shared.u32 	[%r9], %r40;

$L__BB38_5:
	bar.sync 	0;
	setp.ne.s32 	%p9, %r5, 0;
	@%p9 bra 	$L__BB38_7;

	shl.b32 	%r41, %r4, 2;
	add.s32 	%r43, %r39, %r41;
	st.shared.f32 	[%r43], %f4;

$L__BB38_7:
	bar.sync 	0;
	ld.shared.f32 	%f18, [%r9];
	mov.b32 	%r44, %f18;
	mov.u32 	%r45, 31;
	mov.u32 	%r46, 16;
	mov.u32 	%r47, -1;
	shfl.sync.bfly.b32 	%r48|%p10, %r44, %r46, %r45, %r47;
	mov.b32 	%f19, %r48;
	min.f32 	%f20, %f18, %f19;
	mov.b32 	%r49, %f20;
	mov.u32 	%r50, 8;
	shfl.sync.bfly.b32 	%r51|%p11, %r49, %r50, %r45, %r47;
	mov.b32 	%f21, %r51;
	min.f32 	%f22, %f20, %f21;
	mov.b32 	%r52, %f22;
	mov.u32 	%r53, 4;
	shfl.sync.bfly.b32 	%r54|%p12, %r52, %r53, %r45, %r47;
	mov.b32 	%f23, %r54;
	min.f32 	%f24, %f22, %f23;
	mov.b32 	%r55, %f24;
	mov.u32 	%r56, 2;
	shfl.sync.bfly.b32 	%r57|%p13, %r55, %r56, %r45, %r47;
	mov.b32 	%f25, %r57;
	min.f32 	%f26, %f24, %f25;
	mov.b32 	%r58, %f26;
	mov.u32 	%r59, 1;
	shfl.sync.bfly.b32 	%r60|%p14, %r58, %r59, %r45, %r47;
	mov.b32 	%f27, %r60;
	min.f32 	%f5, %f26, %f27;
	setp.ne.s32 	%p15, %r3, 0;
	@%p15 bra 	$L__BB38_9;

	st.global.f32 	[%rd1], %f5;

$L__BB38_9:
	ret;

}
	// .globl	reduce_sum_f32
.visible .entry reduce_sum_f32(
	.param .u64 reduce_sum_f32_param_0,
	.param .u64 reduce_sum_f32_param_1,
	.param .u32 reduce_sum_f32_param_2,
	.param .u32 reduce_sum_f32_param_3,
	.param .u32 reduce_sum_f32_param_4,
	.param .u32 reduce_sum_f32_param_5,
	.param .u32 reduce_sum_f32_param_6,
	.param .u32 reduce_sum_f32_param_7,
	.param .u32 reduce_sum_f32_param_8,
	.param .u32 reduce_sum_f32_param_9,
	.param .u32 reduce_sum_f32_param_10
)
{
	.reg .pred 	%p<16>;
	.reg .f32 	%f<30>;
	.reg .b32 	%r<62>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 _ZZ14reduce_sum_f32E5s_sum[128];

	ld.param.u64 	%rd4, [reduce_sum_f32_param_0];
	ld.param.u64 	%rd5, [reduce_sum_f32_param_1];
	ld.param.u32 	%r10, [reduce_sum_f32_param_3];
	ld.param.u32 	%r11, [reduce_sum_f32_param_5];
	ld.param.u32 	%r12, [reduce_sum_f32_param_6];
	ld.param.u32 	%r13, [reduce_sum_f32_param_7];
	ld.param.u32 	%r14, [reduce_sum_f32_param_8];
	ld.param.u32 	%r15, [reduce_sum_f32_param_10];
	mov.u32 	%r1, %ctaid.z;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r16, %r1, %r14;
	mad.lo.s32 	%r17, %r2, %r15, %r16;
	cvta.to.global.u64 	%rd6, %rd5;
	mul.wide.u32 	%rd7, %r17, 4;
	add.s64 	%rd1, %rd6, %rd7;
	mov.u32 	%r3, %tid.x;
	shr.u32 	%r4, %r3, 5;
	and.b32  	%r5, %r3, 31;
	setp.ge.s32 	%p1, %r3, %r10;
	mov.f32 	%f29, 0f00000000;
	@%p1 bra 	$L__BB39_3;

	mov.u32 	%r6, %ntid.x;
	mul.lo.s32 	%r18, %r1, %r11;
	mad.lo.s32 	%r19, %r2, %r13, %r18;
	cvt.u64.u32 	%rd2, %r19;
	cvta.to.global.u64 	%rd3, %rd4;
	mov.f32 	%f29, 0f00000000;
	mov.u32 	%r61, %r3;

$L__BB39_2:
	mul.lo.s32 	%r20, %r61, %r12;
	cvt.s64.s32 	%rd8, %r20;
	add.s64 	%rd9, %rd8, %rd2;
	shl.b64 	%rd10, %rd9, 2;
	add.s64 	%rd11, %rd3, %rd10;
	ld.global.f32 	%f8, [%rd11];
	add.f32 	%f29, %f29, %f8;
	add.s32 	%r61, %r61, %r6;
	setp.lt.s32 	%p2, %r61, %r10;
	@%p2 bra 	$L__BB39_2;

$L__BB39_3:
	mov.b32 	%r21, %f29;
	mov.u32 	%r22, 31;
	mov.u32 	%r23, 16;
	mov.u32 	%r24, -1;
	shfl.sync.bfly.b32 	%r25|%p3, %r21, %r23, %r22, %r24;
	mov.b32 	%f9, %r25;
	add.f32 	%f10, %f29, %f9;
	mov.b32 	%r26, %f10;
	mov.u32 	%r27, 8;
	shfl.sync.bfly.b32 	%r28|%p4, %r26, %r27, %r22, %r24;
	mov.b32 	%f11, %r28;
	add.f32 	%f12, %f10, %f11;
	mov.b32 	%r29, %f12;
	mov.u32 	%r30, 4;
	shfl.sync.bfly.b32 	%r31|%p5, %r29, %r30, %r22, %r24;
	mov.b32 	%f13, %r31;
	add.f32 	%f14, %f12, %f13;
	mov.b32 	%r32, %f14;
	mov.u32 	%r33, 2;
	shfl.sync.bfly.b32 	%r34|%p6, %r32, %r33, %r22, %r24;
	mov.b32 	%f15, %r34;
	add.f32 	%f16, %f14, %f15;
	mov.b32 	%r35, %f16;
	mov.u32 	%r36, 1;
	shfl.sync.bfly.b32 	%r37|%p7, %r35, %r36, %r22, %r24;
	mov.b32 	%f17, %r37;
	add.f32 	%f4, %f16, %f17;
	shl.b32 	%r38, %r5, 2;
	mov.u32 	%r39, _ZZ14reduce_sum_f32E5s_sum;
	add.s32 	%r9, %r39, %r38;
	setp.ne.s32 	%p8, %r4, 0;
	@%p8 bra 	$L__BB39_5;

	mov.u32 	%r40, 0;
	st.shared.u32 	[%r9], %r40;

$L__BB39_5:
	bar.sync 	0;
	setp.ne.s32 	%p9, %r5, 0;
	@%p9 bra 	$L__BB39_7;

	shl.b32 	%r41, %r4, 2;
	add.s32 	%r43, %r39, %r41;
	st.shared.f32 	[%r43], %f4;

$L__BB39_7:
	bar.sync 	0;
	ld.shared.f32 	%f18, [%r9];
	mov.b32 	%r44, %f18;
	mov.u32 	%r45, 31;
	mov.u32 	%r46, 16;
	mov.u32 	%r47, -1;
	shfl.sync.bfly.b32 	%r48|%p10, %r44, %r46, %r45, %r47;
	mov.b32 	%f19, %r48;
	add.f32 	%f20, %f18, %f19;
	mov.b32 	%r49, %f20;
	mov.u32 	%r50, 8;
	shfl.sync.bfly.b32 	%r51|%p11, %r49, %r50, %r45, %r47;
	mov.b32 	%f21, %r51;
	add.f32 	%f22, %f20, %f21;
	mov.b32 	%r52, %f22;
	mov.u32 	%r53, 4;
	shfl.sync.bfly.b32 	%r54|%p12, %r52, %r53, %r45, %r47;
	mov.b32 	%f23, %r54;
	add.f32 	%f24, %f22, %f23;
	mov.b32 	%r55, %f24;
	mov.u32 	%r56, 2;
	shfl.sync.bfly.b32 	%r57|%p13, %r55, %r56, %r45, %r47;
	mov.b32 	%f25, %r57;
	add.f32 	%f26, %f24, %f25;
	mov.b32 	%r58, %f26;
	mov.u32 	%r59, 1;
	shfl.sync.bfly.b32 	%r60|%p14, %r58, %r59, %r45, %r47;
	mov.b32 	%f27, %r60;
	add.f32 	%f5, %f26, %f27;
	setp.ne.s32 	%p15, %r3, 0;
	@%p15 bra 	$L__BB39_9;

	st.global.f32 	[%rd1], %f5;

$L__BB39_9:
	ret;

}
	// .globl	reduce_prod_f32
.visible .entry reduce_prod_f32(
	.param .u64 reduce_prod_f32_param_0,
	.param .u64 reduce_prod_f32_param_1,
	.param .u32 reduce_prod_f32_param_2,
	.param .u32 reduce_prod_f32_param_3,
	.param .u32 reduce_prod_f32_param_4,
	.param .u32 reduce_prod_f32_param_5,
	.param .u32 reduce_prod_f32_param_6,
	.param .u32 reduce_prod_f32_param_7,
	.param .u32 reduce_prod_f32_param_8,
	.param .u32 reduce_prod_f32_param_9,
	.param .u32 reduce_prod_f32_param_10
)
{
	.reg .pred 	%p<16>;
	.reg .f32 	%f<30>;
	.reg .b32 	%r<62>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 _ZZ15reduce_prod_f32E6s_prod[128];

	ld.param.u64 	%rd4, [reduce_prod_f32_param_0];
	ld.param.u64 	%rd5, [reduce_prod_f32_param_1];
	ld.param.u32 	%r10, [reduce_prod_f32_param_3];
	ld.param.u32 	%r11, [reduce_prod_f32_param_5];
	ld.param.u32 	%r12, [reduce_prod_f32_param_6];
	ld.param.u32 	%r13, [reduce_prod_f32_param_7];
	ld.param.u32 	%r14, [reduce_prod_f32_param_8];
	ld.param.u32 	%r15, [reduce_prod_f32_param_10];
	mov.u32 	%r1, %ctaid.z;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r16, %r1, %r14;
	mad.lo.s32 	%r17, %r2, %r15, %r16;
	cvta.to.global.u64 	%rd6, %rd5;
	mul.wide.u32 	%rd7, %r17, 4;
	add.s64 	%rd1, %rd6, %rd7;
	mov.u32 	%r3, %tid.x;
	shr.u32 	%r4, %r3, 5;
	and.b32  	%r5, %r3, 31;
	setp.ge.s32 	%p1, %r3, %r10;
	mov.f32 	%f29, 0f3F800000;
	@%p1 bra 	$L__BB40_3;

	mov.u32 	%r6, %ntid.x;
	mul.lo.s32 	%r18, %r1, %r11;
	mad.lo.s32 	%r19, %r2, %r13, %r18;
	cvt.u64.u32 	%rd2, %r19;
	cvta.to.global.u64 	%rd3, %rd4;
	mov.f32 	%f29, 0f3F800000;
	mov.u32 	%r61, %r3;

$L__BB40_2:
	mul.lo.s32 	%r20, %r61, %r12;
	cvt.s64.s32 	%rd8, %r20;
	add.s64 	%rd9, %rd8, %rd2;
	shl.b64 	%rd10, %rd9, 2;
	add.s64 	%rd11, %rd3, %rd10;
	ld.global.f32 	%f8, [%rd11];
	mul.f32 	%f29, %f29, %f8;
	add.s32 	%r61, %r61, %r6;
	setp.lt.s32 	%p2, %r61, %r10;
	@%p2 bra 	$L__BB40_2;

$L__BB40_3:
	mov.b32 	%r21, %f29;
	mov.u32 	%r22, 31;
	mov.u32 	%r23, 16;
	mov.u32 	%r24, -1;
	shfl.sync.bfly.b32 	%r25|%p3, %r21, %r23, %r22, %r24;
	mov.b32 	%f9, %r25;
	mul.f32 	%f10, %f29, %f9;
	mov.b32 	%r26, %f10;
	mov.u32 	%r27, 8;
	shfl.sync.bfly.b32 	%r28|%p4, %r26, %r27, %r22, %r24;
	mov.b32 	%f11, %r28;
	mul.f32 	%f12, %f10, %f11;
	mov.b32 	%r29, %f12;
	mov.u32 	%r30, 4;
	shfl.sync.bfly.b32 	%r31|%p5, %r29, %r30, %r22, %r24;
	mov.b32 	%f13, %r31;
	mul.f32 	%f14, %f12, %f13;
	mov.b32 	%r32, %f14;
	mov.u32 	%r33, 2;
	shfl.sync.bfly.b32 	%r34|%p6, %r32, %r33, %r22, %r24;
	mov.b32 	%f15, %r34;
	mul.f32 	%f16, %f14, %f15;
	mov.b32 	%r35, %f16;
	mov.u32 	%r36, 1;
	shfl.sync.bfly.b32 	%r37|%p7, %r35, %r36, %r22, %r24;
	mov.b32 	%f17, %r37;
	mul.f32 	%f4, %f16, %f17;
	shl.b32 	%r38, %r5, 2;
	mov.u32 	%r39, _ZZ15reduce_prod_f32E6s_prod;
	add.s32 	%r9, %r39, %r38;
	setp.ne.s32 	%p8, %r4, 0;
	@%p8 bra 	$L__BB40_5;

	mov.u32 	%r40, 0;
	st.shared.u32 	[%r9], %r40;

$L__BB40_5:
	bar.sync 	0;
	setp.ne.s32 	%p9, %r5, 0;
	@%p9 bra 	$L__BB40_7;

	shl.b32 	%r41, %r4, 2;
	add.s32 	%r43, %r39, %r41;
	st.shared.f32 	[%r43], %f4;

$L__BB40_7:
	bar.sync 	0;
	ld.shared.f32 	%f18, [%r9];
	mov.b32 	%r44, %f18;
	mov.u32 	%r45, 31;
	mov.u32 	%r46, 16;
	mov.u32 	%r47, -1;
	shfl.sync.bfly.b32 	%r48|%p10, %r44, %r46, %r45, %r47;
	mov.b32 	%f19, %r48;
	mul.f32 	%f20, %f18, %f19;
	mov.b32 	%r49, %f20;
	mov.u32 	%r50, 8;
	shfl.sync.bfly.b32 	%r51|%p11, %r49, %r50, %r45, %r47;
	mov.b32 	%f21, %r51;
	mul.f32 	%f22, %f20, %f21;
	mov.b32 	%r52, %f22;
	mov.u32 	%r53, 4;
	shfl.sync.bfly.b32 	%r54|%p12, %r52, %r53, %r45, %r47;
	mov.b32 	%f23, %r54;
	mul.f32 	%f24, %f22, %f23;
	mov.b32 	%r55, %f24;
	mov.u32 	%r56, 2;
	shfl.sync.bfly.b32 	%r57|%p13, %r55, %r56, %r45, %r47;
	mov.b32 	%f25, %r57;
	mul.f32 	%f26, %f24, %f25;
	mov.b32 	%r58, %f26;
	mov.u32 	%r59, 1;
	shfl.sync.bfly.b32 	%r60|%p14, %r58, %r59, %r45, %r47;
	mov.b32 	%f27, %r60;
	mul.f32 	%f5, %f26, %f27;
	setp.ne.s32 	%p15, %r3, 0;
	@%p15 bra 	$L__BB40_9;

	st.global.f32 	[%rd1], %f5;

$L__BB40_9:
	ret;

}
	// .globl	reduce_mean_of_squares_f32
.visible .entry reduce_mean_of_squares_f32(
	.param .u64 reduce_mean_of_squares_f32_param_0,
	.param .u64 reduce_mean_of_squares_f32_param_1,
	.param .u32 reduce_mean_of_squares_f32_param_2,
	.param .u32 reduce_mean_of_squares_f32_param_3,
	.param .u32 reduce_mean_of_squares_f32_param_4,
	.param .u32 reduce_mean_of_squares_f32_param_5,
	.param .u32 reduce_mean_of_squares_f32_param_6,
	.param .u32 reduce_mean_of_squares_f32_param_7,
	.param .u32 reduce_mean_of_squares_f32_param_8,
	.param .u32 reduce_mean_of_squares_f32_param_9,
	.param .u32 reduce_mean_of_squares_f32_param_10
)
{
	.reg .pred 	%p<16>;
	.reg .f32 	%f<32>;
	.reg .b32 	%r<62>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 _ZZ26reduce_mean_of_squares_f32E6s_prod[128];

	ld.param.u64 	%rd4, [reduce_mean_of_squares_f32_param_0];
	ld.param.u64 	%rd5, [reduce_mean_of_squares_f32_param_1];
	ld.param.u32 	%r10, [reduce_mean_of_squares_f32_param_3];
	ld.param.u32 	%r11, [reduce_mean_of_squares_f32_param_5];
	ld.param.u32 	%r12, [reduce_mean_of_squares_f32_param_6];
	ld.param.u32 	%r13, [reduce_mean_of_squares_f32_param_7];
	ld.param.u32 	%r14, [reduce_mean_of_squares_f32_param_8];
	ld.param.u32 	%r15, [reduce_mean_of_squares_f32_param_10];
	mov.u32 	%r1, %ctaid.z;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	shr.u32 	%r4, %r3, 5;
	and.b32  	%r5, %r3, 31;
	setp.ge.s32 	%p1, %r3, %r10;
	mov.f32 	%f31, 0f00000000;
	@%p1 bra 	$L__BB41_3;

	mov.u32 	%r6, %ntid.x;
	mul.lo.s32 	%r16, %r1, %r11;
	mad.lo.s32 	%r17, %r2, %r13, %r16;
	cvt.u64.u32 	%rd1, %r17;
	cvta.to.global.u64 	%rd2, %rd4;
	mov.f32 	%f31, 0f00000000;
	mov.u32 	%r61, %r3;

$L__BB41_2:
	mul.lo.s32 	%r18, %r61, %r12;
	cvt.s64.s32 	%rd6, %r18;
	add.s64 	%rd7, %rd6, %rd1;
	shl.b64 	%rd8, %rd7, 2;
	add.s64 	%rd9, %rd2, %rd8;
	ld.global.f32 	%f8, [%rd9];
	fma.rn.f32 	%f31, %f8, %f8, %f31;
	add.s32 	%r61, %r61, %r6;
	setp.lt.s32 	%p2, %r61, %r10;
	@%p2 bra 	$L__BB41_2;

$L__BB41_3:
	mov.b32 	%r19, %f31;
	mov.u32 	%r20, 31;
	mov.u32 	%r21, 16;
	mov.u32 	%r22, -1;
	shfl.sync.bfly.b32 	%r23|%p3, %r19, %r21, %r20, %r22;
	mov.b32 	%f9, %r23;
	add.f32 	%f10, %f31, %f9;
	mov.b32 	%r24, %f10;
	mov.u32 	%r25, 8;
	shfl.sync.bfly.b32 	%r26|%p4, %r24, %r25, %r20, %r22;
	mov.b32 	%f11, %r26;
	add.f32 	%f12, %f10, %f11;
	mov.b32 	%r27, %f12;
	mov.u32 	%r28, 4;
	shfl.sync.bfly.b32 	%r29|%p5, %r27, %r28, %r20, %r22;
	mov.b32 	%f13, %r29;
	add.f32 	%f14, %f12, %f13;
	mov.b32 	%r30, %f14;
	mov.u32 	%r31, 2;
	shfl.sync.bfly.b32 	%r32|%p6, %r30, %r31, %r20, %r22;
	mov.b32 	%f15, %r32;
	add.f32 	%f16, %f14, %f15;
	mov.b32 	%r33, %f16;
	mov.u32 	%r34, 1;
	shfl.sync.bfly.b32 	%r35|%p7, %r33, %r34, %r20, %r22;
	mov.b32 	%f17, %r35;
	add.f32 	%f4, %f16, %f17;
	shl.b32 	%r36, %r5, 2;
	mov.u32 	%r37, _ZZ26reduce_mean_of_squares_f32E6s_prod;
	add.s32 	%r9, %r37, %r36;
	setp.ne.s32 	%p8, %r4, 0;
	cvta.to.global.u64 	%rd10, %rd5;
	mul.lo.s32 	%r38, %r1, %r14;
	mad.lo.s32 	%r39, %r2, %r15, %r38;
	mul.wide.u32 	%rd11, %r39, 4;
	add.s64 	%rd3, %rd10, %rd11;
	@%p8 bra 	$L__BB41_5;

	mov.u32 	%r40, 0;
	st.shared.u32 	[%r9], %r40;

$L__BB41_5:
	bar.sync 	0;
	setp.ne.s32 	%p9, %r5, 0;
	@%p9 bra 	$L__BB41_7;

	shl.b32 	%r41, %r4, 2;
	add.s32 	%r43, %r37, %r41;
	st.shared.f32 	[%r43], %f4;

$L__BB41_7:
	bar.sync 	0;
	ld.shared.f32 	%f18, [%r9];
	mov.b32 	%r44, %f18;
	mov.u32 	%r45, 31;
	mov.u32 	%r46, 16;
	mov.u32 	%r47, -1;
	shfl.sync.bfly.b32 	%r48|%p10, %r44, %r46, %r45, %r47;
	mov.b32 	%f19, %r48;
	add.f32 	%f20, %f18, %f19;
	mov.b32 	%r49, %f20;
	mov.u32 	%r50, 8;
	shfl.sync.bfly.b32 	%r51|%p11, %r49, %r50, %r45, %r47;
	mov.b32 	%f21, %r51;
	add.f32 	%f22, %f20, %f21;
	mov.b32 	%r52, %f22;
	mov.u32 	%r53, 4;
	shfl.sync.bfly.b32 	%r54|%p12, %r52, %r53, %r45, %r47;
	mov.b32 	%f23, %r54;
	add.f32 	%f24, %f22, %f23;
	mov.b32 	%r55, %f24;
	mov.u32 	%r56, 2;
	shfl.sync.bfly.b32 	%r57|%p13, %r55, %r56, %r45, %r47;
	mov.b32 	%f25, %r57;
	add.f32 	%f26, %f24, %f25;
	mov.b32 	%r58, %f26;
	mov.u32 	%r59, 1;
	shfl.sync.bfly.b32 	%r60|%p14, %r58, %r59, %r45, %r47;
	mov.b32 	%f27, %r60;
	add.f32 	%f5, %f26, %f27;
	setp.ne.s32 	%p15, %r3, 0;
	@%p15 bra 	$L__BB41_9;

	cvt.rn.f32.s32 	%f28, %r10;
	div.rn.f32 	%f29, %f5, %f28;
	st.global.f32 	[%rd3], %f29;

$L__BB41_9:
	ret;

}
	// .globl	reduce_max_small_f16
.visible .entry reduce_max_small_f16(
	.param .u64 reduce_max_small_f16_param_0,
	.param .u64 reduce_max_small_f16_param_1,
	.param .u32 reduce_max_small_f16_param_2,
	.param .u32 reduce_max_small_f16_param_3,
	.param .u32 reduce_max_small_f16_param_4,
	.param .u32 reduce_max_small_f16_param_5,
	.param .u32 reduce_max_small_f16_param_6,
	.param .u32 reduce_max_small_f16_param_7,
	.param .u32 reduce_max_small_f16_param_8,
	.param .u32 reduce_max_small_f16_param_9,
	.param .u32 reduce_max_small_f16_param_10
)
{
	.reg .pred 	%p<9>;
	.reg .b16 	%rs<3>;
	.reg .f32 	%f<20>;
	.reg .b32 	%r<36>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd3, [reduce_max_small_f16_param_0];
	ld.param.u64 	%rd4, [reduce_max_small_f16_param_1];
	ld.param.u32 	%r8, [reduce_max_small_f16_param_3];
	ld.param.u32 	%r9, [reduce_max_small_f16_param_5];
	ld.param.u32 	%r10, [reduce_max_small_f16_param_6];
	ld.param.u32 	%r11, [reduce_max_small_f16_param_7];
	ld.param.u32 	%r12, [reduce_max_small_f16_param_8];
	ld.param.u32 	%r13, [reduce_max_small_f16_param_10];
	mov.u32 	%r1, %ctaid.z;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	setp.ge.s32 	%p1, %r3, %r8;
	mov.f32 	%f19, 0fFF800000;
	@%p1 bra 	$L__BB42_3;

	mov.u32 	%r4, %ntid.x;
	mul.lo.s32 	%r14, %r1, %r9;
	mad.lo.s32 	%r15, %r2, %r11, %r14;
	cvt.u64.u32 	%rd1, %r15;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.f32 	%f19, 0fFF800000;
	mov.u32 	%r35, %r3;

$L__BB42_2:
	mul.lo.s32 	%r16, %r35, %r10;
	cvt.s64.s32 	%rd5, %r16;
	add.s64 	%rd6, %rd5, %rd1;
	shl.b64 	%rd7, %rd6, 1;
	add.s64 	%rd8, %rd2, %rd7;
	ld.global.u16 	%rs1, [%rd8];
	// begin inline asm
	{  cvt.f32.f16 %f7, %rs1;}

	// end inline asm
	max.f32 	%f19, %f19, %f7;
	add.s32 	%r35, %r35, %r4;
	setp.lt.s32 	%p2, %r35, %r8;
	@%p2 bra 	$L__BB42_2;

$L__BB42_3:
	mov.b32 	%r17, %f19;
	mov.u32 	%r18, 31;
	mov.u32 	%r19, 16;
	mov.u32 	%r20, -1;
	shfl.sync.bfly.b32 	%r21|%p3, %r17, %r19, %r18, %r20;
	mov.b32 	%f8, %r21;
	max.f32 	%f9, %f19, %f8;
	mov.b32 	%r22, %f9;
	mov.u32 	%r23, 8;
	shfl.sync.bfly.b32 	%r24|%p4, %r22, %r23, %r18, %r20;
	mov.b32 	%f10, %r24;
	max.f32 	%f11, %f9, %f10;
	mov.b32 	%r25, %f11;
	mov.u32 	%r26, 4;
	shfl.sync.bfly.b32 	%r27|%p5, %r25, %r26, %r18, %r20;
	mov.b32 	%f12, %r27;
	max.f32 	%f13, %f11, %f12;
	mov.b32 	%r28, %f13;
	mov.u32 	%r29, 2;
	shfl.sync.bfly.b32 	%r30|%p6, %r28, %r29, %r18, %r20;
	mov.b32 	%f14, %r30;
	max.f32 	%f15, %f13, %f14;
	mov.b32 	%r31, %f15;
	mov.u32 	%r32, 1;
	shfl.sync.bfly.b32 	%r33|%p7, %r31, %r32, %r18, %r20;
	mov.b32 	%f16, %r33;
	max.f32 	%f4, %f15, %f16;
	setp.ne.s32 	%p8, %r3, 0;
	mul.lo.s32 	%r34, %r1, %r12;
	mad.lo.s32 	%r7, %r2, %r13, %r34;
	@%p8 bra 	$L__BB42_5;

	// begin inline asm
	{  cvt.rn.f16.f32 %rs2, %f4;}

	// end inline asm
	cvta.to.global.u64 	%rd9, %rd4;
	mul.wide.u32 	%rd10, %r7, 2;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.u16 	[%rd11], %rs2;

$L__BB42_5:
	ret;

}
	// .globl	reduce_min_small_f16
.visible .entry reduce_min_small_f16(
	.param .u64 reduce_min_small_f16_param_0,
	.param .u64 reduce_min_small_f16_param_1,
	.param .u32 reduce_min_small_f16_param_2,
	.param .u32 reduce_min_small_f16_param_3,
	.param .u32 reduce_min_small_f16_param_4,
	.param .u32 reduce_min_small_f16_param_5,
	.param .u32 reduce_min_small_f16_param_6,
	.param .u32 reduce_min_small_f16_param_7,
	.param .u32 reduce_min_small_f16_param_8,
	.param .u32 reduce_min_small_f16_param_9,
	.param .u32 reduce_min_small_f16_param_10
)
{
	.reg .pred 	%p<9>;
	.reg .b16 	%rs<3>;
	.reg .f32 	%f<20>;
	.reg .b32 	%r<36>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd3, [reduce_min_small_f16_param_0];
	ld.param.u64 	%rd4, [reduce_min_small_f16_param_1];
	ld.param.u32 	%r8, [reduce_min_small_f16_param_3];
	ld.param.u32 	%r9, [reduce_min_small_f16_param_5];
	ld.param.u32 	%r10, [reduce_min_small_f16_param_6];
	ld.param.u32 	%r11, [reduce_min_small_f16_param_7];
	ld.param.u32 	%r12, [reduce_min_small_f16_param_8];
	ld.param.u32 	%r13, [reduce_min_small_f16_param_10];
	mov.u32 	%r1, %ctaid.z;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	setp.ge.s32 	%p1, %r3, %r8;
	mov.f32 	%f19, 0f7F800000;
	@%p1 bra 	$L__BB43_3;

	mov.u32 	%r4, %ntid.x;
	mul.lo.s32 	%r14, %r1, %r9;
	mad.lo.s32 	%r15, %r2, %r11, %r14;
	cvt.u64.u32 	%rd1, %r15;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.f32 	%f19, 0f7F800000;
	mov.u32 	%r35, %r3;

$L__BB43_2:
	mul.lo.s32 	%r16, %r35, %r10;
	cvt.s64.s32 	%rd5, %r16;
	add.s64 	%rd6, %rd5, %rd1;
	shl.b64 	%rd7, %rd6, 1;
	add.s64 	%rd8, %rd2, %rd7;
	ld.global.u16 	%rs1, [%rd8];
	// begin inline asm
	{  cvt.f32.f16 %f7, %rs1;}

	// end inline asm
	min.f32 	%f19, %f19, %f7;
	add.s32 	%r35, %r35, %r4;
	setp.lt.s32 	%p2, %r35, %r8;
	@%p2 bra 	$L__BB43_2;

$L__BB43_3:
	mov.b32 	%r17, %f19;
	mov.u32 	%r18, 31;
	mov.u32 	%r19, 16;
	mov.u32 	%r20, -1;
	shfl.sync.bfly.b32 	%r21|%p3, %r17, %r19, %r18, %r20;
	mov.b32 	%f8, %r21;
	min.f32 	%f9, %f19, %f8;
	mov.b32 	%r22, %f9;
	mov.u32 	%r23, 8;
	shfl.sync.bfly.b32 	%r24|%p4, %r22, %r23, %r18, %r20;
	mov.b32 	%f10, %r24;
	min.f32 	%f11, %f9, %f10;
	mov.b32 	%r25, %f11;
	mov.u32 	%r26, 4;
	shfl.sync.bfly.b32 	%r27|%p5, %r25, %r26, %r18, %r20;
	mov.b32 	%f12, %r27;
	min.f32 	%f13, %f11, %f12;
	mov.b32 	%r28, %f13;
	mov.u32 	%r29, 2;
	shfl.sync.bfly.b32 	%r30|%p6, %r28, %r29, %r18, %r20;
	mov.b32 	%f14, %r30;
	min.f32 	%f15, %f13, %f14;
	mov.b32 	%r31, %f15;
	mov.u32 	%r32, 1;
	shfl.sync.bfly.b32 	%r33|%p7, %r31, %r32, %r18, %r20;
	mov.b32 	%f16, %r33;
	min.f32 	%f4, %f15, %f16;
	setp.ne.s32 	%p8, %r3, 0;
	mul.lo.s32 	%r34, %r1, %r12;
	mad.lo.s32 	%r7, %r2, %r13, %r34;
	@%p8 bra 	$L__BB43_5;

	// begin inline asm
	{  cvt.rn.f16.f32 %rs2, %f4;}

	// end inline asm
	cvta.to.global.u64 	%rd9, %rd4;
	mul.wide.u32 	%rd10, %r7, 2;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.u16 	[%rd11], %rs2;

$L__BB43_5:
	ret;

}
	// .globl	reduce_sum_small_f16
.visible .entry reduce_sum_small_f16(
	.param .u64 reduce_sum_small_f16_param_0,
	.param .u64 reduce_sum_small_f16_param_1,
	.param .u32 reduce_sum_small_f16_param_2,
	.param .u32 reduce_sum_small_f16_param_3,
	.param .u32 reduce_sum_small_f16_param_4,
	.param .u32 reduce_sum_small_f16_param_5,
	.param .u32 reduce_sum_small_f16_param_6,
	.param .u32 reduce_sum_small_f16_param_7,
	.param .u32 reduce_sum_small_f16_param_8,
	.param .u32 reduce_sum_small_f16_param_9,
	.param .u32 reduce_sum_small_f16_param_10
)
{
	.reg .pred 	%p<4>;
	.reg .b16 	%rs<42>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<69>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd3, [reduce_sum_small_f16_param_0];
	ld.param.u64 	%rd4, [reduce_sum_small_f16_param_1];
	ld.param.u32 	%r8, [reduce_sum_small_f16_param_3];
	ld.param.u32 	%r9, [reduce_sum_small_f16_param_5];
	ld.param.u32 	%r10, [reduce_sum_small_f16_param_6];
	ld.param.u32 	%r11, [reduce_sum_small_f16_param_7];
	ld.param.u32 	%r12, [reduce_sum_small_f16_param_8];
	ld.param.u32 	%r13, [reduce_sum_small_f16_param_10];
	mov.u32 	%r1, %ctaid.z;
	mov.u32 	%r2, %ctaid.x;
	mov.f32 	%f1, 0f00000000;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs41, %f1;}

	// end inline asm
	mov.u32 	%r3, %tid.x;
	setp.ge.s32 	%p1, %r3, %r8;
	@%p1 bra 	$L__BB44_3;

	mov.u32 	%r4, %ntid.x;
	mul.lo.s32 	%r14, %r1, %r9;
	mad.lo.s32 	%r15, %r2, %r11, %r14;
	cvt.u64.u32 	%rd1, %r15;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.u32 	%r68, %r3;

$L__BB44_2:
	mul.lo.s32 	%r16, %r68, %r10;
	cvt.s64.s32 	%rd5, %r16;
	add.s64 	%rd6, %rd5, %rd1;
	shl.b64 	%rd7, %rd6, 1;
	add.s64 	%rd8, %rd2, %rd7;
	ld.global.u16 	%rs9, [%rd8];
	// begin inline asm
	{add.f16 %rs41,%rs41,%rs9;
}
	// end inline asm
	add.s32 	%r68, %r68, %r4;
	setp.lt.s32 	%p2, %r68, %r8;
	@%p2 bra 	$L__BB44_2;

$L__BB44_3:
	// begin inline asm
	{  mov.b32 %r17, {%rs41,%rs41};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r18, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r57, %r18, 8;
	mov.u32 	%r29, 8;
	add.s32 	%r58, %r57, -8192;
	or.b32  	%r22, %r58, 31;
	mov.u32 	%r21, 16;
	mov.u32 	%r55, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r19,%r17,%r21,%r22,%r55;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r19;
 mov.b16 %rs12, low;}
	// end inline asm
	// begin inline asm
	{add.f16 %rs13,%rs41,%rs12;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r25, {%rs13,%rs13};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r26, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r59, %r26, 8;
	add.s32 	%r60, %r59, -8192;
	or.b32  	%r30, %r60, 31;
	// begin inline asm
	{shfl.sync.bfly.b32 %r27,%r25,%r29,%r30,%r55;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r27;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{add.f16 %rs19,%rs13,%rs18;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r33, {%rs19,%rs19};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r34, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r61, %r34, 8;
	add.s32 	%r62, %r61, -8192;
	or.b32  	%r38, %r62, 31;
	mov.u32 	%r37, 4;
	// begin inline asm
	{shfl.sync.bfly.b32 %r35,%r33,%r37,%r38,%r55;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r35;
 mov.b16 %rs24, low;}
	// end inline asm
	// begin inline asm
	{add.f16 %rs25,%rs19,%rs24;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r41, {%rs25,%rs25};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r42, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r63, %r42, 8;
	add.s32 	%r64, %r63, -8192;
	or.b32  	%r46, %r64, 31;
	mov.u32 	%r45, 2;
	// begin inline asm
	{shfl.sync.bfly.b32 %r43,%r41,%r45,%r46,%r55;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r43;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{add.f16 %rs31,%rs25,%rs30;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r49, {%rs31,%rs31};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r50, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r65, %r50, 8;
	add.s32 	%r66, %r65, -8192;
	or.b32  	%r54, %r66, 31;
	mov.u32 	%r53, 1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r51,%r49,%r53,%r54,%r55;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r51;
 mov.b16 %rs36, low;}
	// end inline asm
	// begin inline asm
	{add.f16 %rs37,%rs31,%rs36;
}
	// end inline asm
	setp.ne.s32 	%p3, %r3, 0;
	mul.lo.s32 	%r67, %r1, %r12;
	mad.lo.s32 	%r7, %r2, %r13, %r67;
	@%p3 bra 	$L__BB44_5;

	cvta.to.global.u64 	%rd9, %rd4;
	mul.wide.u32 	%rd10, %r7, 2;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.u16 	[%rd11], %rs37;

$L__BB44_5:
	ret;

}
	// .globl	reduce_prod_small_f16
.visible .entry reduce_prod_small_f16(
	.param .u64 reduce_prod_small_f16_param_0,
	.param .u64 reduce_prod_small_f16_param_1,
	.param .u32 reduce_prod_small_f16_param_2,
	.param .u32 reduce_prod_small_f16_param_3,
	.param .u32 reduce_prod_small_f16_param_4,
	.param .u32 reduce_prod_small_f16_param_5,
	.param .u32 reduce_prod_small_f16_param_6,
	.param .u32 reduce_prod_small_f16_param_7,
	.param .u32 reduce_prod_small_f16_param_8,
	.param .u32 reduce_prod_small_f16_param_9,
	.param .u32 reduce_prod_small_f16_param_10
)
{
	.reg .pred 	%p<4>;
	.reg .b16 	%rs<42>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<69>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd3, [reduce_prod_small_f16_param_0];
	ld.param.u64 	%rd4, [reduce_prod_small_f16_param_1];
	ld.param.u32 	%r8, [reduce_prod_small_f16_param_3];
	ld.param.u32 	%r9, [reduce_prod_small_f16_param_5];
	ld.param.u32 	%r10, [reduce_prod_small_f16_param_6];
	ld.param.u32 	%r11, [reduce_prod_small_f16_param_7];
	ld.param.u32 	%r12, [reduce_prod_small_f16_param_8];
	ld.param.u32 	%r13, [reduce_prod_small_f16_param_10];
	mov.u32 	%r1, %ctaid.z;
	mov.u32 	%r2, %ctaid.x;
	mov.f32 	%f1, 0f3F800000;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs41, %f1;}

	// end inline asm
	mov.u32 	%r3, %tid.x;
	setp.ge.s32 	%p1, %r3, %r8;
	@%p1 bra 	$L__BB45_3;

	mov.u32 	%r4, %ntid.x;
	mul.lo.s32 	%r14, %r1, %r9;
	mad.lo.s32 	%r15, %r2, %r11, %r14;
	cvt.u64.u32 	%rd1, %r15;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.u32 	%r68, %r3;

$L__BB45_2:
	mul.lo.s32 	%r16, %r68, %r10;
	cvt.s64.s32 	%rd5, %r16;
	add.s64 	%rd6, %rd5, %rd1;
	shl.b64 	%rd7, %rd6, 1;
	add.s64 	%rd8, %rd2, %rd7;
	ld.global.u16 	%rs9, [%rd8];
	// begin inline asm
	{mul.f16 %rs41,%rs41,%rs9;
}
	// end inline asm
	add.s32 	%r68, %r68, %r4;
	setp.lt.s32 	%p2, %r68, %r8;
	@%p2 bra 	$L__BB45_2;

$L__BB45_3:
	// begin inline asm
	{  mov.b32 %r17, {%rs41,%rs41};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r18, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r57, %r18, 8;
	mov.u32 	%r29, 8;
	add.s32 	%r58, %r57, -8192;
	or.b32  	%r22, %r58, 31;
	mov.u32 	%r21, 16;
	mov.u32 	%r55, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r19,%r17,%r21,%r22,%r55;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r19;
 mov.b16 %rs12, low;}
	// end inline asm
	// begin inline asm
	{mul.f16 %rs13,%rs41,%rs12;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r25, {%rs13,%rs13};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r26, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r59, %r26, 8;
	add.s32 	%r60, %r59, -8192;
	or.b32  	%r30, %r60, 31;
	// begin inline asm
	{shfl.sync.bfly.b32 %r27,%r25,%r29,%r30,%r55;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r27;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{mul.f16 %rs19,%rs13,%rs18;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r33, {%rs19,%rs19};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r34, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r61, %r34, 8;
	add.s32 	%r62, %r61, -8192;
	or.b32  	%r38, %r62, 31;
	mov.u32 	%r37, 4;
	// begin inline asm
	{shfl.sync.bfly.b32 %r35,%r33,%r37,%r38,%r55;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r35;
 mov.b16 %rs24, low;}
	// end inline asm
	// begin inline asm
	{mul.f16 %rs25,%rs19,%rs24;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r41, {%rs25,%rs25};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r42, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r63, %r42, 8;
	add.s32 	%r64, %r63, -8192;
	or.b32  	%r46, %r64, 31;
	mov.u32 	%r45, 2;
	// begin inline asm
	{shfl.sync.bfly.b32 %r43,%r41,%r45,%r46,%r55;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r43;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{mul.f16 %rs31,%rs25,%rs30;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r49, {%rs31,%rs31};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r50, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r65, %r50, 8;
	add.s32 	%r66, %r65, -8192;
	or.b32  	%r54, %r66, 31;
	mov.u32 	%r53, 1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r51,%r49,%r53,%r54,%r55;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r51;
 mov.b16 %rs36, low;}
	// end inline asm
	// begin inline asm
	{mul.f16 %rs37,%rs31,%rs36;
}
	// end inline asm
	setp.ne.s32 	%p3, %r3, 0;
	mul.lo.s32 	%r67, %r1, %r12;
	mad.lo.s32 	%r7, %r2, %r13, %r67;
	@%p3 bra 	$L__BB45_5;

	cvta.to.global.u64 	%rd9, %rd4;
	mul.wide.u32 	%rd10, %r7, 2;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.u16 	[%rd11], %rs37;

$L__BB45_5:
	ret;

}
	// .globl	reduce_mean_of_squares_small_f16
.visible .entry reduce_mean_of_squares_small_f16(
	.param .u64 reduce_mean_of_squares_small_f16_param_0,
	.param .u64 reduce_mean_of_squares_small_f16_param_1,
	.param .u32 reduce_mean_of_squares_small_f16_param_2,
	.param .u32 reduce_mean_of_squares_small_f16_param_3,
	.param .u32 reduce_mean_of_squares_small_f16_param_4,
	.param .u32 reduce_mean_of_squares_small_f16_param_5,
	.param .u32 reduce_mean_of_squares_small_f16_param_6,
	.param .u32 reduce_mean_of_squares_small_f16_param_7,
	.param .u32 reduce_mean_of_squares_small_f16_param_8,
	.param .u32 reduce_mean_of_squares_small_f16_param_9,
	.param .u32 reduce_mean_of_squares_small_f16_param_10
)
{
	.reg .pred 	%p<6>;
	.reg .b16 	%rs<64>;
	.reg .f32 	%f<15>;
	.reg .b32 	%r<70>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd3, [reduce_mean_of_squares_small_f16_param_0];
	ld.param.u64 	%rd4, [reduce_mean_of_squares_small_f16_param_1];
	ld.param.u32 	%r8, [reduce_mean_of_squares_small_f16_param_3];
	ld.param.u32 	%r9, [reduce_mean_of_squares_small_f16_param_5];
	ld.param.u32 	%r10, [reduce_mean_of_squares_small_f16_param_6];
	ld.param.u32 	%r11, [reduce_mean_of_squares_small_f16_param_7];
	ld.param.u32 	%r12, [reduce_mean_of_squares_small_f16_param_8];
	ld.param.u32 	%r13, [reduce_mean_of_squares_small_f16_param_10];
	mov.u32 	%r1, %ctaid.z;
	mov.u32 	%r2, %ctaid.x;
	mov.f32 	%f5, 0f00000000;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs62, %f5;}

	// end inline asm
	mov.u32 	%r3, %tid.x;
	setp.ge.s32 	%p1, %r3, %r8;
	@%p1 bra 	$L__BB46_3;

	mov.u32 	%r4, %ntid.x;
	mul.lo.s32 	%r14, %r1, %r9;
	mad.lo.s32 	%r15, %r2, %r11, %r14;
	cvt.u64.u32 	%rd1, %r15;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.u32 	%r69, %r3;

$L__BB46_2:
	mul.lo.s32 	%r16, %r69, %r10;
	cvt.s64.s32 	%rd5, %r16;
	add.s64 	%rd6, %rd5, %rd1;
	shl.b64 	%rd7, %rd6, 1;
	add.s64 	%rd8, %rd2, %rd7;
	ld.global.u16 	%rs12, [%rd8];
	// begin inline asm
	{mul.f16 %rs11,%rs12,%rs12;
}
	// end inline asm
	// begin inline asm
	{add.f16 %rs62,%rs62,%rs11;
}
	// end inline asm
	add.s32 	%r69, %r69, %r4;
	setp.lt.s32 	%p2, %r69, %r8;
	@%p2 bra 	$L__BB46_2;

$L__BB46_3:
	// begin inline asm
	{  mov.b32 %r17, {%rs62,%rs62};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r18, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r57, %r18, 8;
	mov.u32 	%r29, 8;
	add.s32 	%r58, %r57, -8192;
	or.b32  	%r22, %r58, 31;
	mov.u32 	%r21, 16;
	mov.u32 	%r55, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r19,%r17,%r21,%r22,%r55;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r19;
 mov.b16 %rs19, low;}
	// end inline asm
	// begin inline asm
	{add.f16 %rs20,%rs62,%rs19;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r25, {%rs20,%rs20};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r26, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r59, %r26, 8;
	add.s32 	%r60, %r59, -8192;
	or.b32  	%r30, %r60, 31;
	// begin inline asm
	{shfl.sync.bfly.b32 %r27,%r25,%r29,%r30,%r55;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r27;
 mov.b16 %rs25, low;}
	// end inline asm
	// begin inline asm
	{add.f16 %rs26,%rs20,%rs25;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r33, {%rs26,%rs26};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r34, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r61, %r34, 8;
	add.s32 	%r62, %r61, -8192;
	or.b32  	%r38, %r62, 31;
	mov.u32 	%r37, 4;
	// begin inline asm
	{shfl.sync.bfly.b32 %r35,%r33,%r37,%r38,%r55;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r35;
 mov.b16 %rs31, low;}
	// end inline asm
	// begin inline asm
	{add.f16 %rs32,%rs26,%rs31;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r41, {%rs32,%rs32};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r42, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r63, %r42, 8;
	add.s32 	%r64, %r63, -8192;
	or.b32  	%r46, %r64, 31;
	mov.u32 	%r45, 2;
	// begin inline asm
	{shfl.sync.bfly.b32 %r43,%r41,%r45,%r46,%r55;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r43;
 mov.b16 %rs37, low;}
	// end inline asm
	// begin inline asm
	{add.f16 %rs38,%rs32,%rs37;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r49, {%rs38,%rs38};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r50, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r65, %r50, 8;
	add.s32 	%r66, %r65, -8192;
	or.b32  	%r54, %r66, 31;
	mov.u32 	%r53, 1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r51,%r49,%r53,%r54,%r55;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r51;
 mov.b16 %rs43, low;}
	// end inline asm
	// begin inline asm
	{add.f16 %rs44,%rs38,%rs43;
}
	// end inline asm
	setp.ne.s32 	%p3, %r3, 0;
	mul.lo.s32 	%r67, %r1, %r12;
	mad.lo.s32 	%r7, %r2, %r13, %r67;
	@%p3 bra 	$L__BB46_8;

	// begin inline asm
	cvt.rn.f16.s32 %rs47, %r8;
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f6, %rs44;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f7, %rs47;}

	// end inline asm
	// begin inline asm
	{rcp.approx.ftz.f32 %f8, %f7;
}
	// end inline asm
	mul.f32 	%f10, %f6, %f8;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs63, %f10;}

	// end inline asm
	// begin inline asm
	{abs.f16 %rs51,%rs63;
}
	// end inline asm
	mov.u16 	%rs55, 143;
	// begin inline asm
	{ .reg .pred __$temp3;
  setp.lt.f16  __$temp3, %rs51, %rs55;
  selp.u16 %rs53, 1, 0, __$temp3;}
	// end inline asm
	setp.eq.s16 	%p4, %rs53, 0;
	@%p4 bra 	$L__BB46_7;

	mov.f32 	%f11, 0f00000000;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs56, %f11;}

	// end inline asm
	// begin inline asm
	{ .reg .pred __$temp3;
  setp.lt.f16  __$temp3, %rs56, %rs51;
  selp.u16 %rs57, 1, 0, __$temp3;}
	// end inline asm
	setp.eq.s16 	%p5, %rs57, 0;
	@%p5 bra 	$L__BB46_7;

	neg.f32 	%f13, %f7;
	fma.rn.f32 	%f14, %f13, %f10, %f6;
	fma.rn.f32 	%f12, %f8, %f14, %f10;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs63, %f12;}

	// end inline asm

$L__BB46_7:
	cvta.to.global.u64 	%rd9, %rd4;
	mul.wide.u32 	%rd10, %r7, 2;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.u16 	[%rd11], %rs63;

$L__BB46_8:
	ret;

}
	// .globl	reduce_max_f16
.visible .entry reduce_max_f16(
	.param .u64 reduce_max_f16_param_0,
	.param .u64 reduce_max_f16_param_1,
	.param .u32 reduce_max_f16_param_2,
	.param .u32 reduce_max_f16_param_3,
	.param .u32 reduce_max_f16_param_4,
	.param .u32 reduce_max_f16_param_5,
	.param .u32 reduce_max_f16_param_6,
	.param .u32 reduce_max_f16_param_7,
	.param .u32 reduce_max_f16_param_8,
	.param .u32 reduce_max_f16_param_9,
	.param .u32 reduce_max_f16_param_10
)
{
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<3>;
	.reg .f32 	%f<31>;
	.reg .b32 	%r<62>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 _ZZ14reduce_max_f16E5s_max[128];

	ld.param.u64 	%rd3, [reduce_max_f16_param_0];
	ld.param.u64 	%rd4, [reduce_max_f16_param_1];
	ld.param.u32 	%r11, [reduce_max_f16_param_3];
	ld.param.u32 	%r12, [reduce_max_f16_param_5];
	ld.param.u32 	%r13, [reduce_max_f16_param_6];
	ld.param.u32 	%r14, [reduce_max_f16_param_7];
	ld.param.u32 	%r15, [reduce_max_f16_param_8];
	ld.param.u32 	%r16, [reduce_max_f16_param_10];
	mov.u32 	%r1, %ctaid.z;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	shr.u32 	%r4, %r3, 5;
	and.b32  	%r5, %r3, 31;
	setp.ge.s32 	%p1, %r3, %r11;
	mov.f32 	%f30, 0fFF800000;
	@%p1 bra 	$L__BB47_3;

	mov.u32 	%r6, %ntid.x;
	mul.lo.s32 	%r17, %r1, %r12;
	mad.lo.s32 	%r18, %r2, %r14, %r17;
	cvt.u64.u32 	%rd1, %r18;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.f32 	%f30, 0fFF800000;
	mov.u32 	%r61, %r3;

$L__BB47_2:
	mul.lo.s32 	%r19, %r61, %r13;
	cvt.s64.s32 	%rd5, %r19;
	add.s64 	%rd6, %rd5, %rd1;
	shl.b64 	%rd7, %rd6, 1;
	add.s64 	%rd8, %rd2, %rd7;
	ld.global.u16 	%rs1, [%rd8];
	// begin inline asm
	{  cvt.f32.f16 %f8, %rs1;}

	// end inline asm
	max.f32 	%f30, %f30, %f8;
	add.s32 	%r61, %r61, %r6;
	setp.lt.s32 	%p2, %r61, %r11;
	@%p2 bra 	$L__BB47_2;

$L__BB47_3:
	mov.b32 	%r20, %f30;
	mov.u32 	%r21, 31;
	mov.u32 	%r22, 16;
	mov.u32 	%r23, -1;
	shfl.sync.bfly.b32 	%r24|%p3, %r20, %r22, %r21, %r23;
	mov.b32 	%f9, %r24;
	max.f32 	%f10, %f30, %f9;
	mov.b32 	%r25, %f10;
	mov.u32 	%r26, 8;
	shfl.sync.bfly.b32 	%r27|%p4, %r25, %r26, %r21, %r23;
	mov.b32 	%f11, %r27;
	max.f32 	%f12, %f10, %f11;
	mov.b32 	%r28, %f12;
	mov.u32 	%r29, 4;
	shfl.sync.bfly.b32 	%r30|%p5, %r28, %r29, %r21, %r23;
	mov.b32 	%f13, %r30;
	max.f32 	%f14, %f12, %f13;
	mov.b32 	%r31, %f14;
	mov.u32 	%r32, 2;
	shfl.sync.bfly.b32 	%r33|%p6, %r31, %r32, %r21, %r23;
	mov.b32 	%f15, %r33;
	max.f32 	%f16, %f14, %f15;
	mov.b32 	%r34, %f16;
	mov.u32 	%r35, 1;
	shfl.sync.bfly.b32 	%r36|%p7, %r34, %r35, %r21, %r23;
	mov.b32 	%f17, %r36;
	max.f32 	%f4, %f16, %f17;
	shl.b32 	%r37, %r5, 2;
	mov.u32 	%r38, _ZZ14reduce_max_f16E5s_max;
	add.s32 	%r9, %r38, %r37;
	setp.ne.s32 	%p8, %r4, 0;
	mul.lo.s32 	%r39, %r1, %r15;
	mad.lo.s32 	%r10, %r2, %r16, %r39;
	@%p8 bra 	$L__BB47_5;

	mov.u32 	%r40, -8388608;
	st.shared.u32 	[%r9], %r40;

$L__BB47_5:
	bar.sync 	0;
	setp.ne.s32 	%p9, %r5, 0;
	@%p9 bra 	$L__BB47_7;

	shl.b32 	%r41, %r4, 2;
	add.s32 	%r43, %r38, %r41;
	st.shared.f32 	[%r43], %f4;

$L__BB47_7:
	bar.sync 	0;
	ld.shared.f32 	%f18, [%r9];
	mov.b32 	%r44, %f18;
	mov.u32 	%r45, 31;
	mov.u32 	%r46, 16;
	mov.u32 	%r47, -1;
	shfl.sync.bfly.b32 	%r48|%p10, %r44, %r46, %r45, %r47;
	mov.b32 	%f19, %r48;
	max.f32 	%f20, %f18, %f19;
	mov.b32 	%r49, %f20;
	mov.u32 	%r50, 8;
	shfl.sync.bfly.b32 	%r51|%p11, %r49, %r50, %r45, %r47;
	mov.b32 	%f21, %r51;
	max.f32 	%f22, %f20, %f21;
	mov.b32 	%r52, %f22;
	mov.u32 	%r53, 4;
	shfl.sync.bfly.b32 	%r54|%p12, %r52, %r53, %r45, %r47;
	mov.b32 	%f23, %r54;
	max.f32 	%f24, %f22, %f23;
	mov.b32 	%r55, %f24;
	mov.u32 	%r56, 2;
	shfl.sync.bfly.b32 	%r57|%p13, %r55, %r56, %r45, %r47;
	mov.b32 	%f25, %r57;
	max.f32 	%f26, %f24, %f25;
	mov.b32 	%r58, %f26;
	mov.u32 	%r59, 1;
	shfl.sync.bfly.b32 	%r60|%p14, %r58, %r59, %r45, %r47;
	mov.b32 	%f27, %r60;
	max.f32 	%f5, %f26, %f27;
	setp.ne.s32 	%p15, %r3, 0;
	@%p15 bra 	$L__BB47_9;

	// begin inline asm
	{  cvt.rn.f16.f32 %rs2, %f5;}

	// end inline asm
	cvta.to.global.u64 	%rd9, %rd4;
	mul.wide.u32 	%rd10, %r10, 2;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.u16 	[%rd11], %rs2;

$L__BB47_9:
	ret;

}
	// .globl	reduce_min_f16
.visible .entry reduce_min_f16(
	.param .u64 reduce_min_f16_param_0,
	.param .u64 reduce_min_f16_param_1,
	.param .u32 reduce_min_f16_param_2,
	.param .u32 reduce_min_f16_param_3,
	.param .u32 reduce_min_f16_param_4,
	.param .u32 reduce_min_f16_param_5,
	.param .u32 reduce_min_f16_param_6,
	.param .u32 reduce_min_f16_param_7,
	.param .u32 reduce_min_f16_param_8,
	.param .u32 reduce_min_f16_param_9,
	.param .u32 reduce_min_f16_param_10
)
{
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<3>;
	.reg .f32 	%f<31>;
	.reg .b32 	%r<62>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 _ZZ14reduce_min_f16E5s_min[128];

	ld.param.u64 	%rd3, [reduce_min_f16_param_0];
	ld.param.u64 	%rd4, [reduce_min_f16_param_1];
	ld.param.u32 	%r11, [reduce_min_f16_param_3];
	ld.param.u32 	%r12, [reduce_min_f16_param_5];
	ld.param.u32 	%r13, [reduce_min_f16_param_6];
	ld.param.u32 	%r14, [reduce_min_f16_param_7];
	ld.param.u32 	%r15, [reduce_min_f16_param_8];
	ld.param.u32 	%r16, [reduce_min_f16_param_10];
	mov.u32 	%r1, %ctaid.z;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	shr.u32 	%r4, %r3, 5;
	and.b32  	%r5, %r3, 31;
	setp.ge.s32 	%p1, %r3, %r11;
	mov.f32 	%f30, 0f7F800000;
	@%p1 bra 	$L__BB48_3;

	mov.u32 	%r6, %ntid.x;
	mul.lo.s32 	%r17, %r1, %r12;
	mad.lo.s32 	%r18, %r2, %r14, %r17;
	cvt.u64.u32 	%rd1, %r18;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.f32 	%f30, 0f7F800000;
	mov.u32 	%r61, %r3;

$L__BB48_2:
	mul.lo.s32 	%r19, %r61, %r13;
	cvt.s64.s32 	%rd5, %r19;
	add.s64 	%rd6, %rd5, %rd1;
	shl.b64 	%rd7, %rd6, 1;
	add.s64 	%rd8, %rd2, %rd7;
	ld.global.u16 	%rs1, [%rd8];
	// begin inline asm
	{  cvt.f32.f16 %f8, %rs1;}

	// end inline asm
	min.f32 	%f30, %f30, %f8;
	add.s32 	%r61, %r61, %r6;
	setp.lt.s32 	%p2, %r61, %r11;
	@%p2 bra 	$L__BB48_2;

$L__BB48_3:
	mov.b32 	%r20, %f30;
	mov.u32 	%r21, 31;
	mov.u32 	%r22, 16;
	mov.u32 	%r23, -1;
	shfl.sync.bfly.b32 	%r24|%p3, %r20, %r22, %r21, %r23;
	mov.b32 	%f9, %r24;
	min.f32 	%f10, %f30, %f9;
	mov.b32 	%r25, %f10;
	mov.u32 	%r26, 8;
	shfl.sync.bfly.b32 	%r27|%p4, %r25, %r26, %r21, %r23;
	mov.b32 	%f11, %r27;
	min.f32 	%f12, %f10, %f11;
	mov.b32 	%r28, %f12;
	mov.u32 	%r29, 4;
	shfl.sync.bfly.b32 	%r30|%p5, %r28, %r29, %r21, %r23;
	mov.b32 	%f13, %r30;
	min.f32 	%f14, %f12, %f13;
	mov.b32 	%r31, %f14;
	mov.u32 	%r32, 2;
	shfl.sync.bfly.b32 	%r33|%p6, %r31, %r32, %r21, %r23;
	mov.b32 	%f15, %r33;
	min.f32 	%f16, %f14, %f15;
	mov.b32 	%r34, %f16;
	mov.u32 	%r35, 1;
	shfl.sync.bfly.b32 	%r36|%p7, %r34, %r35, %r21, %r23;
	mov.b32 	%f17, %r36;
	min.f32 	%f4, %f16, %f17;
	shl.b32 	%r37, %r5, 2;
	mov.u32 	%r38, _ZZ14reduce_min_f16E5s_min;
	add.s32 	%r9, %r38, %r37;
	setp.ne.s32 	%p8, %r4, 0;
	mul.lo.s32 	%r39, %r1, %r15;
	mad.lo.s32 	%r10, %r2, %r16, %r39;
	@%p8 bra 	$L__BB48_5;

	mov.u32 	%r40, -8388608;
	st.shared.u32 	[%r9], %r40;

$L__BB48_5:
	bar.sync 	0;
	setp.ne.s32 	%p9, %r5, 0;
	@%p9 bra 	$L__BB48_7;

	shl.b32 	%r41, %r4, 2;
	add.s32 	%r43, %r38, %r41;
	st.shared.f32 	[%r43], %f4;

$L__BB48_7:
	bar.sync 	0;
	ld.shared.f32 	%f18, [%r9];
	mov.b32 	%r44, %f18;
	mov.u32 	%r45, 31;
	mov.u32 	%r46, 16;
	mov.u32 	%r47, -1;
	shfl.sync.bfly.b32 	%r48|%p10, %r44, %r46, %r45, %r47;
	mov.b32 	%f19, %r48;
	min.f32 	%f20, %f18, %f19;
	mov.b32 	%r49, %f20;
	mov.u32 	%r50, 8;
	shfl.sync.bfly.b32 	%r51|%p11, %r49, %r50, %r45, %r47;
	mov.b32 	%f21, %r51;
	min.f32 	%f22, %f20, %f21;
	mov.b32 	%r52, %f22;
	mov.u32 	%r53, 4;
	shfl.sync.bfly.b32 	%r54|%p12, %r52, %r53, %r45, %r47;
	mov.b32 	%f23, %r54;
	min.f32 	%f24, %f22, %f23;
	mov.b32 	%r55, %f24;
	mov.u32 	%r56, 2;
	shfl.sync.bfly.b32 	%r57|%p13, %r55, %r56, %r45, %r47;
	mov.b32 	%f25, %r57;
	min.f32 	%f26, %f24, %f25;
	mov.b32 	%r58, %f26;
	mov.u32 	%r59, 1;
	shfl.sync.bfly.b32 	%r60|%p14, %r58, %r59, %r45, %r47;
	mov.b32 	%f27, %r60;
	min.f32 	%f5, %f26, %f27;
	setp.ne.s32 	%p15, %r3, 0;
	@%p15 bra 	$L__BB48_9;

	// begin inline asm
	{  cvt.rn.f16.f32 %rs2, %f5;}

	// end inline asm
	cvta.to.global.u64 	%rd9, %rd4;
	mul.wide.u32 	%rd10, %r10, 2;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.u16 	[%rd11], %rs2;

$L__BB48_9:
	ret;

}
	// .globl	reduce_sum_f16
.visible .entry reduce_sum_f16(
	.param .u64 reduce_sum_f16_param_0,
	.param .u64 reduce_sum_f16_param_1,
	.param .u32 reduce_sum_f16_param_2,
	.param .u32 reduce_sum_f16_param_3,
	.param .u32 reduce_sum_f16_param_4,
	.param .u32 reduce_sum_f16_param_5,
	.param .u32 reduce_sum_f16_param_6,
	.param .u32 reduce_sum_f16_param_7,
	.param .u32 reduce_sum_f16_param_8,
	.param .u32 reduce_sum_f16_param_9,
	.param .u32 reduce_sum_f16_param_10
)
{
	.reg .pred 	%p<6>;
	.reg .b16 	%rs<74>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<127>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 2 .b8 _ZZ14reduce_sum_f16E5s_sum[64];

	ld.param.u64 	%rd3, [reduce_sum_f16_param_0];
	ld.param.u64 	%rd4, [reduce_sum_f16_param_1];
	ld.param.u32 	%r11, [reduce_sum_f16_param_3];
	ld.param.u32 	%r12, [reduce_sum_f16_param_5];
	ld.param.u32 	%r13, [reduce_sum_f16_param_6];
	ld.param.u32 	%r14, [reduce_sum_f16_param_7];
	ld.param.u32 	%r15, [reduce_sum_f16_param_8];
	ld.param.u32 	%r16, [reduce_sum_f16_param_10];
	mov.u32 	%r1, %ctaid.z;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	shr.u32 	%r4, %r3, 5;
	and.b32  	%r5, %r3, 31;
	mov.f32 	%f1, 0f00000000;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs73, %f1;}

	// end inline asm
	setp.ge.s32 	%p1, %r3, %r11;
	@%p1 bra 	$L__BB49_3;

	mov.u32 	%r6, %ntid.x;
	mul.lo.s32 	%r17, %r1, %r12;
	mad.lo.s32 	%r18, %r2, %r14, %r17;
	cvt.u64.u32 	%rd1, %r18;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.u32 	%r126, %r3;

$L__BB49_2:
	mul.lo.s32 	%r19, %r126, %r13;
	cvt.s64.s32 	%rd5, %r19;
	add.s64 	%rd6, %rd5, %rd1;
	shl.b64 	%rd7, %rd6, 1;
	add.s64 	%rd8, %rd2, %rd7;
	ld.global.u16 	%rs10, [%rd8];
	// begin inline asm
	{add.f16 %rs73,%rs73,%rs10;
}
	// end inline asm
	add.s32 	%r126, %r126, %r6;
	setp.lt.s32 	%p2, %r126, %r11;
	@%p2 bra 	$L__BB49_2;

$L__BB49_3:
	// begin inline asm
	{  mov.b32 %r20, {%rs73,%rs73};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r21, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r60, %r21, 8;
	mov.u32 	%r32, 8;
	add.s32 	%r61, %r60, -8192;
	or.b32  	%r25, %r61, 31;
	mov.u32 	%r24, 16;
	mov.u32 	%r58, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r22,%r20,%r24,%r25,%r58;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r22;
 mov.b16 %rs13, low;}
	// end inline asm
	// begin inline asm
	{add.f16 %rs14,%rs73,%rs13;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r28, {%rs14,%rs14};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r29, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r62, %r29, 8;
	add.s32 	%r63, %r62, -8192;
	or.b32  	%r33, %r63, 31;
	// begin inline asm
	{shfl.sync.bfly.b32 %r30,%r28,%r32,%r33,%r58;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r30;
 mov.b16 %rs19, low;}
	// end inline asm
	// begin inline asm
	{add.f16 %rs20,%rs14,%rs19;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r36, {%rs20,%rs20};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r37, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r64, %r37, 8;
	add.s32 	%r65, %r64, -8192;
	or.b32  	%r41, %r65, 31;
	mov.u32 	%r40, 4;
	// begin inline asm
	{shfl.sync.bfly.b32 %r38,%r36,%r40,%r41,%r58;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r38;
 mov.b16 %rs25, low;}
	// end inline asm
	// begin inline asm
	{add.f16 %rs26,%rs20,%rs25;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r44, {%rs26,%rs26};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r45, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r66, %r45, 8;
	add.s32 	%r67, %r66, -8192;
	or.b32  	%r49, %r67, 31;
	mov.u32 	%r48, 2;
	// begin inline asm
	{shfl.sync.bfly.b32 %r46,%r44,%r48,%r49,%r58;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r46;
 mov.b16 %rs31, low;}
	// end inline asm
	// begin inline asm
	{add.f16 %rs32,%rs26,%rs31;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r52, {%rs32,%rs32};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r53, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r68, %r53, 8;
	add.s32 	%r69, %r68, -8192;
	or.b32  	%r57, %r69, 31;
	mov.u32 	%r56, 1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r54,%r52,%r56,%r57,%r58;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r54;
 mov.b16 %rs37, low;}
	// end inline asm
	// begin inline asm
	{add.f16 %rs38,%rs32,%rs37;
}
	// end inline asm
	shl.b32 	%r70, %r5, 1;
	mov.u32 	%r71, _ZZ14reduce_sum_f16E5s_sum;
	add.s32 	%r9, %r71, %r70;
	setp.ne.s32 	%p3, %r4, 0;
	mul.lo.s32 	%r72, %r1, %r15;
	mad.lo.s32 	%r10, %r2, %r16, %r72;
	@%p3 bra 	$L__BB49_5;

	mov.f32 	%f2, 0f00000000;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs41, %f2;}

	// end inline asm
	st.shared.u16 	[%r9], %rs41;

$L__BB49_5:
	bar.sync 	0;
	setp.ne.s32 	%p4, %r5, 0;
	@%p4 bra 	$L__BB49_7;

	shl.b32 	%r73, %r4, 1;
	add.s32 	%r75, %r71, %r73;
	st.shared.u16 	[%r75], %rs38;

$L__BB49_7:
	bar.sync 	0;
	ld.shared.u16 	%rs42, [%r9];
	// begin inline asm
	{  mov.b32 %r76, {%rs42,%rs42};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r77, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r116, %r77, 8;
	mov.u32 	%r88, 8;
	add.s32 	%r117, %r116, -8192;
	or.b32  	%r81, %r117, 31;
	mov.u32 	%r80, 16;
	mov.u32 	%r114, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r78,%r76,%r80,%r81,%r114;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r78;
 mov.b16 %rs44, low;}
	// end inline asm
	// begin inline asm
	{add.f16 %rs45,%rs42,%rs44;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r84, {%rs45,%rs45};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r85, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r118, %r85, 8;
	add.s32 	%r119, %r118, -8192;
	or.b32  	%r89, %r119, 31;
	// begin inline asm
	{shfl.sync.bfly.b32 %r86,%r84,%r88,%r89,%r114;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r86;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{add.f16 %rs51,%rs45,%rs50;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r92, {%rs51,%rs51};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r93, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r120, %r93, 8;
	add.s32 	%r121, %r120, -8192;
	or.b32  	%r97, %r121, 31;
	mov.u32 	%r96, 4;
	// begin inline asm
	{shfl.sync.bfly.b32 %r94,%r92,%r96,%r97,%r114;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r94;
 mov.b16 %rs56, low;}
	// end inline asm
	// begin inline asm
	{add.f16 %rs57,%rs51,%rs56;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r100, {%rs57,%rs57};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r101, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r122, %r101, 8;
	add.s32 	%r123, %r122, -8192;
	or.b32  	%r105, %r123, 31;
	mov.u32 	%r104, 2;
	// begin inline asm
	{shfl.sync.bfly.b32 %r102,%r100,%r104,%r105,%r114;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r102;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{add.f16 %rs63,%rs57,%rs62;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r108, {%rs63,%rs63};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r109, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r124, %r109, 8;
	add.s32 	%r125, %r124, -8192;
	or.b32  	%r113, %r125, 31;
	mov.u32 	%r112, 1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r110,%r108,%r112,%r113,%r114;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r110;
 mov.b16 %rs68, low;}
	// end inline asm
	// begin inline asm
	{add.f16 %rs69,%rs63,%rs68;
}
	// end inline asm
	setp.ne.s32 	%p5, %r3, 0;
	@%p5 bra 	$L__BB49_9;

	cvta.to.global.u64 	%rd9, %rd4;
	mul.wide.u32 	%rd10, %r10, 2;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.u16 	[%rd11], %rs69;

$L__BB49_9:
	ret;

}
	// .globl	reduce_prod_f16
.visible .entry reduce_prod_f16(
	.param .u64 reduce_prod_f16_param_0,
	.param .u64 reduce_prod_f16_param_1,
	.param .u32 reduce_prod_f16_param_2,
	.param .u32 reduce_prod_f16_param_3,
	.param .u32 reduce_prod_f16_param_4,
	.param .u32 reduce_prod_f16_param_5,
	.param .u32 reduce_prod_f16_param_6,
	.param .u32 reduce_prod_f16_param_7,
	.param .u32 reduce_prod_f16_param_8,
	.param .u32 reduce_prod_f16_param_9,
	.param .u32 reduce_prod_f16_param_10
)
{
	.reg .pred 	%p<6>;
	.reg .b16 	%rs<74>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<127>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 2 .b8 _ZZ15reduce_prod_f16E6s_prod[64];

	ld.param.u64 	%rd3, [reduce_prod_f16_param_0];
	ld.param.u64 	%rd4, [reduce_prod_f16_param_1];
	ld.param.u32 	%r11, [reduce_prod_f16_param_3];
	ld.param.u32 	%r12, [reduce_prod_f16_param_5];
	ld.param.u32 	%r13, [reduce_prod_f16_param_6];
	ld.param.u32 	%r14, [reduce_prod_f16_param_7];
	ld.param.u32 	%r15, [reduce_prod_f16_param_8];
	ld.param.u32 	%r16, [reduce_prod_f16_param_10];
	mov.u32 	%r1, %ctaid.z;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	shr.u32 	%r4, %r3, 5;
	and.b32  	%r5, %r3, 31;
	mov.f32 	%f1, 0f3F800000;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs73, %f1;}

	// end inline asm
	setp.ge.s32 	%p1, %r3, %r11;
	@%p1 bra 	$L__BB50_3;

	mov.u32 	%r6, %ntid.x;
	mul.lo.s32 	%r17, %r1, %r12;
	mad.lo.s32 	%r18, %r2, %r14, %r17;
	cvt.u64.u32 	%rd1, %r18;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.u32 	%r126, %r3;

$L__BB50_2:
	mul.lo.s32 	%r19, %r126, %r13;
	cvt.s64.s32 	%rd5, %r19;
	add.s64 	%rd6, %rd5, %rd1;
	shl.b64 	%rd7, %rd6, 1;
	add.s64 	%rd8, %rd2, %rd7;
	ld.global.u16 	%rs10, [%rd8];
	// begin inline asm
	{mul.f16 %rs73,%rs73,%rs10;
}
	// end inline asm
	add.s32 	%r126, %r126, %r6;
	setp.lt.s32 	%p2, %r126, %r11;
	@%p2 bra 	$L__BB50_2;

$L__BB50_3:
	// begin inline asm
	{  mov.b32 %r20, {%rs73,%rs73};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r21, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r60, %r21, 8;
	mov.u32 	%r32, 8;
	add.s32 	%r61, %r60, -8192;
	or.b32  	%r25, %r61, 31;
	mov.u32 	%r24, 16;
	mov.u32 	%r58, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r22,%r20,%r24,%r25,%r58;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r22;
 mov.b16 %rs13, low;}
	// end inline asm
	// begin inline asm
	{mul.f16 %rs14,%rs73,%rs13;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r28, {%rs14,%rs14};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r29, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r62, %r29, 8;
	add.s32 	%r63, %r62, -8192;
	or.b32  	%r33, %r63, 31;
	// begin inline asm
	{shfl.sync.bfly.b32 %r30,%r28,%r32,%r33,%r58;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r30;
 mov.b16 %rs19, low;}
	// end inline asm
	// begin inline asm
	{mul.f16 %rs20,%rs14,%rs19;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r36, {%rs20,%rs20};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r37, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r64, %r37, 8;
	add.s32 	%r65, %r64, -8192;
	or.b32  	%r41, %r65, 31;
	mov.u32 	%r40, 4;
	// begin inline asm
	{shfl.sync.bfly.b32 %r38,%r36,%r40,%r41,%r58;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r38;
 mov.b16 %rs25, low;}
	// end inline asm
	// begin inline asm
	{mul.f16 %rs26,%rs20,%rs25;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r44, {%rs26,%rs26};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r45, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r66, %r45, 8;
	add.s32 	%r67, %r66, -8192;
	or.b32  	%r49, %r67, 31;
	mov.u32 	%r48, 2;
	// begin inline asm
	{shfl.sync.bfly.b32 %r46,%r44,%r48,%r49,%r58;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r46;
 mov.b16 %rs31, low;}
	// end inline asm
	// begin inline asm
	{mul.f16 %rs32,%rs26,%rs31;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r52, {%rs32,%rs32};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r53, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r68, %r53, 8;
	add.s32 	%r69, %r68, -8192;
	or.b32  	%r57, %r69, 31;
	mov.u32 	%r56, 1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r54,%r52,%r56,%r57,%r58;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r54;
 mov.b16 %rs37, low;}
	// end inline asm
	// begin inline asm
	{mul.f16 %rs38,%rs32,%rs37;
}
	// end inline asm
	shl.b32 	%r70, %r5, 1;
	mov.u32 	%r71, _ZZ15reduce_prod_f16E6s_prod;
	add.s32 	%r9, %r71, %r70;
	setp.ne.s32 	%p3, %r4, 0;
	mul.lo.s32 	%r72, %r1, %r15;
	mad.lo.s32 	%r10, %r2, %r16, %r72;
	@%p3 bra 	$L__BB50_5;

	mov.f32 	%f2, 0f00000000;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs41, %f2;}

	// end inline asm
	st.shared.u16 	[%r9], %rs41;

$L__BB50_5:
	bar.sync 	0;
	setp.ne.s32 	%p4, %r5, 0;
	@%p4 bra 	$L__BB50_7;

	shl.b32 	%r73, %r4, 1;
	add.s32 	%r75, %r71, %r73;
	st.shared.u16 	[%r75], %rs38;

$L__BB50_7:
	bar.sync 	0;
	ld.shared.u16 	%rs42, [%r9];
	// begin inline asm
	{  mov.b32 %r76, {%rs42,%rs42};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r77, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r116, %r77, 8;
	mov.u32 	%r88, 8;
	add.s32 	%r117, %r116, -8192;
	or.b32  	%r81, %r117, 31;
	mov.u32 	%r80, 16;
	mov.u32 	%r114, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r78,%r76,%r80,%r81,%r114;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r78;
 mov.b16 %rs44, low;}
	// end inline asm
	// begin inline asm
	{mul.f16 %rs45,%rs42,%rs44;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r84, {%rs45,%rs45};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r85, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r118, %r85, 8;
	add.s32 	%r119, %r118, -8192;
	or.b32  	%r89, %r119, 31;
	// begin inline asm
	{shfl.sync.bfly.b32 %r86,%r84,%r88,%r89,%r114;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r86;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{mul.f16 %rs51,%rs45,%rs50;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r92, {%rs51,%rs51};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r93, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r120, %r93, 8;
	add.s32 	%r121, %r120, -8192;
	or.b32  	%r97, %r121, 31;
	mov.u32 	%r96, 4;
	// begin inline asm
	{shfl.sync.bfly.b32 %r94,%r92,%r96,%r97,%r114;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r94;
 mov.b16 %rs56, low;}
	// end inline asm
	// begin inline asm
	{mul.f16 %rs57,%rs51,%rs56;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r100, {%rs57,%rs57};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r101, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r122, %r101, 8;
	add.s32 	%r123, %r122, -8192;
	or.b32  	%r105, %r123, 31;
	mov.u32 	%r104, 2;
	// begin inline asm
	{shfl.sync.bfly.b32 %r102,%r100,%r104,%r105,%r114;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r102;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{mul.f16 %rs63,%rs57,%rs62;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r108, {%rs63,%rs63};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r109, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r124, %r109, 8;
	add.s32 	%r125, %r124, -8192;
	or.b32  	%r113, %r125, 31;
	mov.u32 	%r112, 1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r110,%r108,%r112,%r113,%r114;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r110;
 mov.b16 %rs68, low;}
	// end inline asm
	// begin inline asm
	{mul.f16 %rs69,%rs63,%rs68;
}
	// end inline asm
	setp.ne.s32 	%p5, %r3, 0;
	@%p5 bra 	$L__BB50_9;

	cvta.to.global.u64 	%rd9, %rd4;
	mul.wide.u32 	%rd10, %r10, 2;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.u16 	[%rd11], %rs69;

$L__BB50_9:
	ret;

}
	// .globl	reduce_mean_of_squares_f16
.visible .entry reduce_mean_of_squares_f16(
	.param .u64 reduce_mean_of_squares_f16_param_0,
	.param .u64 reduce_mean_of_squares_f16_param_1,
	.param .u32 reduce_mean_of_squares_f16_param_2,
	.param .u32 reduce_mean_of_squares_f16_param_3,
	.param .u32 reduce_mean_of_squares_f16_param_4,
	.param .u32 reduce_mean_of_squares_f16_param_5,
	.param .u32 reduce_mean_of_squares_f16_param_6,
	.param .u32 reduce_mean_of_squares_f16_param_7,
	.param .u32 reduce_mean_of_squares_f16_param_8,
	.param .u32 reduce_mean_of_squares_f16_param_9,
	.param .u32 reduce_mean_of_squares_f16_param_10
)
{
	.reg .pred 	%p<8>;
	.reg .b16 	%rs<96>;
	.reg .f32 	%f<16>;
	.reg .b32 	%r<128>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 2 .b8 _ZZ26reduce_mean_of_squares_f16E6s_prod[64];

	ld.param.u64 	%rd3, [reduce_mean_of_squares_f16_param_0];
	ld.param.u64 	%rd4, [reduce_mean_of_squares_f16_param_1];
	ld.param.u32 	%r11, [reduce_mean_of_squares_f16_param_3];
	ld.param.u32 	%r12, [reduce_mean_of_squares_f16_param_5];
	ld.param.u32 	%r13, [reduce_mean_of_squares_f16_param_6];
	ld.param.u32 	%r14, [reduce_mean_of_squares_f16_param_7];
	ld.param.u32 	%r15, [reduce_mean_of_squares_f16_param_8];
	ld.param.u32 	%r16, [reduce_mean_of_squares_f16_param_10];
	mov.u32 	%r1, %ctaid.z;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	shr.u32 	%r4, %r3, 5;
	and.b32  	%r5, %r3, 31;
	mov.f32 	%f5, 0f00000000;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs94, %f5;}

	// end inline asm
	setp.ge.s32 	%p1, %r3, %r11;
	@%p1 bra 	$L__BB51_3;

	mov.u32 	%r6, %ntid.x;
	mul.lo.s32 	%r17, %r1, %r12;
	mad.lo.s32 	%r18, %r2, %r14, %r17;
	cvt.u64.u32 	%rd1, %r18;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.u32 	%r127, %r3;

$L__BB51_2:
	mul.lo.s32 	%r19, %r127, %r13;
	cvt.s64.s32 	%rd5, %r19;
	add.s64 	%rd6, %rd5, %rd1;
	shl.b64 	%rd7, %rd6, 1;
	add.s64 	%rd8, %rd2, %rd7;
	ld.global.u16 	%rs13, [%rd8];
	// begin inline asm
	{mul.f16 %rs12,%rs13,%rs13;
}
	// end inline asm
	// begin inline asm
	{add.f16 %rs94,%rs94,%rs12;
}
	// end inline asm
	add.s32 	%r127, %r127, %r6;
	setp.lt.s32 	%p2, %r127, %r11;
	@%p2 bra 	$L__BB51_2;

$L__BB51_3:
	// begin inline asm
	{  mov.b32 %r20, {%rs94,%rs94};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r21, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r60, %r21, 8;
	mov.u32 	%r32, 8;
	add.s32 	%r61, %r60, -8192;
	or.b32  	%r25, %r61, 31;
	mov.u32 	%r24, 16;
	mov.u32 	%r58, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r22,%r20,%r24,%r25,%r58;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r22;
 mov.b16 %rs20, low;}
	// end inline asm
	// begin inline asm
	{add.f16 %rs21,%rs94,%rs20;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r28, {%rs21,%rs21};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r29, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r62, %r29, 8;
	add.s32 	%r63, %r62, -8192;
	or.b32  	%r33, %r63, 31;
	// begin inline asm
	{shfl.sync.bfly.b32 %r30,%r28,%r32,%r33,%r58;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r30;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{add.f16 %rs27,%rs21,%rs26;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r36, {%rs27,%rs27};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r37, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r64, %r37, 8;
	add.s32 	%r65, %r64, -8192;
	or.b32  	%r41, %r65, 31;
	mov.u32 	%r40, 4;
	// begin inline asm
	{shfl.sync.bfly.b32 %r38,%r36,%r40,%r41,%r58;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r38;
 mov.b16 %rs32, low;}
	// end inline asm
	// begin inline asm
	{add.f16 %rs33,%rs27,%rs32;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r44, {%rs33,%rs33};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r45, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r66, %r45, 8;
	add.s32 	%r67, %r66, -8192;
	or.b32  	%r49, %r67, 31;
	mov.u32 	%r48, 2;
	// begin inline asm
	{shfl.sync.bfly.b32 %r46,%r44,%r48,%r49,%r58;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r46;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{add.f16 %rs39,%rs33,%rs38;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r52, {%rs39,%rs39};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r53, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r68, %r53, 8;
	add.s32 	%r69, %r68, -8192;
	or.b32  	%r57, %r69, 31;
	mov.u32 	%r56, 1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r54,%r52,%r56,%r57,%r58;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r54;
 mov.b16 %rs44, low;}
	// end inline asm
	// begin inline asm
	{add.f16 %rs45,%rs39,%rs44;
}
	// end inline asm
	shl.b32 	%r70, %r5, 1;
	mov.u32 	%r71, _ZZ26reduce_mean_of_squares_f16E6s_prod;
	add.s32 	%r9, %r71, %r70;
	setp.ne.s32 	%p3, %r4, 0;
	mul.lo.s32 	%r72, %r1, %r15;
	mad.lo.s32 	%r10, %r2, %r16, %r72;
	@%p3 bra 	$L__BB51_5;

	mov.f32 	%f6, 0f00000000;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs48, %f6;}

	// end inline asm
	st.shared.u16 	[%r9], %rs48;

$L__BB51_5:
	bar.sync 	0;
	setp.ne.s32 	%p4, %r5, 0;
	@%p4 bra 	$L__BB51_7;

	shl.b32 	%r73, %r4, 1;
	add.s32 	%r75, %r71, %r73;
	st.shared.u16 	[%r75], %rs45;

$L__BB51_7:
	bar.sync 	0;
	ld.shared.u16 	%rs49, [%r9];
	// begin inline asm
	{  mov.b32 %r76, {%rs49,%rs49};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r77, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r116, %r77, 8;
	mov.u32 	%r88, 8;
	add.s32 	%r117, %r116, -8192;
	or.b32  	%r81, %r117, 31;
	mov.u32 	%r80, 16;
	mov.u32 	%r114, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r78,%r76,%r80,%r81,%r114;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r78;
 mov.b16 %rs51, low;}
	// end inline asm
	// begin inline asm
	{add.f16 %rs52,%rs49,%rs51;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r84, {%rs52,%rs52};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r85, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r118, %r85, 8;
	add.s32 	%r119, %r118, -8192;
	or.b32  	%r89, %r119, 31;
	// begin inline asm
	{shfl.sync.bfly.b32 %r86,%r84,%r88,%r89,%r114;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r86;
 mov.b16 %rs57, low;}
	// end inline asm
	// begin inline asm
	{add.f16 %rs58,%rs52,%rs57;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r92, {%rs58,%rs58};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r93, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r120, %r93, 8;
	add.s32 	%r121, %r120, -8192;
	or.b32  	%r97, %r121, 31;
	mov.u32 	%r96, 4;
	// begin inline asm
	{shfl.sync.bfly.b32 %r94,%r92,%r96,%r97,%r114;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r94;
 mov.b16 %rs63, low;}
	// end inline asm
	// begin inline asm
	{add.f16 %rs64,%rs58,%rs63;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r100, {%rs64,%rs64};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r101, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r122, %r101, 8;
	add.s32 	%r123, %r122, -8192;
	or.b32  	%r105, %r123, 31;
	mov.u32 	%r104, 2;
	// begin inline asm
	{shfl.sync.bfly.b32 %r102,%r100,%r104,%r105,%r114;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r102;
 mov.b16 %rs69, low;}
	// end inline asm
	// begin inline asm
	{add.f16 %rs70,%rs64,%rs69;
}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r108, {%rs70,%rs70};}

	// end inline asm
	// begin inline asm
	{mov.u32 %r109, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r124, %r109, 8;
	add.s32 	%r125, %r124, -8192;
	or.b32  	%r113, %r125, 31;
	mov.u32 	%r112, 1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r110,%r108,%r112,%r113,%r114;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r110;
 mov.b16 %rs75, low;}
	// end inline asm
	// begin inline asm
	{add.f16 %rs76,%rs70,%rs75;
}
	// end inline asm
	setp.ne.s32 	%p5, %r3, 0;
	@%p5 bra 	$L__BB51_12;

	// begin inline asm
	cvt.rn.f16.s32 %rs79, %r11;
	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f7, %rs76;}

	// end inline asm
	// begin inline asm
	{  cvt.f32.f16 %f8, %rs79;}

	// end inline asm
	// begin inline asm
	{rcp.approx.ftz.f32 %f9, %f8;
}
	// end inline asm
	mul.f32 	%f11, %f7, %f9;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs95, %f11;}

	// end inline asm
	// begin inline asm
	{abs.f16 %rs83,%rs95;
}
	// end inline asm
	mov.u16 	%rs87, 143;
	// begin inline asm
	{ .reg .pred __$temp3;
  setp.lt.f16  __$temp3, %rs83, %rs87;
  selp.u16 %rs85, 1, 0, __$temp3;}
	// end inline asm
	setp.eq.s16 	%p6, %rs85, 0;
	@%p6 bra 	$L__BB51_11;

	mov.f32 	%f12, 0f00000000;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs88, %f12;}

	// end inline asm
	// begin inline asm
	{ .reg .pred __$temp3;
  setp.lt.f16  __$temp3, %rs88, %rs83;
  selp.u16 %rs89, 1, 0, __$temp3;}
	// end inline asm
	setp.eq.s16 	%p7, %rs89, 0;
	@%p7 bra 	$L__BB51_11;

	neg.f32 	%f14, %f8;
	fma.rn.f32 	%f15, %f14, %f11, %f7;
	fma.rn.f32 	%f13, %f9, %f15, %f11;
	// begin inline asm
	{  cvt.rn.f16.f32 %rs95, %f13;}

	// end inline asm

$L__BB51_11:
	cvta.to.global.u64 	%rd9, %rd4;
	mul.wide.u32 	%rd10, %r10, 2;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.u16 	[%rd11], %rs95;

$L__BB51_12:
	ret;

}

